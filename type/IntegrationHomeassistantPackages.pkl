/// This module was generated from JSON Schema from
/// <file:///Users/jeffsandberg/Developer/homeassistant-pkl/priv/schemas/json/integration-homeassistant-packages.json>.
///
/// WARN: unable to determine module-level properties on the root schema.
module IntegrationHomeassistantPackages

class Schema {
  auth_mfa_modules: (
    Listing<Any>
    |String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$"))))?

  auth_providers: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Listing<AuthProviders>)?

  /// List of folders that can be used as sources for files.
  /// https://www.home-assistant.io/docs/configuration/basic/#allowlist_external_dirs
  allowlist_external_dirs: Listing<String>?

  /// List of URLs that can be used as sources for files.
  /// https://www.home-assistant.io/docs/configuration/basic/#allowlist_external_urls
  allowlist_external_urls: Listing<String>?

  /// Country in which Home Assistant is running. This may, for example, influence radio settings to
  /// comply with local regulations. The country should be specified as an ISO 3166.1 alpha-2 code. Pick
  /// your country from the column Code of Wikipedia’s list of ISO 31661 alpha-2 officially assigned code
  /// codes. https://www.home-assistant.io/docs/configuration/basic/#country
  country: (
    "AD"
    |"AE"
    |"AF"
    |"AG"
    |"AI"
    |"AL"
    |"AM"
    |"AO"
    |"AQ"
    |"AR"
    |"AS"
    |"AT"
    |"AU"
    |"AW"
    |"AX"
    |"AZ"
    |"BA"
    |"BB"
    |"BD"
    |"BE"
    |"BF"
    |"BG"
    |"BH"
    |"BI"
    |"BJ"
    |"BL"
    |"BM"
    |"BN"
    |"BO"
    |"BQ"
    |"BR"
    |"BS"
    |"BT"
    |"BV"
    |"BW"
    |"BY"
    |"BZ"
    |"CA"
    |"CC"
    |"CD"
    |"CF"
    |"CG"
    |"CH"
    |"CI"
    |"CK"
    |"CL"
    |"CM"
    |"CN"
    |"CO"
    |"CR"
    |"CU"
    |"CV"
    |"CW"
    |"CX"
    |"CY"
    |"CZ"
    |"DE"
    |"DJ"
    |"DK"
    |"DM"
    |"DO"
    |"DZ"
    |"EC"
    |"EE"
    |"EG"
    |"EH"
    |"ER"
    |"ES"
    |"ET"
    |"FI"
    |"FJ"
    |"FK"
    |"FM"
    |"FO"
    |"FR"
    |"GA"
    |"GB"
    |"GD"
    |"GE"
    |"GF"
    |"GG"
    |"GH"
    |"GI"
    |"GL"
    |"GM"
    |"GN"
    |"GP"
    |"GQ"
    |"GR"
    |"GS"
    |"GT"
    |"GU"
    |"GW"
    |"GY"
    |"HK"
    |"HM"
    |"HN"
    |"HR"
    |"HT"
    |"HU"
    |"ID"
    |"IE"
    |"IL"
    |"IM"
    |"IN"
    |"IO"
    |"IQ"
    |"IR"
    |"IS"
    |"IT"
    |"JE"
    |"JM"
    |"JO"
    |"JP"
    |"KE"
    |"KG"
    |"KH"
    |"KI"
    |"KM"
    |"KN"
    |"KP"
    |"KR"
    |"KW"
    |"KY"
    |"KZ"
    |"LA"
    |"LB"
    |"LC"
    |"LI"
    |"LK"
    |"LR"
    |"LS"
    |"LT"
    |"LU"
    |"LV"
    |"LY"
    |"MA"
    |"MC"
    |"MD"
    |"ME"
    |"MF"
    |"MG"
    |"MH"
    |"MK"
    |"ML"
    |"MM"
    |"MN"
    |"MO"
    |"MP"
    |"MQ"
    |"MR"
    |"MS"
    |"MT"
    |"MU"
    |"MV"
    |"MW"
    |"MX"
    |"MY"
    |"MZ"
    |"NA"
    |"NC"
    |"NE"
    |"NF"
    |"NG"
    |"NI"
    |"NL"
    |"NO"
    |"NP"
    |"NR"
    |"NU"
    |"NZ"
    |"OM"
    |"PA"
    |"PE"
    |"PF"
    |"PG"
    |"PH"
    |"PK"
    |"PL"
    |"PM"
    |"PN"
    |"PR"
    |"PS"
    |"PT"
    |"PW"
    |"PY"
    |"QA"
    |"RE"
    |"RO"
    |"RS"
    |"RU"
    |"RW"
    |"SA"
    |"SB"
    |"SC"
    |"SD"
    |"SE"
    |"SG"
    |"SH"
    |"SI"
    |"SJ"
    |"SK"
    |"SL"
    |"SM"
    |"SN"
    |"SO"
    |"SR"
    |"SS"
    |"ST"
    |"SV"
    |"SX"
    |"SY"
    |"SZ"
    |"TC"
    |"TD"
    |"TF"
    |"TG"
    |"TH"
    |"TJ"
    |"TK"
    |"TL"
    |"TM"
    |"TN"
    |"TO"
    |"TR"
    |"TT"
    |"TV"
    |"TW"
    |"TZ"
    |"UA"
    |"UG"
    |"UM"
    |"US"
    |"UY"
    |"UZ"
    |"VA"
    |"VC"
    |"VE"
    |"VG"
    |"VI"
    |"VN"
    |"VU"
    |"WF"
    |"WS"
    |"YE"
    |"YT"
    |"ZA"
    |"ZM"
    |"ZW")?

  /// Set the default currency for Home Assistant to use.
  /// https://www.home-assistant.io/docs/configuration/basic/#currency
  currency: (
    "AED"
    |"AFN"
    |"ALL"
    |"AMD"
    |"ANG"
    |"AOA"
    |"ARS"
    |"AUD"
    |"AWG"
    |"AZN"
    |"BAM"
    |"BBD"
    |"BDT"
    |"BGN"
    |"BHD"
    |"BIF"
    |"BMD"
    |"BND"
    |"BOB"
    |"BRL"
    |"BSD"
    |"BTN"
    |"BWP"
    |"BYR"
    |"BZD"
    |"CAD"
    |"CDF"
    |"CHF"
    |"CLP"
    |"CNY"
    |"COP"
    |"CRC"
    |"CUP"
    |"CVE"
    |"CZK"
    |"DJF"
    |"DKK"
    |"DOP"
    |"DZD"
    |"EGP"
    |"ERN"
    |"ETB"
    |"EUR"
    |"FJD"
    |"FKP"
    |"GBP"
    |"GEL"
    |"GHS"
    |"GIP"
    |"GMD"
    |"GNF"
    |"GTQ"
    |"GYD"
    |"HKD"
    |"HNL"
    |"HRK"
    |"HTG"
    |"HUF"
    |"IDR"
    |"ILS"
    |"INR"
    |"IQD"
    |"IRR"
    |"ISK"
    |"JMD"
    |"JOD"
    |"JPY"
    |"KES"
    |"KGS"
    |"KHR"
    |"KMF"
    |"KPW"
    |"KRW"
    |"KWD"
    |"KYD"
    |"KZT"
    |"LAK"
    |"LBP"
    |"LKR"
    |"LRD"
    |"LSL"
    |"LTL"
    |"LYD"
    |"MAD"
    |"MDL"
    |"MGA"
    |"MKD"
    |"MMK"
    |"MNT"
    |"MOP"
    |"MRO"
    |"MUR"
    |"MVR"
    |"MWK"
    |"MXN"
    |"MYR"
    |"MZN"
    |"NAD"
    |"NGN"
    |"NIO"
    |"NOK"
    |"NPR"
    |"NZD"
    |"OMR"
    |"PAB"
    |"PEN"
    |"PGK"
    |"PHP"
    |"PKR"
    |"PLN"
    |"PYG"
    |"QAR"
    |"RON"
    |"RSD"
    |"RUB"
    |"RWF"
    |"SAR"
    |"SBD"
    |"SCR"
    |"SDG"
    |"SEK"
    |"SGD"
    |"SHP"
    |"SLL"
    |"SOS"
    |"SRD"
    |"SSP"
    |"STD"
    |"SYP"
    |"SZL"
    |"THB"
    |"TJS"
    |"TMT"
    |"TND"
    |"TOP"
    |"TRY"
    |"TTD"
    |"TWD"
    |"TZS"
    |"UAH"
    |"UGX"
    |"USD"
    |"UYU"
    |"UZS"
    |"VEF"
    |"VND"
    |"VUV"
    |"WST"
    |"XAF"
    |"XCD"
    |"XOF"
    |"XPF"
    |"YER"
    |"ZAR"
    |"ZMK"
    |"ZWL")?

  /// Customize entities. https://www.home-assistant.io/docs/configuration/customizing-devices/
  customize: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |CoreCustomize)?

  /// Customize all entities of a given domain.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/
  customize_domain: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |CoreCustomize)?

  /// Customize entities matching a pattern.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/
  customize_glob: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |CoreCustomize)?

  /// Altitude above sea level in meters. Impacts weather/sunrise data.
  /// https://www.home-assistant.io/docs/configuration/basic/#elevation
  elevation: Int?

  /// The URL that Home Assistant is available on from the internet. For example:
  /// https://example.duckdns.org:8123. Note that this setting may only contain a protocol, hostname and
  /// port; using a path is not supported.
  /// https://www.home-assistant.io/docs/configuration/basic/#external_url
  external_url: String?

  /// The URL that Home Assistant is available on from your local network. For example:
  /// http://homeassistant.local:8123. Note that this setting may only contain a protocol, hostname and
  /// port; using a path is not supported.
  /// https://www.home-assistant.io/docs/configuration/basic/#internal_url
  internal_url: String?

  /// Default language used by Home Assistant. This may, for example, influence the language used by
  /// voice assistants. The language should be specified as an RFC 5646 language tag, and must be a
  /// language which Home Assistant is translated to.
  /// https://www.home-assistant.io/docs/configuration/basic/#language
  language: (
    "af"
    |"ar"
    |"bg"
    |"bn"
    |"bs"
    |"ca"
    |"cs"
    |"cy"
    |"da"
    |"de"
    |"el"
    |"en"
    |"en-GB"
    |"eo"
    |"es"
    |"es-419"
    |"et"
    |"eu"
    |"fa"
    |"fi"
    |"fr"
    |"fy"
    |"gl"
    |"gsw"
    |"he"
    |"hi"
    |"hr"
    |"hu"
    |"hy"
    |"id"
    |"is"
    |"it"
    |"ja"
    |"ka"
    |"ko"
    |"lb"
    |"lt"
    |"lv"
    |"ml"
    |"nb"
    |"nl"
    |"nn"
    |"pl"
    |"pt"
    |"pt-BR"
    |"ro"
    |"ru"
    |"sk"
    |"sl"
    |"sr"
    |"sr-Latn"
    |"sv"
    |"ta"
    |"te"
    |"th"
    |"tr"
    |"uk"
    |"ur"
    |"vi"
    |"zh-Hans"
    |"zh-Hant")?

  /// Latitude of your location required to calculate the time the sun rises and sets.
  /// https://www.home-assistant.io/docs/configuration/basic/#latitude
  latitude: Number(isBetween(-90, 90))?

  /// Enable this option to restore pre-0.117 template rendering. Which renders all templates to string,
  /// instead of native types. https://www.home-assistant.io/docs/configuration/basic/#legacy_templates
  legacy_templates: Boolean?

  /// Longitude of your location required to calculate the time the sun rises and sets.
  /// https://www.home-assistant.io/docs/configuration/basic/#longitude
  longitude: Number(isBetween(-180, 180))?

  /// A mapping of local media sources and their paths on disk.
  /// https://www.home-assistant.io/docs/configuration/basic/#media_dirs
  media_dirs: Mapping<String, String>?

  /// Name of the location where Home Assistant is running.
  /// https://www.home-assistant.io/docs/configuration/basic/#name
  name: String?

  /// Packages in Home Assistant provide a way to bundle different component’s configuration together. It
  /// allows for "splitting" your configuration.
  /// https://www.home-assistant.io/docs/configuration/packages/
  packages: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |ConfigurationRoot)?

  /// Pick your time zone from the column TZ of Wikipedia’s list of tz database time
  /// https://www.home-assistant.io/docs/configuration/basic/#time_zone
  /// https://www.wikiwand.com/en/List_of_tz_database_time_zones
  time_zone: (
    "Africa/Abidjan"
    |"Africa/Accra"
    |"Africa/Addis_Ababa"
    |"Africa/Algiers"
    |"Africa/Asmara"
    |"Africa/Asmera"
    |"Africa/Bamako"
    |"Africa/Bangui"
    |"Africa/Banjul"
    |"Africa/Bissau"
    |"Africa/Blantyre"
    |"Africa/Brazzaville"
    |"Africa/Bujumbura"
    |"Africa/Cairo"
    |"Africa/Casablanca"
    |"Africa/Ceuta"
    |"Africa/Conakry"
    |"Africa/Dakar"
    |"Africa/Dar_es_Salaam"
    |"Africa/Djibouti"
    |"Africa/Douala"
    |"Africa/El_Aaiun"
    |"Africa/Freetown"
    |"Africa/Gaborone"
    |"Africa/Harare"
    |"Africa/Johannesburg"
    |"Africa/Juba"
    |"Africa/Kampala"
    |"Africa/Khartoum"
    |"Africa/Kigali"
    |"Africa/Kinshasa"
    |"Africa/Lagos"
    |"Africa/Libreville"
    |"Africa/Lome"
    |"Africa/Luanda"
    |"Africa/Lubumbashi"
    |"Africa/Lusaka"
    |"Africa/Malabo"
    |"Africa/Maputo"
    |"Africa/Maseru"
    |"Africa/Mbabane"
    |"Africa/Mogadishu"
    |"Africa/Monrovia"
    |"Africa/Nairobi"
    |"Africa/Ndjamena"
    |"Africa/Niamey"
    |"Africa/Nouakchott"
    |"Africa/Ouagadougou"
    |"Africa/Porto-Novo"
    |"Africa/Sao_Tome"
    |"Africa/Timbuktu"
    |"Africa/Tripoli"
    |"Africa/Tunis"
    |"Africa/Windhoek"
    |"America/Adak"
    |"America/Anchorage"
    |"America/Anguilla"
    |"America/Antigua"
    |"America/Araguaina"
    |"America/Argentina/Buenos_Aires"
    |"America/Argentina/Catamarca"
    |"America/Argentina/ComodRivadavia"
    |"America/Argentina/Cordoba"
    |"America/Argentina/Jujuy"
    |"America/Argentina/La_Rioja"
    |"America/Argentina/Mendoza"
    |"America/Argentina/Rio_Gallegos"
    |"America/Argentina/Salta"
    |"America/Argentina/San_Juan"
    |"America/Argentina/San_Luis"
    |"America/Argentina/Tucuman"
    |"America/Argentina/Ushuaia"
    |"America/Aruba"
    |"America/Asuncion"
    |"America/Atikokan"
    |"America/Atka"
    |"America/Bahia"
    |"America/Bahia_Banderas"
    |"America/Barbados"
    |"America/Belem"
    |"America/Belize"
    |"America/Blanc-Sablon"
    |"America/Boa_Vista"
    |"America/Bogota"
    |"America/Boise"
    |"America/Buenos_Aires"
    |"America/Cambridge_Bay"
    |"America/Campo_Grande"
    |"America/Cancun"
    |"America/Caracas"
    |"America/Catamarca"
    |"America/Cayenne"
    |"America/Cayman"
    |"America/Chicago"
    |"America/Chihuahua"
    |"America/Coral_Harbour"
    |"America/Cordoba"
    |"America/Costa_Rica"
    |"America/Creston"
    |"America/Cuiaba"
    |"America/Curacao"
    |"America/Danmarkshavn"
    |"America/Dawson"
    |"America/Dawson_Creek"
    |"America/Denver"
    |"America/Detroit"
    |"America/Dominica"
    |"America/Edmonton"
    |"America/Eirunepe"
    |"America/El_Salvador"
    |"America/Ensenada"
    |"America/Fort_Nelson"
    |"America/Fort_Wayne"
    |"America/Fortaleza"
    |"America/Glace_Bay"
    |"America/Godthab"
    |"America/Goose_Bay"
    |"America/Grand_Turk"
    |"America/Grenada"
    |"America/Guadeloupe"
    |"America/Guatemala"
    |"America/Guayaquil"
    |"America/Guyana"
    |"America/Halifax"
    |"America/Havana"
    |"America/Hermosillo"
    |"America/Indiana/Indianapolis"
    |"America/Indiana/Knox"
    |"America/Indiana/Marengo"
    |"America/Indiana/Petersburg"
    |"America/Indiana/Tell_City"
    |"America/Indiana/Vevay"
    |"America/Indiana/Vincennes"
    |"America/Indiana/Winamac"
    |"America/Indianapolis"
    |"America/Inuvik"
    |"America/Iqaluit"
    |"America/Jamaica"
    |"America/Jujuy"
    |"America/Juneau"
    |"America/Kentucky/Louisville"
    |"America/Kentucky/Monticello"
    |"America/Knox_IN"
    |"America/Kralendijk"
    |"America/La_Paz"
    |"America/Lima"
    |"America/Los_Angeles"
    |"America/Louisville"
    |"America/Lower_Princes"
    |"America/Maceio"
    |"America/Managua"
    |"America/Manaus"
    |"America/Marigot"
    |"America/Martinique"
    |"America/Matamoros"
    |"America/Mazatlan"
    |"America/Mendoza"
    |"America/Menominee"
    |"America/Merida"
    |"America/Metlakatla"
    |"America/Mexico_City"
    |"America/Miquelon"
    |"America/Moncton"
    |"America/Monterrey"
    |"America/Montevideo"
    |"America/Montreal"
    |"America/Montserrat"
    |"America/Nassau"
    |"America/New_York"
    |"America/Nipigon"
    |"America/Nome"
    |"America/Noronha"
    |"America/North_Dakota/Beulah"
    |"America/North_Dakota/Center"
    |"America/North_Dakota/New_Salem"
    |"America/Ojinaga"
    |"America/Panama"
    |"America/Pangnirtung"
    |"America/Paramaribo"
    |"America/Phoenix"
    |"America/Port-au-Prince"
    |"America/Port_of_Spain"
    |"America/Porto_Acre"
    |"America/Porto_Velho"
    |"America/Puerto_Rico"
    |"America/Punta_Arenas"
    |"America/Rainy_River"
    |"America/Rankin_Inlet"
    |"America/Recife"
    |"America/Regina"
    |"America/Resolute"
    |"America/Rio_Branco"
    |"America/Rosario"
    |"America/Santa_Isabel"
    |"America/Santarem"
    |"America/Santiago"
    |"America/Santo_Domingo"
    |"America/Sao_Paulo"
    |"America/Scoresbysund"
    |"America/Shiprock"
    |"America/Sitka"
    |"America/St_Barthelemy"
    |"America/St_Johns"
    |"America/St_Kitts"
    |"America/St_Lucia"
    |"America/St_Thomas"
    |"America/St_Vincent"
    |"America/Swift_Current"
    |"America/Tegucigalpa"
    |"America/Thule"
    |"America/Thunder_Bay"
    |"America/Tijuana"
    |"America/Toronto"
    |"America/Tortola"
    |"America/Vancouver"
    |"America/Virgin"
    |"America/Whitehorse"
    |"America/Winnipeg"
    |"America/Yakutat"
    |"America/Yellowknife"
    |"Antarctica/Casey"
    |"Antarctica/Davis"
    |"Antarctica/DumontDUrville"
    |"Antarctica/Macquarie"
    |"Antarctica/Mawson"
    |"Antarctica/McMurdo"
    |"Antarctica/Palmer"
    |"Antarctica/Rothera"
    |"Antarctica/South_Pole"
    |"Antarctica/Syowa"
    |"Antarctica/Troll"
    |"Antarctica/Vostok"
    |"Arctic/Longyearbyen"
    |"Asia/Aden"
    |"Asia/Almaty"
    |"Asia/Amman"
    |"Asia/Anadyr"
    |"Asia/Aqtau"
    |"Asia/Aqtobe"
    |"Asia/Ashgabat"
    |"Asia/Ashkhabad"
    |"Asia/Atyrau"
    |"Asia/Baghdad"
    |"Asia/Bahrain"
    |"Asia/Baku"
    |"Asia/Bangkok"
    |"Asia/Barnaul"
    |"Asia/Beirut"
    |"Asia/Bishkek"
    |"Asia/Brunei"
    |"Asia/Calcutta"
    |"Asia/Chita"
    |"Asia/Choibalsan"
    |"Asia/Chongqing"
    |"Asia/Chungking"
    |"Asia/Colombo"
    |"Asia/Dacca"
    |"Asia/Damascus"
    |"Asia/Dhaka"
    |"Asia/Dili"
    |"Asia/Dubai"
    |"Asia/Dushanbe"
    |"Asia/Famagusta"
    |"Asia/Gaza"
    |"Asia/Harbin"
    |"Asia/Hebron"
    |"Asia/Ho_Chi_Minh"
    |"Asia/Hong_Kong"
    |"Asia/Hovd"
    |"Asia/Irkutsk"
    |"Asia/Istanbul"
    |"Asia/Jakarta"
    |"Asia/Jayapura"
    |"Asia/Jerusalem"
    |"Asia/Kabul"
    |"Asia/Kamchatka"
    |"Asia/Karachi"
    |"Asia/Kashgar"
    |"Asia/Kathmandu"
    |"Asia/Katmandu"
    |"Asia/Khandyga"
    |"Asia/Kolkata"
    |"Asia/Krasnoyarsk"
    |"Asia/Kuala_Lumpur"
    |"Asia/Kuching"
    |"Asia/Kuwait"
    |"Asia/Macao"
    |"Asia/Macau"
    |"Asia/Magadan"
    |"Asia/Makassar"
    |"Asia/Manila"
    |"Asia/Muscat"
    |"Asia/Nicosia"
    |"Asia/Novokuznetsk"
    |"Asia/Novosibirsk"
    |"Asia/Omsk"
    |"Asia/Oral"
    |"Asia/Phnom_Penh"
    |"Asia/Pontianak"
    |"Asia/Pyongyang"
    |"Asia/Qatar"
    |"Asia/Qyzylorda"
    |"Asia/Rangoon"
    |"Asia/Riyadh"
    |"Asia/Saigon"
    |"Asia/Sakhalin"
    |"Asia/Samarkand"
    |"Asia/Seoul"
    |"Asia/Shanghai"
    |"Asia/Singapore"
    |"Asia/Srednekolymsk"
    |"Asia/Taipei"
    |"Asia/Tashkent"
    |"Asia/Tbilisi"
    |"Asia/Tehran"
    |"Asia/Tel_Aviv"
    |"Asia/Thimbu"
    |"Asia/Thimphu"
    |"Asia/Tokyo"
    |"Asia/Tomsk"
    |"Asia/Ujung_Pandang"
    |"Asia/Ulaanbaatar"
    |"Asia/Ulan_Bator"
    |"Asia/Urumqi"
    |"Asia/Ust-Nera"
    |"Asia/Vientiane"
    |"Asia/Vladivostok"
    |"Asia/Yakutsk"
    |"Asia/Yangon"
    |"Asia/Yekaterinburg"
    |"Asia/Yerevan"
    |"Atlantic/Azores"
    |"Atlantic/Bermuda"
    |"Atlantic/Canary"
    |"Atlantic/Cape_Verde"
    |"Atlantic/Faeroe"
    |"Atlantic/Faroe"
    |"Atlantic/Jan_Mayen"
    |"Atlantic/Madeira"
    |"Atlantic/Reykjavik"
    |"Atlantic/South_Georgia"
    |"Atlantic/St_Helena"
    |"Atlantic/Stanley"
    |"Australia/ACT"
    |"Australia/Adelaide"
    |"Australia/Brisbane"
    |"Australia/Broken_Hill"
    |"Australia/Canberra"
    |"Australia/Currie"
    |"Australia/Darwin"
    |"Australia/Eucla"
    |"Australia/Hobart"
    |"Australia/LHI"
    |"Australia/Lindeman"
    |"Australia/Lord_Howe"
    |"Australia/Melbourne"
    |"Australia/NSW"
    |"Australia/North"
    |"Australia/Perth"
    |"Australia/Queensland"
    |"Australia/South"
    |"Australia/Sydney"
    |"Australia/Tasmania"
    |"Australia/Victoria"
    |"Australia/West"
    |"Australia/Yancowinna"
    |"Brazil/Acre"
    |"Brazil/DeNoronha"
    |"Brazil/East"
    |"Brazil/West"
    |"CET"
    |"CST6CDT"
    |"Canada/Atlantic"
    |"Canada/Central"
    |"Canada/Eastern"
    |"Canada/Mountain"
    |"Canada/Newfoundland"
    |"Canada/Pacific"
    |"Canada/Saskatchewan"
    |"Canada/Yukon"
    |"Chile/Continental"
    |"Chile/EasterIsland"
    |"Cuba"
    |"EET"
    |"EST"
    |"EST5EDT"
    |"Egypt"
    |"Eire"
    |"Etc/GMT"
    |"Etc/GMT+0"
    |"Etc/GMT+1"
    |"Etc/GMT+10"
    |"Etc/GMT+11"
    |"Etc/GMT+12"
    |"Etc/GMT+2"
    |"Etc/GMT+3"
    |"Etc/GMT+4"
    |"Etc/GMT+5"
    |"Etc/GMT+6"
    |"Etc/GMT+7"
    |"Etc/GMT+8"
    |"Etc/GMT+9"
    |"Etc/GMT-0"
    |"Etc/GMT-1"
    |"Etc/GMT-10"
    |"Etc/GMT-11"
    |"Etc/GMT-12"
    |"Etc/GMT-13"
    |"Etc/GMT-14"
    |"Etc/GMT-2"
    |"Etc/GMT-3"
    |"Etc/GMT-4"
    |"Etc/GMT-5"
    |"Etc/GMT-6"
    |"Etc/GMT-7"
    |"Etc/GMT-8"
    |"Etc/GMT-9"
    |"Etc/GMT0"
    |"Etc/Greenwich"
    |"Etc/UCT"
    |"Etc/UTC"
    |"Etc/Universal"
    |"Etc/Zulu"
    |"Europe/Amsterdam"
    |"Europe/Andorra"
    |"Europe/Astrakhan"
    |"Europe/Athens"
    |"Europe/Belfast"
    |"Europe/Belgrade"
    |"Europe/Berlin"
    |"Europe/Bratislava"
    |"Europe/Brussels"
    |"Europe/Bucharest"
    |"Europe/Budapest"
    |"Europe/Busingen"
    |"Europe/Chisinau"
    |"Europe/Copenhagen"
    |"Europe/Dublin"
    |"Europe/Gibraltar"
    |"Europe/Guernsey"
    |"Europe/Helsinki"
    |"Europe/Isle_of_Man"
    |"Europe/Istanbul"
    |"Europe/Jersey"
    |"Europe/Kaliningrad"
    |"Europe/Kiev"
    |"Europe/Kirov"
    |"Europe/Lisbon"
    |"Europe/Ljubljana"
    |"Europe/London"
    |"Europe/Luxembourg"
    |"Europe/Madrid"
    |"Europe/Malta"
    |"Europe/Mariehamn"
    |"Europe/Minsk"
    |"Europe/Monaco"
    |"Europe/Moscow"
    |"Europe/Nicosia"
    |"Europe/Oslo"
    |"Europe/Paris"
    |"Europe/Podgorica"
    |"Europe/Prague"
    |"Europe/Riga"
    |"Europe/Rome"
    |"Europe/Samara"
    |"Europe/San_Marino"
    |"Europe/Sarajevo"
    |"Europe/Saratov"
    |"Europe/Simferopol"
    |"Europe/Skopje"
    |"Europe/Sofia"
    |"Europe/Stockholm"
    |"Europe/Tallinn"
    |"Europe/Tirane"
    |"Europe/Tiraspol"
    |"Europe/Ulyanovsk"
    |"Europe/Uzhgorod"
    |"Europe/Vaduz"
    |"Europe/Vatican"
    |"Europe/Vienna"
    |"Europe/Vilnius"
    |"Europe/Volgograd"
    |"Europe/Warsaw"
    |"Europe/Zagreb"
    |"Europe/Zaporozhye"
    |"Europe/Zurich"
    |"GB"
    |"GB-Eire"
    |"GMT"
    |"GMT+0"
    |"GMT-0"
    |"GMT0"
    |"Greenwich"
    |"HST"
    |"Hongkong"
    |"Iceland"
    |"Indian/Antananarivo"
    |"Indian/Chagos"
    |"Indian/Christmas"
    |"Indian/Cocos"
    |"Indian/Comoro"
    |"Indian/Kerguelen"
    |"Indian/Mahe"
    |"Indian/Maldives"
    |"Indian/Mauritius"
    |"Indian/Mayotte"
    |"Indian/Reunion"
    |"Iran"
    |"Israel"
    |"Jamaica"
    |"Japan"
    |"Kwajalein"
    |"Libya"
    |"MET"
    |"MST"
    |"MST7MDT"
    |"Mexico/BajaNorte"
    |"Mexico/BajaSur"
    |"Mexico/General"
    |"NZ"
    |"NZ-CHAT"
    |"Navajo"
    |"PRC"
    |"PST8PDT"
    |"Pacific/Apia"
    |"Pacific/Auckland"
    |"Pacific/Bougainville"
    |"Pacific/Chatham"
    |"Pacific/Chuuk"
    |"Pacific/Easter"
    |"Pacific/Efate"
    |"Pacific/Enderbury"
    |"Pacific/Fakaofo"
    |"Pacific/Fiji"
    |"Pacific/Funafuti"
    |"Pacific/Galapagos"
    |"Pacific/Gambier"
    |"Pacific/Guadalcanal"
    |"Pacific/Guam"
    |"Pacific/Honolulu"
    |"Pacific/Johnston"
    |"Pacific/Kiritimati"
    |"Pacific/Kosrae"
    |"Pacific/Kwajalein"
    |"Pacific/Majuro"
    |"Pacific/Marquesas"
    |"Pacific/Midway"
    |"Pacific/Nauru"
    |"Pacific/Niue"
    |"Pacific/Norfolk"
    |"Pacific/Noumea"
    |"Pacific/Pago_Pago"
    |"Pacific/Palau"
    |"Pacific/Pitcairn"
    |"Pacific/Pohnpei"
    |"Pacific/Ponape"
    |"Pacific/Port_Moresby"
    |"Pacific/Rarotonga"
    |"Pacific/Saipan"
    |"Pacific/Samoa"
    |"Pacific/Tahiti"
    |"Pacific/Tarawa"
    |"Pacific/Tongatapu"
    |"Pacific/Truk"
    |"Pacific/Wake"
    |"Pacific/Wallis"
    |"Pacific/Yap"
    |"Poland"
    |"Portugal"
    |"ROC"
    |"ROK"
    |"Singapore"
    |"Turkey"
    |"UCT"
    |"US/Alaska"
    |"US/Aleutian"
    |"US/Arizona"
    |"US/Central"
    |"US/East-Indiana"
    |"US/Eastern"
    |"US/Hawaii"
    |"US/Indiana-Starke"
    |"US/Michigan"
    |"US/Mountain"
    |"US/Pacific"
    |"US/Pacific-New"
    |"US/Samoa"
    |"UTC"
    |"Universal"
    |"W-SU"
    |"WET"
    |"Zulu")?

  /// "metric" for Metric, "imperial" for Imperial. This also sets temperature unit Home Assistant will
  /// use. https://www.home-assistant.io/docs/configuration/basic/#unit_system
  unit_system: ("imperial"|"metric")?

  /// Override temperature unit set by unit_system. "C" for Celsius, "F" for Fahrenheit.
  /// https://www.home-assistant.io/docs/configuration/basic/#temperature_unit
  temperature_unit: ("C"|"F")?
}

class HomeAssistantAuthProvider {
  type: "homeassistant"
}

class TrustedNetworksAuthProvider {
  type: "trusted_networks"

  trusted_networks: Listing<Any>|Listing<String>|String

  trusted_users: Mapping<String, Listing<Mapping<String, String>|String>|String>?

  allow_bypass_login: Boolean?
}

class CommandLineAuthProvider {
  type: "command_line"

  command: String

  args: Any?

  meta: Boolean?
}

class LegacyApiPasswordAuthProvider {
  type: "legacy_api_password"

  api_password: String
}

class CoreCustomizeItem {
  /// For switches with an assumed state two buttons are shown (turn off, turn on) instead of a switch.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#assumed_state
  assumed_state: Boolean?

  /// Sets the class of the device, changing the device state and icon that is displayed on the UI (see
  /// below). Please note: It does not set the unit_of_measurement.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#device_class
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"awning"
    |"battery"
    |"battery_charging"
    |"blind"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"cold"
    |"conductivity"
    |"connectivity"
    |"current"
    |"curtain"
    |"damper"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"door"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"garage"
    |"garage_door"
    |"gas"
    |"gate"
    |"heat"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"light"
    |"lock"
    |"moisture"
    |"monetary"
    |"motion"
    |"moving"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"occupancy"
    |"opening"
    |"outlet"
    |"ozone"
    |"ph"
    |"plug"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"presence"
    |"pressure"
    |"problem"
    |"reactive_power"
    |"receiver"
    |"running"
    |"safety"
    |"shade"
    |"shutter"
    |"signal_strength"
    |"smoke"
    |"sound"
    |"sound_pressure"
    |"speaker"
    |"speed"
    |"sulphur_dioxide"
    |"switch"
    |"tamper"
    |"temperature"
    |"timestamp"
    |"tv"
    |"update"
    |"vibration"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed"
    |"window")?

  /// URL to use as picture for entity.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#entity_picture
  entity_picture: String?

  /// Name of the entity as displayed in the UI. Please note that most of the time you can just rename
  /// the entity in the UI itself.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#friendly_name
  friendly_name: String?

  /// Any icon from MaterialDesignIcons.com. Prefix name with mdi:. For example: mdi:home. Please note
  /// that most of the time you can just change the entity icon in the UI itself.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#icon
  icon: String?

  /// Sets the initial state for automations, on (true) or off (false).
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#initial_state
  initial_state: Boolean?

  /// Defines the units of measurement, if any. This will also influence the graphical presentation in
  /// the history visualization as continuous value. Sensors with missing unit_of_measurement are showing
  /// as discrete values.
  /// https://www.home-assistant.io/docs/configuration/customizing-devices/#unit_of_measurement
  unit_of_measurement: String?
}

class ConfigurationRoot {
  /// Home Assistant Core configuration https://www.home-assistant.io/docs/configuration/basic
  homeassistant: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Schema)?

  /// Home Assistant can give you an interface which is similar to a classic alarm system.
  /// https://www.home-assistant.io/integrations/alarm_control_panel
  alarm_control_panel: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item>)?

  /// The alert integration is designed to notify you when problematic issues arise.
  /// https://www.home-assistant.io/integrations/alert
  alert: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema1
    |Any)?

  /// Automations offer the capability to call a service based on a simple or complex trigger. Automation
  /// allows a condition such as a sunset to cause an event, such as a light turning on.
  /// https://www.home-assistant.io/docs/automation/
  automation: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item2>)?

  /// Binary sensors gather information about the state of devices which have a “digital” return value
  /// (either 1 or 0). These can be switches, contacts, pins, etc.
  /// https://www.home-assistant.io/integrations/binary_sensor
  binary_sensor: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item3>)?

  /// Blueprints provide predefined templates for e.g., automations.
  /// https://www.home-assistant.io/integrations/blueprint
  blueprint: Any?

  /// The camera integration allows you to use IP cameras with Home Assistant.
  /// https://www.home-assistant.io/integrations/camera
  camera: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item4>)?

  /// The Climate integration allows you to control and monitor HVAC (heating, ventilating, and air
  /// conditioning) devices and thermostats. https://www.home-assistant.io/integrations/climate
  climate: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<OtherPlatform10>)?

  /// The conversation integration allows you to converse with Home Assistant.
  /// https://www.home-assistant.io/integrations/conversation
  conversation: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema2
    |Any)?

  /// The counter integration allows one to count occurrences fired by automations.
  /// https://www.home-assistant.io/integrations/counter
  counter: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema3
    |Any)?

  /// Home Assistant can give you an interface to control covers such as rollershutters, blinds, and
  /// garage doors. https://www.home-assistant.io/integrations/cover
  cover: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item6>)?

  /// This integration is a meta-component and configures a default set of integrations for Home
  /// Assistant to load. https://www.home-assistant.io/integrations/default_config
  default_config: Any?

  /// The device tracker allows you to track devices in Home Assistant. This can happen by querying your
  /// wireless router or by having applications push location info.
  /// https://www.home-assistant.io/integrations/device_tracker
  device_tracker: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<OtherPlatform10>)?

  /// The Fan integration allows you to control and monitor Fan devices.
  /// https://www.home-assistant.io/integrations/fan
  fan: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item7>)?

  /// Groups allows you to combine multiple entities into a single group entity.
  /// https://www.home-assistant.io/integrations/group
  group: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema4
    |Any)?

  /// The http integration serves all files and data required for the Home Assistant frontend. You only
  /// need to add this to your configuration file if you want to change any of the default settings.
  /// https://www.home-assistant.io/integrations/http
  http: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema5
    |Any)?

  /// The input_boolean integration allows the user to define boolean values that can be controlled via
  /// the frontend and can be used within conditions of automation. This can for example be used to
  /// disable or enable certain automations. https://www.home-assistant.io/integrations/input_boolean
  input_boolean: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema6
    |Any)?

  /// The Input Button helper integration allows you to define buttons that can be pressed via the user
  /// interface, and can be used to trigger things, like an automation.
  /// https://www.home-assistant.io/integrations/input_button
  input_button: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema7
    |Any)?

  /// The input_datetime integration allows the user to define date and time values that can be
  /// controlled via the frontend and can be used within automations and templates.
  /// https://www.home-assistant.io/integrations/input_datetime
  input_datetime: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema8
    |Any)?

  /// The input_number integration allows the user to define values that can be controlled via the
  /// frontend and can be used within conditions of automation. The frontend can display a slider, or a
  /// numeric input box. https://www.home-assistant.io/integrations/input_number
  input_number: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema9
    |Any)?

  /// The input_select integration allows the user to define a list of values that can be selected via
  /// the frontend and can be used within conditions of an automation.
  /// https://www.home-assistant.io/integrations/input_select
  input_select: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema10
    |Any)?

  /// The input_text integration allows the user to define values that can be controlled via the frontend
  /// and can be used within conditions of automation.
  /// https://www.home-assistant.io/integrations/input_text
  input_text: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema11
    |Any)?

  /// The intent script integration allows users to configure actions and responses to intents. Intents
  /// can be fired by any integration that supports it.
  intent_script: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema12
    |Any)?

  /// This integration allows you to track and control various light bulbs.
  /// https://www.home-assistant.io/integrations/light
  light: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item16>)?

  /// Keeps track which locks are in your environment, their state and allows you to control them.
  /// https://www.home-assistant.io/integrations/lock
  lock: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item17>)?

  /// Lovelace is the Home Assistant dashboard. It’s a fast, customizable and powerful way for users to
  /// manage their homes, working on mobile and desktop. https://www.home-assistant.io/lovelace
  lovelace: (Schema13|Any)?

  /// Modbus is a communication protocol to control PLCs (Programmable Logic Controller) and RTUs (Remote
  /// Terminal Unit). https://www.home-assistant.io/integrations/modbus/
  modbus: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Item18
    |Listing<Item18>)?

  /// Keeps track on number entities in your environment, their state, and allows you to control them.
  /// https://www.home-assistant.io/integrations/number
  number: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<OtherPlatform10>)?

  /// The panel_iframe support allows you to add additional panels to your Home Assistant frontend. The
  /// panels are listed in the sidebar and can contain external resources like the web frontend of your
  /// router, your monitoring system, or your media server.
  /// https://www.home-assistant.io/integrations/panel_iframe
  panel_iframe: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema14)?

  /// The script integration allows users to specify a sequence of actions to be executed by Home
  /// Assistant. These are run when you turn the script on. The script integration will create an entity
  /// for each script and allow them to be controlled via services.
  /// https://www.home-assistant.io/integrations/script
  script: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema15)?

  /// You can create scenes that capture the states you want certain entities to be. For example, a scene
  /// can specify that light A should be turned on and light B should be bright red.
  /// https://www.home-assistant.io/integrations/scene
  scene: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item20>)?

  /// Selects offers a limited set of selectable options for the entity state.
  /// https://www.home-assistant.io/integrations/select
  select: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<OtherPlatform10>)?

  /// Sensors are gathering information about states and conditions.
  /// https://www.home-assistant.io/integrations/sensor
  sensor: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item21>)?

  /// Keeps track which switches are in your environment, their state and allows you to control them.
  /// https://www.home-assistant.io/integrations/switch
  `switch`: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item22>)?

  /// The template integration allows creating entities which derive their values from other data.
  /// https://www.home-assistant.io/integrations/template
  template: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item23>)?

  /// The timer integration aims to simplify automations based on (dynamic) durations.
  /// https://www.home-assistant.io/integrations/timer/
  timer: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema16
    |Any)?

  /// The vacuum integration enables the ability to control home cleaning robots within Home Assistant.
  /// https://www.home-assistant.io/integrations/vacuum
  vacuum: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item25>)?

  /// The weather platforms gather meteorological information from web services and display the
  /// conditions and other details about the weather at the given location.
  /// https://www.home-assistant.io/integrations/weather
  weather: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<Item26>)?

  /// The Home Assistant Cloud allows you to quickly integrate your local Home Assistant with various
  /// cloud services like Amazon Alexa and Google Assistant. https://www.nabucasa.com/config/
  cloud: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema17
    |Any)?

  /// The Compensation integration consumes the state from other sensors. It exports the compensated
  /// value as state in a separate entity. https://www.home-assistant.io/integrations/compensation/
  compensation: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema18)?

  /// The KNX integration for Home Assistant allows you to connect to KNX/IP devices.
  /// https://www.home-assistant.io/integrations/knx
  knx: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema19)?

  /// MQTT (aka MQ Telemetry Transport) is a machine-to-machine or “Internet of Things” connectivity
  /// protocol on top of TCP/IP. It allows extremely lightweight publish/subscribe messaging transport.
  /// https://www.home-assistant.io/integrations/mqtt/
  mqtt: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Item28
    |Listing<Item28>)?

  /// The mqtt_eventstream integration connects two Home Assistant instances via MQTT.
  /// https://www.home-assistant.io/integrations/mqtt_eventstream
  mqtt_eventstream: (Schema20|Any)?

  /// The mqtt_statestream integration publishes state changes in Home Assistant to individual MQTT
  /// topics. https://www.home-assistant.io/integrations/mqtt_statestream
  mqtt_statestream: Schema21?

  /// Home Assistant Community Store https://hacs.xyz/
  hacs: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Schema22)?
}

class AlarmControlPanelPlatformSchema {
  /// The template integrations creates alarm control panels that combine integrations or adds
  /// pre-processing logic to actions.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/
  platform: "template"

  /// List of panels. https://www.home-assistant.io/integrations/alarm_control_panel.template/#panels
  panels: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |AlarmControlPanelPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class AlarmControlPanelPlatformItem {
  /// Defines an action to run when the alarm is armed to away mode.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#arm_away
  arm_away: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the alarm is armed to home mode.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#arm_home
  arm_home: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the alarm is armed to night mode.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#arm_night
  arm_night: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// If true, the code is required to arm the alarm.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#code_arm_required
  code_arm_required: Boolean?

  /// Format for the code used to arm/disarm the alarm.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#code_format
  code_format: ("no_code"|"number"|"text")?

  /// Defines an action to run when the alarm is disarmed.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#disarm
  disarm: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#name
  name: String?

  /// An ID that uniquely identifies this alarm control panel. Set this to an unique value to allow
  /// customization trough the UI.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#unique_id
  unique_id: String?

  /// Defines a template to set the state of the alarm panel. Only the states armed_away, armed_home,
  /// armed_night, disarmed, pending, triggered and unavailable are used.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.template/#value_template
  value_template: String?
}

class AndCondition {
  /// Alias for the and condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#and-condition
  condition: "and"

  /// Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#and-condition
  conditions: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>
}

class AndShorthandCondition {
  /// Alias for the and condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#and-condition
  and: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>
}

class DeviceCondition {
  /// Alias for the device condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Device conditions encompass a set of properties that are defined by an integration. In contrast to
  /// state conditions, device conditions are tied to a device and not necessarily an entity. To use a
  /// device trigger, set up an automation through the browser frontend.
  condition: "device"?

  /// The internal ID of the device to preform a conditional test on.
  device_id: String

  /// The integration domain this device condition is provided by.
  domain: String
}

class NotCondition {
  /// Alias for the not condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Test multiple conditions in one condition statement. Passes if all embedded conditions are not
  /// valid. https://www.home-assistant.io/docs/scripts/conditions/#not-condition
  condition: "not"

  /// Test multiple conditions in one condition statement. Passes if all embedded conditions are not
  /// valid. https://www.home-assistant.io/docs/scripts/conditions/#not-condition
  conditions: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>
}

class NotShorthandCondition {
  /// Alias for the not condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Test multiple conditions in one condition statement. Passes if all embedded conditions are not
  /// valid. https://www.home-assistant.io/docs/scripts/conditions/#not-condition
  not: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>
}

class NumericStateCondition {
  /// Alias for the numeric state condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// This type of condition attempts to parse the state of the specified entity as a number, and
  /// triggers if the value matches the thresholds.
  /// https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
  condition: "numeric_state"

  /// Passes if the numeric state of the given entity (or entities) is above the given threshold.
  /// https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
  above: (
    String(matches(Regex(#"^input_number\..*$"#)))
    |String(matches(Regex(#"^number\..*$"#)))
    |String(matches(Regex(#"^sensor\..*$"#)))
    |Number)?

  /// Passes if the numeric state of the given entity (or entities) is below the given threshold.
  /// https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
  below: (
    String(matches(Regex(#"^input_number\..*$"#)))
    |String(matches(Regex(#"^number\..*$"#)))
    |String(matches(Regex(#"^sensor\..*$"#)))
    |Number)?

  /// The entity ID or list of entity IDs to test the numeric state against.
  /// https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
  entity_id: Entities

  /// An optional value template to use as the numeric state value.
  /// https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
  value_template: String?

  /// Use the value of a specific entity attribute to test against, instead of the entity state.
  /// https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
  attribute: String?
}

class OrCondition {
  /// Alias for the or condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Test multiple conditions in one condition statement. Passes if any embedded condition is valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#or-condition
  condition: "or"

  /// Test multiple conditions in one condition statement. Passes if any embedded condition is valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#or-condition
  conditions: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>
}

class OrShorthandCondition {
  /// Alias for the or condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Test multiple conditions in one condition statement. Passes if any embedded condition is valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#or-condition
  or: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>
}

class ShorthandCondition {
  /// Alias for the and condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// The template condition has a shorthand notation that can be used to make your scripts and
  /// automations shorter.
  /// https://www.home-assistant.io/docs/scripts/conditions/#template-condition-shorthand-notation
  condition: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
}

class StateCondition {
  /// Alias for the state condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// Tests if an entity (or entities) is in a specified state.
  /// https://www.home-assistant.io/docs/scripts/conditions/#state-condition
  condition: "state"

  /// The entity ID or list of entity IDs to test the state against.
  /// https://www.home-assistant.io/docs/scripts/conditions/#state-condition
  entity_id: Entities

  /// The state the entity (or entities) must have for this condition to pass.
  /// https://www.home-assistant.io/docs/scripts/conditions/#state-condition
  state: Listing<StateState>|StateState

  /// The amount of time the entity (or entities) state must be held until this condition passes.
  /// https://www.home-assistant.io/docs/scripts/conditions/#state-condition
  `for`: (TimePeriodMap|String|Number)?

  /// Use the value of a specific entity attribute to test against, instead of the entity state.
  /// https://www.home-assistant.io/docs/scripts/conditions/#state-condition
  attribute: String?

  /// How to match in case this condition has multiple entity listed: "all" all entities have to match
  /// the state, "any" if any of the entities match the state.
  /// https://www.home-assistant.io/docs/scripts/conditions/#state-condition
  match: ("all"|"any")?
}

class TimePeriodMap {
  /// Number of days. This must be a number.
  days: (String|Number)?

  /// Number of hours. This must be a number.
  hours: (String|Number)?

  /// Number of milliseconds. This must be a number.
  milliseconds: (String|Number)?

  /// Number of minutes. This must be a number.
  minutes: (String|Number)?

  /// Number of seconds. This must be a number.
  seconds: (String|Number)?
}

class SunCondition {
  /// Alias for the sun condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// The sun state can be used to test if the sun has set or risen.
  /// https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
  condition: "sun"

  /// Conditionally test if is currently is before sunrise or sunset. Note that if only before key is
  /// used, the condition will be true from midnight until sunrise/sunset.
  /// https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
  before: ("sunrise"|"sunset")?

  /// Optional offset from the sunrise or sunset. For example "-00:45:00" will conditionally test 45
  /// minutes before sunrise or sunset.
  /// https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
  before_offset: (TimePeriodMap|String|Number)?

  /// Conditionally test if is currently is after sunrise or sunset. Note that if only after key is used,
  /// the condition will be true from sunset/sunrise until midnight.
  /// https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
  after: ("sunrise"|"sunset")?

  /// Optional offset from the sunrise or sunset. For example "-00:45:00" will conditionally test 45
  /// minutes before sunrise or sunset.
  /// https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
  after_offset: (TimePeriodMap|String|Number)?
}

class TemplateCondition {
  /// Alias for the template condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// The template condition tests if the given template renders a value equal to true. This is achieved
  /// by having the template result in a true boolean expression or by having the template render ‘true’.
  /// https://www.home-assistant.io/docs/scripts/conditions/#template-condition
  condition: "template"

  /// The template to render for this condition. The condition will pass if the result is true.
  /// https://www.home-assistant.io/docs/scripts/conditions/#template-condition
  value_template: String?
}

class TimeCondition {
  /// Alias for the time condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// The time condition can test if it is after a specified time, before a specified time or if it is a
  /// certain day of the week. https://www.home-assistant.io/docs/scripts/conditions/#time-condition
  condition: "time"

  /// Conditionally check if it is currently before a certain time of day. Note that if only before key
  /// is used, the condition will be true from midnight until the specified time.
  /// https://www.home-assistant.io/docs/scripts/conditions/#time-condition
  before: (
    String(matches(Regex(#"^input_datetime\..*$"#)))
    |String(matches(Regex(#"^sensor\..*$"#)))
    |String(matches(Regex("^[0-9]*:[0-9]*:[0-9]*$"))))?

  /// Conditionally check if it is currently after a certain time of day. Note that if only after key is
  /// used, the condition will be true from the specified time until midnight.
  /// https://www.home-assistant.io/docs/scripts/conditions/#time-condition
  after: (
    String(matches(Regex(#"^input_datetime\..*$"#)))
    |String(matches(Regex(#"^sensor\..*$"#)))
    |String(matches(Regex("^[0-9]*:[0-9]*:[0-9]*$"))))?

  /// Days of the week this condition can be valid.
  /// https://www.home-assistant.io/docs/scripts/conditions/#time-condition
  weekday: (Listing<Weekday>|Weekday)?
}

class TriggerCondition {
  /// Alias for the trigger condition.
  alias: String?

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// The trigger condition can test if this automation was triggered by a specific trigger.
  /// https://www.home-assistant.io/docs/scripts/conditions/#trigger-condition
  condition: "trigger"

  /// The ID (or IDs) of the triggers to test against if they have triggered this automation.
  /// https://www.home-assistant.io/docs/scripts/conditions/#trigger-condition
  id: Listing<String>|Listing<Number>|String|Number
}

class ZoneCondition {
  /// Alias for the zone condition.
  alias: String?

  condition: "zone"

  /// Every individual condition can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
  enabled: Boolean?

  /// The entity ID(s) of the device tracker(s).
  /// https://www.home-assistant.io/docs/scripts/conditions/#zone-condition
  entity_id: 
    String(matches(Regex(#"^device_tracker\..*$"#)))
    |Listing<String(matches(Regex(#"^device_tracker\..*$"#)))>
    |String(matches(Regex(#"^person\..*$"#)))
    |Listing<String(matches(Regex(#"^person\..*$"#)))>

  /// The zone(s) conditionally check against for the given device tracker(s).
  /// https://www.home-assistant.io/docs/scripts/conditions/#zone-condition
  zone: ZoneEntities
}

class ChooseAction {
  /// Alias for the choose action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// This action allows you to select a sequence of other actions from a list of sequences.
  /// https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
  choose: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |ChooseActionItem
    |Listing<ChooseActionItem>

  /// An optional default sequence can be included which will be run if none of the sequences from the
  /// list are run. https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
  default: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?
}

class ChooseActionItem {
  /// Alias for this choose item.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Only preform the sequence of actions if this condition/these conditions match.
  /// https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
  conditions: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>

  /// The sequence of actions to be performed if the condition(s) match.
  /// https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
  sequence: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>
}

class DelayAction {
  /// Alias for the delay action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// Delays are useful for temporarily suspending your script and start it at a later moment. The time
  /// period to delay the executing of the current action sequence for.
  /// https://www.home-assistant.io/docs/scripts/#delay
  delay: TimePeriod
}

class DeviceAction {
  /// Alias for the device action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// The internal ID of the device to execute an action on. Device actions encompass a set of events
  /// that are defined by an integration. In contrast to service calls, device actions are tied to a
  /// device and not necessarily an entity. To use a device action, set up an automation through the
  /// browser frontend.
  device_id: String

  /// The integration domain this device trigger is provided by.
  domain: String
}

class EventAction {
  /// Alias for the Event action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// The event name to fire. This action allows you to fire an event. Events can be used for many
  /// things. It could trigger an automation or indicate to another integration that something is
  /// happening. https://www.home-assistant.io/docs/scripts/#fire-an-event
  event: String

  /// The event data to pass along. https://www.home-assistant.io/docs/scripts/#fire-an-event
  event_data: Data?

  /// You can use templates directly in the event_data parameter, replace "event_data_template" with just
  /// "event_data". https://www.home-assistant.io/docs/scripts/#fire-an-event
  event_data_template: Listing<Any>?
}

class IfAction {
  /// Alias for the if action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// This action allows you to select a sequence of other actions from a list of sequences.
  /// https://www.home-assistant.io/docs/scripts/#if-then
  `if`: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>

  /// An optional default sequence can be included which will be run if none of the sequences from the
  /// list are run. https://www.home-assistant.io/docs/scripts/#if-then
  then: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// An optional default sequence can be included which will be run if none of the sequences from the
  /// list are run. https://www.home-assistant.io/docs/scripts/#if-then
  `else`: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?
}

class ParallelAction {
  /// Alias for the parallel action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// The sequence of actions to run in parallel.
  /// https://www.home-assistant.io/docs/scripts/#parallelizing-actions
  parallel: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |Listing<
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>>
}

class RepeatAction {
  /// Alias for the repeat action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// This action allows you to repeat a sequence of other actions.
  /// https://www.home-assistant.io/docs/scripts/#repeat-a-group-of-actions
  repeat: Repeat
}

/// This action allows you to repeat a sequence of other actions.
/// https://www.home-assistant.io/docs/scripts/#repeat-a-group-of-actions
class Repeat {
  /// This form accepts a count value. The value may be specified by a template, in which case the
  /// template is rendered when the repeat step is reached.
  /// https://www.home-assistant.io/docs/scripts/#counted-repeat
  count: (String|Number)?

  /// This repeat form accepts a list of items to iterate over. The list of items can be a pre-defined
  /// list, or a list created by a template. https://www.home-assistant.io/docs/scripts/#for-each
  for_each: (Listing<String>|Listing<Data>|String)?

  /// The sequence of actions to be repeatedly performed in the script.
  /// https://www.home-assistant.io/integrations/script/#sequence
  sequence: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// This form accepts a list of conditions that are evaluated after each time the sequence is run.
  /// Therefore the sequence will always run at least once. The sequence will be executed until the
  /// condition(s) evaluate to true. https://www.home-assistant.io/docs/scripts/#repeat-until
  until: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?

  /// This form accepts a list of conditions that are evaluated before each time the sequence is run. The
  /// sequence will be repeated as long as the condition(s) evaluate to true.
  /// https://www.home-assistant.io/docs/scripts/#while-loop
  while: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?
}

class SceneAction {
  /// Alias for the scene action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// Activate a scene. https://www.home-assistant.io/docs/scripts/#activate-a-scene
  scene: String(matches(Regex(#"^scene\..*$"#)))

  /// Additional data for merely for use with the frontend. Has no functional effect.
  metadata: Any?
}

class ServiceAction {
  /// Service call alias. https://www.home-assistant.io/docs/scripts/service-calls/
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// Legacy syntax, use "action" instead.
  service: Listing<Any>?

  /// The most important action is to call an action.
  /// https://www.home-assistant.io/docs/scripts/service-calls/
  action: String?

  /// You can use templates directly in the service parameter, replace "service_template" with just
  /// "service".
  /// https://www.home-assistant.io/docs/scripts/service-calls/#use-templates-to-decide-which-service-to-call
  service_template: Listing<Any>?

  /// Specify other parameters beside the entity to target. For example, the light turn on service allows
  /// specifying the brightness.
  /// https://www.home-assistant.io/docs/scripts/service-calls/#passing-data-to-the-service-call
  data: (Data|String)?

  /// You can use templates directly in the data parameter, replace "data_template" with just "data".
  /// https://www.home-assistant.io/docs/scripts/service-calls/#use-templates-to-determine-the-attributes
  data_template: Listing<Any>?

  /// The entity (or entities) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  entity_id: (Listing<String(matches(Regex(#"^.*\..*$"#)))>|String?)?

  /// Defines the target (area(s), device(s) and entitie(s)) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  target: (TargetAlternate0|String)?

  /// Additional data for merely for use with the frontend. Has no functional effect.
  metadata: Any?

  /// Add a response_variable to pass a variable of key/value pairs back to an automation or script.
  /// https://www.home-assistant.io/docs/scripts/service-calls/#use-templates-to-handle-response-data
  response_variable: String?
}

class TargetAlternate0 {
  /// The entity (or entities) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  entity_id: (Listing<String(matches(Regex(#"^.*\..*$"#)))>|String?)?

  /// The device (or devices) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  device_id: (Listing<String>|String)?

  /// The area (or areas) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  area_id: (Listing<String>|String)?

  /// The floor (or floors) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  floor_id: (Listing<String>|String)?

  /// The labels (or labels) to execute this service call on.
  /// https://www.home-assistant.io/docs/scripts/service-calls
  label_id: (Listing<String>|String)?
}

class SequenceAction {
  /// Alias for the sequence action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// The sequence of actions to run in serial
  /// https://www.home-assistant.io/docs/scripts/#grouping-actions
  sequence: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>
}

class StopAction {
  /// Stop call alias. https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Stop a automation or script sequence. Provide a text with a reason for stopping.
  /// https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
  stop: String?

  /// Set to true, if we are stopping with an error / because of unexpected behavior
  /// https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
  error: Boolean?

  /// Add a response_variable to pass a variable of key/value pairs back to an automation or script
  /// https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
  response_variable: String?
}

class WaitForTriggerAction {
  /// Alias for the wait for trigger action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// The trigger to wait for, before continuing execution of the script.
  /// https://www.home-assistant.io/docs/scripts/#wait-for-trigger
  wait_for_trigger: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |WebOSTvTrigger
    |CalendarTrigger
    |ConversationTrigger
    |DeviceTrigger
    |EventTrigger
    |GeolocationTrigger
    |HomeAssistantTrigger
    |MqttTrigger
    |NumericStateTrigger
    |PersistentNotificationTrigger
    |StateTrigger
    |SunTrigger
    |TagTrigger
    |TemplateTrigger
    |TimeTrigger
    |TimePatternTrigger
    |WebhookTrigger
    |ZoneTrigger
    |Listing<Trigger>)?

  /// Set a timeout after which the script will continue its execution if the trigger has not occurred.
  /// https://www.home-assistant.io/docs/scripts/#wait-for-trigger
  timeout: (TimePeriodMap|String|Number)?

  /// Continue the execute of the action sequence on time out or not.
  /// https://www.home-assistant.io/docs/scripts/#wait-for-trigger
  continue_on_timeout: Boolean?
}

class WebOSTvTrigger {
  /// Trigger fires when WebOS integration attempts to turn on the TV.
  /// https://www.home-assistant.io/integrations/webostv/#configuration
  platform: "webostv.turn_on"

  /// The entity ID of the TV that wants to get turned on.
  /// https://www.home-assistant.io/integrations/webostv/#configuration
  entity_id: String?
}

class CalendarTrigger {
  /// Alias for the calendar trigger.
  alias: String?

  /// Calendar trigger fires when a Calendar event starts or ends.
  /// https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
  trigger: "calendar"?

  /// Legacy syntax, use "trigger: calendar" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// Trigger on start or end of the calendar event.
  /// https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
  event: ("end"|"start")?

  /// The entity ID to monitor the calendar events for.
  /// https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
  entity_id: String(matches(Regex(#"^calendar\..*$"#)))

  /// Optional time offset to fire a set time before or after event start/end.
  /// https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
  offset: (TimePeriodMap|String|Number)?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class ConversationTrigger {
  /// Alias for the conversation pattern trigger.
  alias: String?

  /// With the sentence trigger, you can match a sentence from a voice assistant.
  /// https://www.home-assistant.io/docs/automation/trigger/#sentence-trigger
  trigger: "conversation"?

  /// Legacy syntax, use "trigger: conversation" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// A sentence or a list of sentences for this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#sentence-trigger
  command: Listing<String>|String

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#sentence-trigger
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class DeviceTrigger {
  /// Alias for the device trigger.
  alias: String?

  /// Device triggers encompass a set of events that are defined by an integration. In contrast to state
  /// triggers, device triggers are tied to a device and not necessarily an entity. To use a device
  /// trigger, set up an automation through the browser frontend.
  /// https://www.home-assistant.io/docs/automation/trigger/#device-triggers
  trigger: "device"?

  /// Legacy syntax, use "trigger: device" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// The internal ID of the device to trigger on
  /// https://www.home-assistant.io/docs/automation/trigger/#device-triggers
  device_id: String

  /// The integration domain this device trigger is provided by.
  /// https://www.home-assistant.io/docs/automation/trigger/#device-triggers
  domain: String

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#device-triggers
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class EventTrigger {
  /// Alias for the event trigger.
  alias: String?

  /// Fires when an event is being received. Events are the raw building blocks of Home Assistant. You
  /// can match events on just the event name or also require specific event data to be present.
  /// https://www.home-assistant.io/docs/automation/trigger/#event-trigger
  trigger: "event"?

  /// Legacy syntax, use "trigger: event" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// Additional event context that has to match before triggering.
  /// https://www.home-assistant.io/docs/automation/trigger/#event-trigger
  context: Data?

  /// Additional event data that has to match before triggering.
  /// https://www.home-assistant.io/docs/automation/trigger/#event-trigger
  event_data: Data?

  /// The name of the event to listen for.
  /// https://www.home-assistant.io/docs/automation/trigger/#event-trigger
  event_type: Listing<String>|Listing<EventType>|String

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#event-trigger
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class GeolocationTrigger {
  /// Alias for the geolocation trigger.
  alias: String?

  /// Geolocation trigger fires when an entity is appearing in or disappearing from a zone.
  /// https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
  trigger: "geo_location"?

  /// Legacy syntax, use "trigger: geo_location" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// Trigger when the entity leaves or enters the zone defined.
  /// https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
  event: "enter"|"leave"

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
  id: String?

  /// The source is directly linked to one of the Geolocation platforms.
  /// https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
  source: String

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?

  /// The zone to trigger on when a entity is appearing in or disappearing from.
  /// https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
  zone: String(matches(Regex(#"^zone\..*$"#)))
}

class HomeAssistantTrigger {
  /// Alias for the home assistant trigger.
  alias: String?

  /// This trigger fires when Home Assistant has started up or going to shut down.
  /// https://www.home-assistant.io/docs/automation/trigger/#home-assistant-trigger
  trigger: "homeassistant"?

  /// Legacy syntax, use "trigger: homeassistant" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// Specified the event to listen to: Either the Home Assistant start or shutdown event.
  /// https://www.home-assistant.io/docs/automation/trigger/#home-assistant-trigger
  event: "shutdown"|"start"

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#home-assistant-trigger
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class MqttTrigger {
  /// Alias for the mqtt trigger.
  alias: String?

  /// Fires when a specific message is received on given MQTT topic
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  trigger: "mqtt"?

  /// Legacy syntax, use "trigger: mqtt" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// The default payload encoding is ‘utf-8’. For images and other byte payloads use encoding: '' to
  /// disable payload decoding completely.
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  encoding: String?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  id: String?

  /// The payload to match on before triggering.
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  payload: String?

  /// The matching QoS level of the state topic. Default is 0.
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  qos: Int(isBetween(0, 2))?

  /// The MQTT topic to subscribe and listen to.
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  topic: String

  /// Value template allows, for example, picking out a JSON key from the incoming MQTT message.
  /// https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
  value_template: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class NumericStateTrigger {
  /// Alias for the numeric state trigger.
  alias: String?

  /// Fires when numeric value of an entity’s state crosses a given threshold.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  trigger: "numeric_state"?

  /// Legacy syntax, use "trigger: numeric_state" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// The entity ID or list of entity IDs to monitor the numeric state for.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  entity_id: Entities

  /// Fire this trigger if the numeric state of the monitored entity (or entities) is changing from above
  /// to below the given threshold.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  below: (
    String(matches(Regex(#"^input_number\..*$"#)))
    |String(matches(Regex(#"^number\..*$"#)))
    |String(matches(Regex(#"^sensor\..*$"#)))
    |Number)?

  /// Fire this trigger if the numeric state of the monitored entity (or entities) is changing from below
  /// to above the given threshold.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  above: (
    String(matches(Regex(#"^input_number\..*$"#)))
    |String(matches(Regex(#"^number\..*$"#)))
    |String(matches(Regex(#"^sensor\..*$"#)))
    |Number)?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  id: String?

  /// An optional value template to use as the numeric state value.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  value_template: String?

  /// The amount of time this threshold must be held until this trigger fires.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  `for`: (TimePeriodMap|String|Number)?

  /// Use the value of a specific entity attribute to trigger on, instead of the entity state.
  /// https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
  attribute: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class PersistentNotificationTrigger {
  /// Alias for the persistent notification trigger.
  alias: String?

  /// Persistent notification triggers are fired when a persistent_notification is added or removed that
  /// matches the configuration options.
  /// https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
  trigger: "persistent_notification"?

  /// Legacy syntax, use "trigger: persistent_notification" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
  id: String?

  /// Define the type of persistent notification to trigger on.
  /// https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
  update_type: Listing<PersistentNotificationUpdateType>?

  /// The notification ID to trigger on.
  /// https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
  notification_id: String?
}

class StateTrigger {
  /// Alias for the state trigger.
  alias: String?

  /// This trigger fires when the state of any of given entities changes.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  trigger: "state"?

  /// Legacy syntax, use "trigger: state" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// The entity ID or list of entity IDs to monitor the state for.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  entity_id: Entities

  /// The amount of time the entity or entities state must be held until this trigger fires.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  `for`: (TimePeriodMap|String|Number)?

  /// The state the entity or entities had before changing to its new state.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  from: Any?

  /// The state the entity or entities NOT had before changing to its new state.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  not_from: Any?

  /// The state the entity or entities have changed to.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  to: Any?

  /// The state the entity or entities did NOT changed to.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  not_to: Any?

  /// Use the value of a specific entity attribute to trigger on, instead of the entity state.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  attribute: String?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#state-trigger
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class SunTrigger {
  /// Alias for the sun trigger.
  alias: String?

  /// This trigger fires when the sun is setting or rising.
  /// https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
  trigger: "sun"?

  /// Legacy syntax, use "trigger: device" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// The event to fire on, either on sunset or sunrise.
  /// https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
  event: "sunrise"|"sunset"

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
  id: String?

  /// Optional offset from the sunrise or sunset. For example "-00:45:00" will trigger 45 minutes before
  /// sunrise or sunset. https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
  offset: (TimePeriodMap|String|Number)?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class TagTrigger {
  /// Alias for the tag trigger.
  alias: String?

  /// This trigger fired when a tag is scanned.
  /// https://www.home-assistant.io/docs/automation/trigger#tag-trigger
  trigger: "tag"?

  /// Legacy syntax, use "trigger: tag" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger#tag-trigger
  id: String?

  /// Identifier of the tag. Use this to decide what to do.
  /// https://www.home-assistant.io/docs/automation/trigger#tag-trigger
  tag_id: Listing<String>|String

  /// Device registry identifier of the device that scanned the tag. Use this to decide where to do it.
  /// https://www.home-assistant.io/docs/automation/trigger#tag-trigger
  device_id: (Listing<String>|String)?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class TemplateTrigger {
  /// Alias for the template trigger.
  alias: String?

  /// Template triggers work by evaluating a template on every state change for all of the recognized
  /// entities. The trigger will fire if the state change caused the template to render ‘true’.
  /// https://www.home-assistant.io/docs/automation/trigger/#template-trigger
  trigger: "template"?

  /// Legacy syntax, use "trigger: template" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#template-trigger
  id: String?

  /// The template to render for this trigger. The event will fire is the result is true.
  /// https://www.home-assistant.io/docs/automation/trigger/#template-trigger
  value_template: String

  /// The amount of time the template must be resulting in true until this trigger fires.
  /// https://www.home-assistant.io/docs/automation/trigger/#template-trigger
  `for`: (TimePeriodMap|String|Number)?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class TimeTrigger {
  /// Alias for the time trigger.
  alias: String?

  /// The time trigger is configured to fire once at a specific point in time each day.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-trigger
  trigger: "time"?

  /// Legacy syntax, use "trigger: time" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// Time of day to trigger on, in HH:MM:SS, 24 hours clock format. For example: "13:30:00" Also accepts
  /// input_datetime entities (e.g., input_datetime.start_of_day)
  at: 
    String(matches(Regex(#"^input_datetime\..*$"#)))
    |Listing<String(matches(Regex(#"^input_datetime\..*$"#)))>
    |String(matches(Regex(#"^sensor\..*$"#)))
    |Listing<String(matches(Regex(#"^sensor\..*$"#)))>
    |String(matches(Regex("^[0-9]*:[0-9]*:[0-9]*$")))
    |Listing<String(matches(Regex("^[0-9]*:[0-9]*:[0-9]*$")))>

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-trigger
  id: String?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class TimePatternTrigger {
  /// Alias for the time pattern trigger.
  alias: String?

  /// With the time pattern trigger, you can match if the hour, minute or second of the current time
  /// matches a specific value.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
  trigger: "time_pattern"?

  /// Legacy syntax, use "trigger: time_pattern" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
  id: String?

  /// The hour or hours to trigger on. You can prefix the value with a / to match whenever the value is
  /// divisible by that number. You can specify * to match any value.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
  hours: String?

  /// The minute or minutes to trigger on. You can prefix the value with a / to match whenever the value
  /// is divisible by that number. You can specify * to match any value.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
  minutes: (String|Number)?

  /// The second or seconds to trigger on. You can prefix the value with a / to match whenever the value
  /// is divisible by that number. You can specify * to match any value.
  /// https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
  seconds: (String|Number)?

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class WebhookTrigger {
  /// Alias for the webhook trigger.
  alias: String?

  /// Webhook trigger fires when a web request is made to the webhook endpoint.
  /// https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
  trigger: "webhook"?

  /// Legacy syntax, use "trigger: webhook" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
  id: String?

  /// The webhook ID to use, defines the endpoint: /api/webhook/<webhook_id>
  /// https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
  webhook_id: String

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?

  /// Controls to only allow local requests to trigger the webhook.
  /// https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
  local_only: Boolean?

  /// Controls to only allow requests with a valid API password to trigger the webhook.
  /// https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
  allowed_methods: Listing<AllowedMethods>
}

class ZoneTrigger {
  /// Alias for the zone trigger.
  alias: String?

  /// Zone trigger fires when an entity is entering or leaving the zone. For zone automation to work, you
  /// need to have setup a device tracker platform that supports reporting GPS coordinates.
  /// https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
  trigger: "zone"?

  /// Legacy syntax, use "trigger: zone" instead.
  platform: Listing<Any>?

  /// Every individual trigger in an automation can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
  enabled: Boolean?

  /// An personal identifier for this trigger, that is passed into the trigger variables when the
  /// automation triggers using this trigger.
  /// https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
  id: String?

  /// The entity ID(s) of the device tracker(s) to monitor on a given zone.
  /// https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
  entity_id: 
    String(matches(Regex(#"^device_tracker\..*$"#)))
    |Listing<String(matches(Regex(#"^device_tracker\..*$"#)))>
    |String(matches(Regex(#"^person\..*$"#)))
    |Listing<String(matches(Regex(#"^person\..*$"#)))>

  /// The zone(s) to monitor for the given device tracker(s).
  /// https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
  zone: ZoneEntities

  /// Trigger when the entity leaves or enters the zone(s) defined.
  /// https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
  event: "enter"|"leave"

  /// This allows you to define variables that will be set when the trigger fires. These can be used in
  /// the automation actions or conditions. Templates can be used in these variables.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  variables: Data?
}

class WaitTemplateAction {
  /// Alias for the wait action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// Wait until some things are complete. https://www.home-assistant.io/docs/scripts/#wait
  wait_template: String

  /// Set a timeout after which the script will continue its execution if the condition is not satisfied.
  /// https://www.home-assistant.io/docs/scripts/#wait
  timeout: (TimePeriodMap|String|Number)?

  /// Continue the execute of the action sequence on time out or not.
  /// https://www.home-assistant.io/docs/scripts/#wait
  continue_on_timeout: Boolean?
}

class VariablesAction {
  /// Alias for the variables action.
  alias: String?

  /// Every individual action can be disabled, without removing it.
  /// https://www.home-assistant.io/docs/scripts/#disabling-an-action
  enabled: Boolean?

  /// Set it to true if you’d like to continue the action sequence, regardless of whether that action
  /// encounters an error. https://www.home-assistant.io/docs/scripts/#continuing-on-error
  continue_on_error: Boolean?

  /// The variable command allows you to set/override variables that will be accessible by templates in
  /// actions after it. https://www.home-assistant.io/docs/scripts/#variables
  variables: Data
}

class OtherPlatform13 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(template|mqtt)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class Item1 {
  /// The friendly name of the alert. https://www.home-assistant.io/integrations/alert/#name
  name: String

  /// The ID of the entity to watch. https://www.home-assistant.io/integrations/alert/#entity_id
  entity_id: String

  /// A title to be used for the notification if the notifier supports it.
  /// https://www.home-assistant.io/integrations/alert/#title
  title: String?

  /// The problem condition for the entity. https://www.home-assistant.io/integrations/alert/#state
  state: String?

  /// Number of minutes before the notification should be repeated. Can be either a number or a list of
  /// numbers. https://www.home-assistant.io/integrations/alert/#repeat
  repeat: Listing<Number>|Number

  /// Control whether the notification can be acknowledged.
  /// https://www.home-assistant.io/integrations/alert/#can_acknowledge
  can_acknowledge: Boolean?

  /// Controls whether the notification should be sent immediately or after the first delay.
  /// https://www.home-assistant.io/integrations/alert/#skip_first
  skip_first: Boolean?

  /// A message to be sent after an alert transitions from `idle` to `on`.
  /// https://www.home-assistant.io/integrations/alert/#message
  message: String?

  /// A message sent after an alert transitions from `on` or `off` to `idle`.
  /// https://www.home-assistant.io/integrations/alert/#done_message
  done_message: String?

  /// List of notification integrations to use for alerts.
  /// https://www.home-assistant.io/integrations/alert/#notifiers
  notifiers: Listing<String>?

  /// Dictionary of extra parameters to send to the notifier.
  /// https://www.home-assistant.io/integrations/alert/#data
  data: `Record<string,never>`?
}

class AutomationItem {
  /// Triggers describe events that should trigger the automation rule.
  /// https://www.home-assistant.io/docs/automation/basics/
  trigger: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |WebOSTvTrigger
    |CalendarTrigger
    |ConversationTrigger
    |DeviceTrigger
    |EventTrigger
    |GeolocationTrigger
    |HomeAssistantTrigger
    |MqttTrigger
    |NumericStateTrigger
    |PersistentNotificationTrigger
    |StateTrigger
    |SunTrigger
    |TagTrigger
    |TemplateTrigger
    |TimeTrigger
    |TimePatternTrigger
    |WebhookTrigger
    |ZoneTrigger
    |Listing<Trigger>)?

  /// Triggers describe events that should trigger the automation rule.
  /// https://www.home-assistant.io/docs/automation/basics/
  triggers: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |WebOSTvTrigger
    |CalendarTrigger
    |ConversationTrigger
    |DeviceTrigger
    |EventTrigger
    |GeolocationTrigger
    |HomeAssistantTrigger
    |MqttTrigger
    |NumericStateTrigger
    |PersistentNotificationTrigger
    |StateTrigger
    |SunTrigger
    |TagTrigger
    |TemplateTrigger
    |TimeTrigger
    |TimePatternTrigger
    |WebhookTrigger
    |ZoneTrigger
    |Listing<Trigger>)?

  /// Available in trigger templates with the difference that only limited templates can be used to pass
  /// a value to the trigger variable.
  /// https://www.home-assistant.io/docs/automation/trigger#trigger-variables
  trigger_variables: Data?

  /// The action(s) which will be performed when a rule is triggered and all conditions are met. For
  /// example, it can turn a light on, set the temperature on your thermostat or activate a scene.
  /// https://www.home-assistant.io/docs/automation/basics/
  action: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// The action(s) which will be performed when a rule is triggered and all conditions are met. For
  /// example, it can turn a light on, set the temperature on your thermostat or activate a scene.
  /// https://www.home-assistant.io/docs/automation/basics/
  actions: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// A unique identifier for this automation. Do not use the same twice, ever!
  /// https://www.home-assistant.io/docs/automation/
  id: String?

  /// Alias will be used to generate an entity_id from. https://www.home-assistant.io/docs/automation/
  alias: String?

  /// Description of the automation. This is helpful to know what the automation does.
  /// https://www.home-assistant.io/docs/automation/
  description: String?

  /// When you create a new automation, it will be enabled unless you explicitly add initial_state: false
  /// to it or turn it off manually via UI/another automation/developer tools. In case automations need
  /// to be always enabled or disabled when Home Assistant starts, then you can set the initial_state in
  /// your automations. Otherwise, the previous state will be restored.
  /// https://www.home-assistant.io/docs/automation/yaml/#initial_state
  initial_state: Boolean?

  /// For both queued and parallel modes, configuration option max controls the maximum number of runs
  /// that can be executing and/or queued up at a time. The default is 10.
  /// https://www.home-assistant.io/docs/automation/modes/
  max: Number(this >= 2)?

  /// The automation’s mode configuration option controls what happens when the automation is triggered
  /// while the actions are still running from a previous trigger.
  /// https://www.home-assistant.io/docs/automation/modes/
  mode: ("parallel"|"queued"|"restart"|"single")?

  /// When `max` is exceeded (which is effectively 1 for `single` mode) a log message will be emitted to
  /// indicate this has happened. This controls the severity level of that log message
  /// https://www.home-assistant.io/docs/automation/modes/
  max_exceeded: ("critical"|"debug"|"error"|"fatal"|"info"|"notset"|"silent"|"warn"|"warning")?

  /// Controls tracing settings of this automation.
  /// https://www.home-assistant.io/docs/automation/troubleshooting
  `trace`: BlueprintItemTrace?

  /// Variables that will be available inside your templates and conditions.
  /// https://www.home-assistant.io/docs/automation/basics/
  variables: Data?

  /// Conditions are optional tests that can limit an automation rule to only work in your specific use
  /// cases. A condition will test against the current state of the system. This includes the current
  /// time, devices, people and other things like the sun.
  /// https://www.home-assistant.io/docs/automation/basics/
  condition: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?

  /// Conditions are optional tests that can limit an automation rule to only work in your specific use
  /// cases. A condition will test against the current state of the system. This includes the current
  /// time, devices, people and other things like the sun.
  /// https://www.home-assistant.io/docs/automation/basics/
  conditions: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?
}

/// Controls tracing settings of this automation.
/// https://www.home-assistant.io/docs/automation/troubleshooting
class BlueprintItemTrace {
  /// The number of automation traces tha are stored for this automation.
  /// https://www.home-assistant.io/docs/automation/yaml/#number-of-debug-traces-stored
  stored_traces: Int(isPositive)?
}

class BlueprintItem {
  use_blueprint: BlueprintItem1UseBlueprint

  /// Triggers describe events that should trigger the automation rule.
  /// https://www.home-assistant.io/docs/automation/basics/
  trigger: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |WebOSTvTrigger
    |CalendarTrigger
    |ConversationTrigger
    |DeviceTrigger
    |EventTrigger
    |GeolocationTrigger
    |HomeAssistantTrigger
    |MqttTrigger
    |NumericStateTrigger
    |PersistentNotificationTrigger
    |StateTrigger
    |SunTrigger
    |TagTrigger
    |TemplateTrigger
    |TimeTrigger
    |TimePatternTrigger
    |WebhookTrigger
    |ZoneTrigger
    |Listing<Trigger>)?

  /// Triggers describe events that should trigger the automation rule.
  /// https://www.home-assistant.io/docs/automation/basics/
  triggers: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |WebOSTvTrigger
    |CalendarTrigger
    |ConversationTrigger
    |DeviceTrigger
    |EventTrigger
    |GeolocationTrigger
    |HomeAssistantTrigger
    |MqttTrigger
    |NumericStateTrigger
    |PersistentNotificationTrigger
    |StateTrigger
    |SunTrigger
    |TagTrigger
    |TemplateTrigger
    |TimeTrigger
    |TimePatternTrigger
    |WebhookTrigger
    |ZoneTrigger
    |Listing<Trigger>)?

  /// The action(s) which will be performed when a rule is triggered and all conditions are met. For
  /// example, it can turn a light on, set the temperature on your thermostat or activate a scene.
  /// https://www.home-assistant.io/docs/automation/basics/
  action: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// The action(s) which will be performed when a rule is triggered and all conditions are met. For
  /// example, it can turn a light on, set the temperature on your thermostat or activate a scene.
  /// https://www.home-assistant.io/docs/automation/basics/
  actions: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// A unique identifier for this automation. Do not use the same twice, ever!
  /// https://www.home-assistant.io/docs/automation/
  id: String?

  /// Alias will be used to generate an entity_id from. https://www.home-assistant.io/docs/automation/
  alias: String?

  /// Description of the automation. This is helpful to know what the automation does.
  /// https://www.home-assistant.io/docs/automation/
  description: String?

  /// When you create a new automation, it will be enabled unless you explicitly add initial_state: false
  /// to it or turn it off manually via UI/another automation/developer tools. In case automations need
  /// to be always enabled or disabled when Home Assistant starts, then you can set the initial_state in
  /// your automations. Otherwise, the previous state will be restored.
  /// https://www.home-assistant.io/docs/automation/yaml/#initial_state
  initial_state: Boolean?

  /// For both queued and parallel modes, configuration option max controls the maximum number of runs
  /// that can be executing and/or queued up at a time. The default is 10.
  /// https://www.home-assistant.io/docs/automation/modes/
  max: Number(this >= 2)?

  /// The automation’s mode configuration option controls what happens when the automation is triggered
  /// while the actions are still running from a previous trigger.
  /// https://www.home-assistant.io/docs/automation/modes/
  mode: ("parallel"|"queued"|"restart"|"single")?

  /// When `max` is exceeded (which is effectively 1 for `single` mode) a log message will be emitted to
  /// indicate this has happened. This controls the severity level of that log message
  /// https://www.home-assistant.io/docs/automation/modes/
  max_exceeded: ("critical"|"debug"|"error"|"fatal"|"info"|"notset"|"silent"|"warn"|"warning")?

  /// Controls tracing settings of this automation.
  /// https://www.home-assistant.io/docs/automation/troubleshooting
  `trace`: BlueprintItemTrace?

  /// Variables that will be available inside your templates and conditions.
  /// https://www.home-assistant.io/docs/automation/basics/
  variables: Data?

  /// Conditions are optional tests that can limit an automation rule to only work in your specific use
  /// cases. A condition will test against the current state of the system. This includes the current
  /// time, devices, people and other things like the sun.
  /// https://www.home-assistant.io/docs/automation/basics/
  condition: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?

  /// Conditions are optional tests that can limit an automation rule to only work in your specific use
  /// cases. A condition will test against the current state of the system. This includes the current
  /// time, devices, people and other things like the sun.
  /// https://www.home-assistant.io/docs/automation/basics/
  conditions: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?
}

class BlueprintItem1UseBlueprint {
  path: String

  input: Data?
}

class BinarySensorPlatformSchema {
  /// The template platform supports binary sensors which get their values from other entities. The state
  /// of a Template Binary Sensor can only be on or off.
  /// https://www.home-assistant.io/integrations/binary_sensor.template
  platform: "template"

  /// List of sensors. https://www.home-assistant.io/integrations/binary_sensor.template#sensors
  sensors: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |BinarySensorPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class BinarySensorPlatformItem {
  /// Defines templates for attributes of the sensor.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#attribute_templates
  attribute_templates: Mapping<String, String>?

  /// Defines a template to get the available state of the sensor. Return true if the device is
  /// available, false otherwise.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#availability_template
  availability_template: String?

  /// The amount of time the template state must be not met before this sensor will switch to off.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#delay_off
  delay_off: (TimePeriodMap|String|Number)?

  /// The amount of time the template state must be met before this sensor will switch to on.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#delay_on
  delay_on: (TimePeriodMap|String|Number)?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#device_class
  device_class: (
    "battery"
    |"battery_charging"
    |"carbon_monoxide"
    |"cold"
    |"connectivity"
    |"door"
    |"garage_door"
    |"gas"
    |"heat"
    |"light"
    |"lock"
    |"moisture"
    |"motion"
    |"moving"
    |"occupancy"
    |"opening"
    |"plug"
    |"power"
    |"presence"
    |"problem"
    |"running"
    |"safety"
    |"smoke"
    |"sound"
    |"tamper"
    |"update"
    |"vibration"
    |"window")?

  /// Defines a template for the entity picture of the sensor.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#entity_picture_template
  entity_picture_template: String?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#friendly_name
  friendly_name: String?

  /// Defines a template for the icon of the sensor.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#icon_template
  icon_template: String?

  /// An ID that uniquely identifies this binary sensor. Set this to an unique value to allow
  /// customization through the UI.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#unique_id
  unique_id: String?

  /// The sensor is on if the template evaluates as True and off otherwise.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#value_template
  value_template: String
}

class BinarySensorPlatformSchema1 {
  /// The group binary_sensor platform lets you combine multiple binary_sensors into one entity.
  /// https://www.home-assistant.io/integrations/binary_sensor.group
  platform: "group"

  /// Set this to true if the group state should only turn on if all grouped entities are on, false
  /// otherwise. https://www.home-assistant.io/integrations/binary_sensor.group/#all
  all: Boolean?

  /// Sets the class of the device, changing the device state and icon that is displayed on the UI.
  /// https://www.home-assistant.io/integrations/binary_sensor.group#device_class
  device_class: (
    "battery"
    |"battery_charging"
    |"carbon_monoxide"
    |"cold"
    |"connectivity"
    |"door"
    |"garage_door"
    |"gas"
    |"heat"
    |"light"
    |"lock"
    |"moisture"
    |"motion"
    |"moving"
    |"occupancy"
    |"opening"
    |"plug"
    |"power"
    |"presence"
    |"problem"
    |"running"
    |"safety"
    |"smoke"
    |"sound"
    |"tamper"
    |"update"
    |"vibration"
    |"window")?

  /// A list of entities to be included in the binary sensor group.
  /// https://www.home-assistant.io/integrations/binary_sensor.group/#entities
  entities: Entities

  /// The name of the binary sensor group. Defaults to "Binary Sensor Group".
  /// https://www.home-assistant.io/integrations/binary_sensor.group#name
  name: String?

  /// An ID that uniquely identifies this binary sensor group. If two binary sensors have the same unique
  /// ID, Home Assistant will raise an error.
  /// https://www.home-assistant.io/integrations/binary_sensor.group#unique_id
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class BinarySensorPlatformSchema2 {
  /// The tod platform supports binary sensors which get their values by checking if the current time is
  /// within defined time ranges. https://www.home-assistant.io/integrations/tod
  platform: "tod"

  /// Name of the sensor https://www.home-assistant.io/integrations/tod/#name
  name: String

  /// The absolute local time value or sun event for beginning of the time range.
  /// https://www.home-assistant.io/integrations/tod/#before
  before: String(matches(Regex("^[0-9]*:[0-9]*:[0-9]*$")))|"sunrise"|"sunset"

  /// The time offset of the beginning time range.
  /// https://www.home-assistant.io/integrations/tod/#before_offset
  before_offset: (TimePeriodMap|String|Number)?

  /// The absolute local time value or sun event for ending of the time range.
  /// https://www.home-assistant.io/integrations/tod/#after
  after: String(matches(Regex("^[0-9]*:[0-9]*:[0-9]*$")))|"sunrise"|"sunset"

  /// The time offset of the ending time range.
  /// https://www.home-assistant.io/integrations/tod/#after_offset
  after_offset: (TimePeriodMap|String|Number)?

  /// The unique ID for this config block. This will be prefixed to all unique IDs of all entities in
  /// this block. https://www.home-assistant.io/integrations/tod/#unique_id
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform1 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(group|template|tod|mqtt)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class ProxyCameraPlatformSchema {
  /// The proxy camera integration allows you to pass another camera's output through post-processing
  /// routines and generate a new camera with the post-processed output.
  /// https://www.home-assistant.io/integrations/proxy/
  platform: "proxy"

  /// The ID of another Home Assistant camera to post-process.
  /// https://www.home-assistant.io/integrations/proxy/#entity_id
  entity_id: String(matches(Regex(#"^camera\..*$"#)))

  /// This parameter allows you to override the name of your camera.
  /// https://www.home-assistant.io/integrations/proxy/#name
  name: String?

  /// The operating mode, either `resize` or `crop`.
  /// https://www.home-assistant.io/integrations/proxy/#mode
  mode: ("crop"|"resize")?

  /// The maximum width of single images taken from the camera (aspect ratio will be maintained on resize
  /// processing). https://www.home-assistant.io/integrations/proxy/#max_image_width
  max_image_width: Int(isPositive)?

  /// The maximum height of single images taken from the camera, only used for crop operations. If not
  /// provided, the original height is assumed by default.
  /// https://www.home-assistant.io/integrations/proxy/#max_image_height
  max_image_height: Int(isPositive)?

  /// The maximum width of the MJPEG stream from the camera (aspect ratio will be maintained on resize
  /// processing). https://www.home-assistant.io/integrations/proxy/#max_stream_width
  max_stream_width: Int(isPositive)?

  /// The maximum height of the MJPEG stream from the camera, only used for crop operations. If not
  /// provided, the original height is assumed by default.
  /// https://www.home-assistant.io/integrations/proxy/#max_stream_height
  max_stream_height: Int(isPositive)?

  /// The top (y) coordinate to be used as a starting point for crop operations.
  /// https://www.home-assistant.io/integrations/proxy/#image_top
  image_top: Int?

  /// The left (x) coordinate to be used as a starting point for crop operations.
  /// https://www.home-assistant.io/integrations/proxy/#image_left
  image_left: Int?

  /// The quality level used for resulting JPEG for snapshots.
  /// https://www.home-assistant.io/integrations/proxy/#image_quality
  image_quality: Int(isPositive)?

  /// The quality level used for resulting MJPEG streams.
  /// https://www.home-assistant.io/integrations/proxy/#stream_quality
  stream_quality: Int(isPositive)?

  /// The minimum time in seconds between generating successive image snapshots.
  /// https://www.home-assistant.io/integrations/proxy/#image_refresh_rate
  image_refresh_rate: Int(isPositive)?

  /// Resize the image even if the resulting image would take up more bandwidth than the original.
  /// https://www.home-assistant.io/integrations/proxy/#force_resize
  force_resize: Boolean?

  /// Preserve the last image and re-send in the case the camera is not responding.
  /// https://www.home-assistant.io/integrations/proxy/#cache_images
  cache_images: Boolean?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform2 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(mqtt|proxy)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform10 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(mqtt)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class Schema2 {
  /// Intents that the conversation integration should understand.
  /// https://www.home-assistant.io/integrations/conversation#intents
  intents: Mapping<String, Listing<String>|String>?
}

class Item5 {
  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/counter/#icon
  icon: String?

  /// Initial value when Home Assistant starts or the counter is reset.
  /// https://www.home-assistant.io/integrations/counter/#initial
  initial: Int(isPositive)?

  /// Maximum value the counter will have. https://www.home-assistant.io/integrations/counter/#maximum
  maximum: Int?

  /// Minimum value the counter will have. https://www.home-assistant.io/integrations/counter/#minimum
  minimum: Int?

  /// Name of the counter. https://www.home-assistant.io/integrations/counter/#name
  name: String?

  /// Try to restore the last known value when Home Assistant starts, defaults to `true`.
  /// https://www.home-assistant.io/integrations/counter/#restore
  restore: Boolean?

  /// Incremental/step value for the counter. https://www.home-assistant.io/integrations/counter/#step
  step: Int(isPositive)?
}

class CoverPlatformSchema {
  /// The template platform can create covers that combine integrations and provides the ability to run
  /// scripts or invoke services for each of the open, close, stop, position and tilt commands of a
  /// cover. https://www.home-assistant.io/integrations/cover.template
  platform: "template"

  /// List of covers. https://www.home-assistant.io/integrations/cover.template/#covers
  covers: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |CoverPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class CoverPlatformItem {
  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available. If the template returns any other value, the device will be unavailable.
  /// https://www.home-assistant.io/integrations/cover.template/#availability_template
  availability_template: String?

  /// Defines an action to close the cover.
  /// https://www.home-assistant.io/integrations/cover.template/#close_cover
  close_cover: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/cover.template/#device_class
  device_class: ("awning"|"blind"|"curtain"|"damper"|"door"|"garage"|"gate"|"shade"|"shutter"|"window")?

  /// Defines a template for the entity picture of the sensor.
  /// https://www.home-assistant.io/integrations/cover.template/#entity_picture_template
  entity_picture_template: String?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/cover.template/#friendly_name
  friendly_name: String?

  /// Defines a template to specify which icon to use.
  /// https://www.home-assistant.io/integrations/cover.template/#icon_template
  icon_template: String?

  /// Defines an action to open the cover. If open_cover is specified, close_cover must also be
  /// specified. https://www.home-assistant.io/integrations/cover.template/#open_cover
  open_cover: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Force cover position to use optimistic mode.
  /// https://www.home-assistant.io/integrations/cover.template/#optimistic
  optimistic: Boolean?

  /// Defines a template to get the state of the cover. Legal values are numbers between 0 (closed) and
  /// 100 (open). https://www.home-assistant.io/integrations/cover.template/#position_template
  position_template: String?

  /// Defines an action to set to a cover position (between 0 and 100).
  /// https://www.home-assistant.io/integrations/cover.template/#set_cover_position
  set_cover_position: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to set the tilt of a cover (between 0 and 100).
  /// https://www.home-assistant.io/integrations/cover.template/#set_cover_tilt_position
  set_cover_tilt_position: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to stop the cover.
  /// https://www.home-assistant.io/integrations/cover.template/#stop_cover
  stop_cover: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Force cover tilt position to use optimistic mode.
  /// https://www.home-assistant.io/integrations/cover.template/#tilt_optimistic
  tilt_optimistic: Boolean?

  /// Defines a template to get the tilt state of the cover. Legal values are numbers between 0 (closed)
  /// and 100 (open). https://www.home-assistant.io/integrations/cover.template/#tilt_template
  tilt_template: String?

  /// An ID that uniquely identifies this cover. Set this to an unique value to allow customization
  /// trough the UI. https://www.home-assistant.io/integrations/cover.template/#unique_id
  unique_id: String?

  /// Defines a template to get the state of the cover. Valid values are open/true or closed/false.
  /// https://www.home-assistant.io/integrations/cover.template/#value_template
  value_template: String?
}

class CoverPlatformSchema1 {
  /// The group cover platform lets you combine multiple covers into one entity.
  /// https://www.home-assistant.io/integrations/group#cover-groups
  platform: "group"

  /// Sets the class of the device, changing the device state and icon that is displayed on the UI.
  /// https://www.home-assistant.io/integrations/group#cover-groups
  device_class: ("awning"|"blind"|"curtain"|"damper"|"door"|"garage"|"gate"|"shade"|"shutter"|"window")?

  /// A list of entities to be included in the cover group.
  /// https://www.home-assistant.io/integrations/group#cover-groups
  entities: Entities

  /// The name of the cover group. https://www.home-assistant.io/integrations/group#cover-groups
  name: String?

  /// An ID that uniquely identifies this cover group.
  /// https://www.home-assistant.io/integrations/group#cover-groups
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform4 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(group|template)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class FanPlatformSchema {
  /// The template platform creates fans that combine integrations and provides the ability to run
  /// scripts or invoke services for each of the turn_on, turn_off, set_speed, set_oscillating, and
  /// set_direction commands of a fan. https://www.home-assistant.io/integrations/fan.template
  platform: "template"

  /// List of fans. https://www.home-assistant.io/integrations/fan.template/#fans
  fans: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |FanPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class FanPlatformItem {
  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available. https://www.home-assistant.io/integrations/fan.template/#availability_template
  availability_template: String?

  /// Defines a template to get the direction of the fan. Valid value: ‘forward’/‘reverse’
  /// https://www.home-assistant.io/integrations/fan.template/#direction_template
  direction_template: String?

  /// Name to use in the frontend. https://www.home-assistant.io/integrations/fan.template/#friendly_name
  friendly_name: String?

  /// Defines a template to get the osc state of the fan. Valid value: true/false
  /// https://www.home-assistant.io/integrations/fan.template/#oscillating_template
  oscillating_template: String?

  /// Defines a template to get the speed percentage of the fan.
  /// https://www.home-assistant.io/integrations/fan.template/#percentage_template
  percentage_template: String?

  /// Defines a template to get the preset mode of the fan.
  /// https://www.home-assistant.io/integrations/fan.template/#preset_mode_template
  preset_mode_template: String?

  /// List of preset modes the fan is capable of. This is an arbitrary list of strings and must not
  /// contain any speeds. https://www.home-assistant.io/integrations/fan.template/#preset_modes
  preset_modes: Listing<String>?

  /// Defines an action to run when the fan is given a direction command.
  /// https://www.home-assistant.io/integrations/fan.template/#set_direction
  set_direction: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the fan is given an osc state command.
  /// https://www.home-assistant.io/integrations/fan.template/#set_oscillating
  set_oscillating: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the fan is given a speed percentage command.
  /// https://www.home-assistant.io/integrations/fan.template/#set_percentage
  set_percentage: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the fan is given a preset command.
  /// https://www.home-assistant.io/integrations/fan.template/#set_preset_mode
  set_preset_mode: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// The number of speeds the fan supports. Used to calculate the percentage step for the
  /// fan.increase_speed and fan.decrease_speed services.
  /// https://www.home-assistant.io/integrations/fan.template/#speed_count
  speed_count: Int(isPositive)?

  /// Defines an action to run when the fan is turned off.
  /// https://www.home-assistant.io/integrations/fan.template/#turn_off
  turn_off: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines an action to run when the fan is turned on.
  /// https://www.home-assistant.io/integrations/fan.template/#turn_on
  turn_on: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// An ID that uniquely identifies this fan. Set this to an unique value to allow customization trough
  /// the UI. https://www.home-assistant.io/integrations/fan.template/#unique_id
  unique_id: String?

  /// Defines a template to get the state of the fan. Valid value: ‘on’/‘off’
  /// https://www.home-assistant.io/integrations/fan.template/#value_template
  value_template: String
}

class FanPlatformSchema1 {
  /// The group fan platform lets you combine multiple fans into one entity.
  /// https://www.home-assistant.io/integrations/group#fan-groups
  platform: "group"

  /// A list of entities to be included in the fan group.
  /// https://www.home-assistant.io/integrations/group#fan-groups
  entities: Entities

  /// The name of the fan group. https://www.home-assistant.io/integrations/group#fan-groups
  name: String?

  /// An ID that uniquely identifies this fan group.
  /// https://www.home-assistant.io/integrations/group#fan-groups
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform12 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(group|template|mqtt)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class Item8 {
  /// Set this to true if the group state should only turn on if all grouped entities are on, false
  /// otherwise. https://www.home-assistant.io/integrations/group
  all: Boolean?

  /// A list of entities to group. https://www.home-assistant.io/integrations/group#entities
  entities: Entities

  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/group#icon
  icon: String?

  /// Name of the group. https://www.home-assistant.io/integrations/group#name
  name: String?
}

class Schema5 {
  /// DEPRECATED. The base URL has been deprecated, please use internal_url and external_url instead.
  base_url: Listing<Any>?

  /// A list of origin domain names to allow CORS requests from. Enabling this will set the
  /// Access-Control-Allow-Origin header to the Origin header if it is found in the list, and the
  /// Access-Control-Allow-Headers header to Origin, Accept, X-Requested-With, Content-type,
  /// Authorization. https://www.home-assistant.io/integrations/http#cors_allowed_origins
  cors_allowed_origins: (Listing<String>|String)?

  /// Flag indicating whether additional IP filtering is enabled.
  /// https://www.home-assistant.io/integrations/http#ip_ban_enabled
  ip_ban_enabled: Boolean?

  /// Number of failed login attempt from single IP after which it will be automatically banned if
  /// ip_ban_enabled is true. https://www.home-assistant.io/integrations/http#login_attempts_threshold
  login_attempts_threshold: Int(isPositive)?

  /// Only listen to incoming requests on specific IP/host. By default it will accept all IPv4
  /// connections. Use server_host: ::0 if you want to listen to (and only) IPv6. Warning! Only use this
  /// option when you run Home Assistant Core directly in Python!
  /// https://www.home-assistant.io/integrations/http#server_host
  server_host: String?

  /// Let you set a port for Home Assistant to run on.
  /// https://www.home-assistant.io/integrations/http#server_port
  server_port: Int(isBetween(1, 65535))?

  /// Path to your TLS/SSL certificate to serve Home Assistant over a secure connection.
  /// https://www.home-assistant.io/integrations/http#ssl_certificate
  ssl_certificate: String?

  /// Path to your TLS/SSL key to serve Home Assistant over a secure connection.
  /// https://www.home-assistant.io/integrations/http#ssl_key
  ssl_key: String?

  /// Path to the client/peer TLS/SSL certificate to accept secure connections from.
  /// https://www.home-assistant.io/integrations/http#ssl_peer_certificate
  ssl_peer_certificate: String?

  /// The Mozilla SSL profile to use. Only lower if you are experiencing integrations causing SSL
  /// handshake errors. Can be either "modern" or "intermediate". Modern is the default.
  /// https://www.home-assistant.io/integrations/http#ssl_profile
  ssl_profile: ("intermediate"|"modern")?

  /// DEPRECATED. This option has no effect. Please remove this from your configuration.
  trusted_networks: Listing<Any>?

  /// List of trusted proxies, consisting of IP addresses or networks, that are allowed to set the
  /// X-Forwarded-For header. This is required when using use_x_forwarded_for because all requests to
  /// Home Assistant, regardless of source, will arrive from the reverse proxy IP address. This option
  /// should be handled and set with extreme care!
  /// https://www.home-assistant.io/integrations/http#trusted_proxies
  trusted_proxies: (Listing<String>|String)?

  /// Enable parsing of the X-Forwarded-For header, passing on the client’s correct IP address in proxied
  /// setups. You must also whitelist trusted proxies using the trusted_proxies setting for this to work.
  /// Non-whitelisted requests with this header will be considered IP spoofing attacks, and the header
  /// will, therefore, be ignored. https://www.home-assistant.io/integrations/http#use_x_forwarded_for
  use_x_forwarded_for: Boolean?

  /// Controls the `X-Frame-Options` header to help prevent clickjacking.
  /// https://www.home-assistant.io/integrations/http#use_x_frame_options
  use_x_frame_options: Boolean?
}

class Item9 {
  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/input_boolean#icon
  icon: String?

  /// Initial value when Home Assistant starts.
  /// https://www.home-assistant.io/integrations/input_boolean#initial
  initial: Boolean?

  /// Name of the input boolean. https://www.home-assistant.io/integrations/input_boolean#name
  name: String?
}

class Item10 {
  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/input_button#icon
  icon: String?

  /// Name of the input button. https://www.home-assistant.io/integrations/input_button#name
  name: String?
}

class Item11 {
  /// Set to true if the input should have a date. At least one of has_time or has_date must be defined.
  /// https://www.home-assistant.io/integrations/input_datetime/#has_date
  has_date: Boolean?

  /// Set to true if the input should have a time. At least one of has_time or has_date must be defined.
  /// https://www.home-assistant.io/integrations/input_datetime/#has_time
  has_time: Boolean?

  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/input_boolean#icon
  icon: String?

  /// Initial value when Home Assistant starts.
  /// https://www.home-assistant.io/integrations/input_datetime/#initial
  initial: String?

  /// Name of the input datetime. https://www.home-assistant.io/integrations/input_datetime/#name
  name: String?
}

class Item12 {
  /// Show a "slider" or a input "box" in the UI frontend. Defaults to "slider".
  /// https://www.home-assistant.io/integrations/input_number#mode
  mode: ("box"|"slider")?

  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/input_number#icon
  icon: String?

  /// Initial value when Home Assistant starts.
  /// https://www.home-assistant.io/integrations/input_number#initial
  initial: Number?

  /// Maximum value of the number https://www.home-assistant.io/integrations/input_number#max
  max: Number

  /// Minimum value of the number https://www.home-assistant.io/integrations/input_number#min
  min: Number

  /// Name of the input number. https://www.home-assistant.io/integrations/input_number#name
  name: String?

  /// Step value. Smallest value 0.001. https://www.home-assistant.io/integrations/input_number#step
  step: Number?

  /// Unit of measurement in which the value of the slider is expressed in.
  /// https://www.home-assistant.io/integrations/input_number#unit_of_measurement
  unit_of_measurement: String?
}

class Item13 {
  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/input_select/#icon
  icon: String?

  /// Initial value when Home Assistant starts.
  /// https://www.home-assistant.io/integrations/input_select/#initial
  initial: String?

  /// Name of the input select. https://www.home-assistant.io/integrations/input_select/#name
  name: String?

  /// List of options to choose from. https://www.home-assistant.io/integrations/input_select#options
  options: Listing<String>
}

class Item14 {
  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/input_text/#icon
  icon: String?

  /// Initial value when Home Assistant starts.
  /// https://www.home-assistant.io/integrations/input_text#initial
  initial: String?

  /// Maximum length for the text value. 255 is the maximum number of characters allowed in an entity
  /// state. https://www.home-assistant.io/integrations/input_text#max
  max: Int(isBetween(1, 255))?

  /// Minimum length for the text value. https://www.home-assistant.io/integrations/input_text#min
  min: UInt8?

  /// Can specify text or password. Elements of type “password” provide a way for the user to securely
  /// enter a value. https://www.home-assistant.io/integrations/input_text#mode
  mode: ("password"|"text")?

  /// Name of the input text. https://www.home-assistant.io/integrations/input_text/#name
  name: String?

  /// Regex pattern for client-side validation.
  /// https://www.home-assistant.io/integrations/input_text#pattern
  pattern: String?
}

class Item15 {
  /// Defines an action to run to intents.
  /// https://www.home-assistant.io/integrations/intent_script/#action
  action: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Set to True to have Home Assistant not wait for the script to finish before returning the intent
  /// response. https://www.home-assistant.io/integrations/intent_script/#async_action
  async_action: Boolean?

  /// Card to display. https://www.home-assistant.io/integrations/intent_script/#card
  card: Card?

  /// Description of the intent. https://www.home-assistant.io/integrations/intent_script/#description
  description: String?

  /// The script mode in which to run the intent script.
  /// https://www.home-assistant.io/integrations/intent_script/#mode
  mode: ("parallel"|"queued"|"restart"|"single")?

  /// List of domains that the entity supports.
  /// https://www.home-assistant.io/integrations/intent_script/#platforms
  platforms: Listing<String>?

  /// Text or template to return if the user does not respond.
  /// https://www.home-assistant.io/integrations/intent_script/#reprompt
  reprompt: Reprompt?

  /// Text or template to return. https://www.home-assistant.io/integrations/intent_script/#speech
  speech: Speech?
}

/// Card to display. https://www.home-assistant.io/integrations/intent_script/#card
class Card {
  /// Type of card to display. Defaults to "simple".
  /// https://www.home-assistant.io/integrations/intent_script/#type
  type: String?

  /// Title of the card to display. https://www.home-assistant.io/integrations/intent_script/#title
  title: String

  /// Contents of the card to display. https://www.home-assistant.io/integrations/intent_script/#content
  content: String
}

/// Text or template to return if the user does not respond.
/// https://www.home-assistant.io/integrations/intent_script/#reprompt
class Reprompt {
  /// Type of speech. Defaults to "plain". https://www.home-assistant.io/integrations/intent_script/#type
  type: String?

  /// Text to speech for reprompt. https://www.home-assistant.io/integrations/intent_script/#text
  text: String
}

/// Text or template to return. https://www.home-assistant.io/integrations/intent_script/#speech
class Speech {
  /// Type of speech. Defaults to "plain". https://www.home-assistant.io/integrations/intent_script/#type
  type: String?

  /// Text to speech https://www.home-assistant.io/integrations/intent_script/#content
  text: String
}

class LightPlatformSchema {
  /// The template platform creates lights that combine integrations and provides the ability to run
  /// scripts or invoke services for each of the on, off, and brightness commands of a light.
  /// https://www.home-assistant.io/integrations/light.template
  platform: "template"

  /// List of lights. https://www.home-assistant.io/integrations/fan.template/#lights
  lights: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |LightPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class LightPlatformItem {
  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available.
  /// https://www.home-assistant.io/integrations/light.template#availability_template
  availability_template: String?

  /// Defines a template to get the list of supported effects. Must render a list.
  /// https://www.home-assistant.io/integrations/light.template#effect_list_template
  effect_list_template: String?

  /// Defines a template to get the currently selected effect.
  /// https://www.home-assistant.io/integrations/light.template#effect_template
  effect_template: String?

  /// Defines a template for the entity picture of the light.
  /// https://www.home-assistant.io/integrations/light.template#entity_picture_template
  entity_picture_template: String?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/light.template#friendly_name
  friendly_name: String?

  /// Defines a template to get the HS color of the light. Must render a tuple (hue, saturation).
  /// https://www.home-assistant.io/integrations/light.template#hs_template
  hs_template: String?

  /// Defines a template for an icon or picture, e.g., showing a different icon for different states.
  /// https://www.home-assistant.io/integrations/light.template#icon_template
  icon_template: String?

  /// Defines a template to get the brightness of the light.
  /// https://www.home-assistant.io/integrations/light.template#level_template
  level_template: String?

  /// Defines a template to get the max mireds value of the light.
  /// https://www.home-assistant.io/integrations/light.template#max_mireds_template
  max_mireds_template: String?

  /// Defines a template to get the min mireds value of the light.
  /// https://www.home-assistant.io/integrations/light.template#min_mireds_template
  min_mireds_template: String?

  /// Defines a template to get the RGB color of the light. Must render a tuple or a list (red, green,
  /// blue). https://www.home-assistant.io/integrations/light.template#rgb_template
  rgb_template: String?

  /// Defines a template to get the RGBW color of the light. Must render a tuple or a list (red, green,
  /// blue, white). https://www.home-assistant.io/integrations/light.template#rgbw_template
  rgbw_template: String?

  /// Defines a template to get the RGBWW color of the light. Must render a tuple or a list (red, green,
  /// blue, cold white, warm white).
  /// https://www.home-assistant.io/integrations/light.template#rgbww_template
  rgbww_template: String?

  /// Defines an action to run when the light is given a effect command.
  /// https://www.home-assistant.io/integrations/light.template#set_effect
  set_effect: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the light is given a hs color command. Available variables: `hs` as a
  /// tuple, `h` and `s`. https://www.home-assistant.io/integrations/light.template#set_hs
  set_hs: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the light is given a brightness command.
  /// https://www.home-assistant.io/integrations/light.template#set_level
  set_level: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the light is given an RGB color command. Available variables: `rgb`
  /// as a tuple, `r`, `g` and `b`. https://www.home-assistant.io/integrations/light.template#set_rgb
  set_rgb: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the light is given an RGBW color command. Available variables: `rgbw`
  /// as a tuple, `rgb` as a tuple, `r`, `g`, `b` and `w`.
  /// https://www.home-assistant.io/integrations/light.template#set_rgbw
  set_rgbw: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the light is given an RGBWW color command. Available variables:
  /// `rgbww` as a tuple, `rgb` as a tuple, `r`, `g`, `b`, `cw` and `ww`.
  /// https://www.home-assistant.io/integrations/light.template#set_rgbww
  set_rgbww: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the light is given a color temperature command.
  /// https://www.home-assistant.io/integrations/light.template#set_temperature
  set_temperature: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines a template to get if light supports transition.
  /// https://www.home-assistant.io/integrations/light.template#supports_transition_template
  supports_transition_template: String?

  /// Defines a template to get the color temperature of the light.
  /// https://www.home-assistant.io/integrations/light.template#temperature_template
  temperature_template: String?

  /// Defines an action to run when the light is turned off.
  /// https://www.home-assistant.io/integrations/light.template#turn_off
  turn_off: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines an action to run when the light is turned on.
  /// https://www.home-assistant.io/integrations/light.template#turn_on
  turn_on: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// An ID that uniquely identifies this light. Set this to an unique value to allow customisation
  /// trough the UI. https://www.home-assistant.io/integrations/light.template#unique_id
  unique_id: String?

  /// Defines a template to get the state of the light.
  /// https://www.home-assistant.io/integrations/light.template#value_template
  value_template: String?
}

class LightPlatformSchema1 {
  /// The group light platform lets you combine multiple lights into one entity.
  /// https://www.home-assistant.io/integrations/light.group/
  platform: "group"

  /// Set this to true if the group state should only turn on if all grouped entities are on, false
  /// otherwise. https://www.home-assistant.io/integrations/light.group/#all
  all: Boolean?

  /// A list of entities to be included in the light group.
  /// https://www.home-assistant.io/integrations/light.group/#entities
  entities: Entities

  /// The name of the light group. Defaults to "Light Group".
  /// https://www.home-assistant.io/integrations/light.group/#name
  name: String?

  /// An ID that uniquely identifies this light group. If two lights have the same unique ID, Home
  /// Assistant will raise an error. https://www.home-assistant.io/integrations/light.group/#unique_id
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class LockPlatformSchema {
  /// The template platform creates locks that combines components.
  /// https://www.home-assistant.io/integrations/lock.template
  platform: "template"

  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available.
  /// https://www.home-assistant.io/integrations/lock.template/#availability_template
  availability_template: String?

  /// Defines an action to lock the lock. https://www.home-assistant.io/integrations/lock.template/#lock
  lock: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Name to use in the frontend. https://www.home-assistant.io/integrations/lock.template/#name
  name: String?

  /// Force lock state to use optimistic mode.
  /// https://www.home-assistant.io/integrations/lock.template/#optimistic
  optimistic: Boolean?

  /// An ID that uniquely identifies this lock. Set this to an unique value to allow customization trough
  /// the UI. https://www.home-assistant.io/integrations/lock.template/#unique_id
  unique_id: String?

  /// Defines an action to unlock the lock.
  /// https://www.home-assistant.io/integrations/lock.template/#unlock
  unlock: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines a template to set the state of the lock.
  /// https://www.home-assistant.io/integrations/lock.template/#value_template
  value_template: String

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class LockPlatformSchema1 {
  /// The group lock platform lets you combine multiple locks into one entity.
  /// https://www.home-assistant.io/integrations/group#lock-groups
  platform: "group"

  /// A list of entities to be included in the lock group.
  /// https://www.home-assistant.io/integrations/group#lock-groups
  entities: Entities

  /// The name of the lock group. https://www.home-assistant.io/integrations/group#lock-groups
  name: String?

  /// An ID that uniquely identifies this lock group.
  /// https://www.home-assistant.io/integrations/group#lock-groups
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class Schema13 {
  /// Additional Lovelace YAML dashboards. The key is used for the URL and should contain a hyphen (-)
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#dashboards
  dashboards: Mapping<String, DashboardItem>?

  /// In what mode should the main Lovelace panel be, yaml or storage (UI managed).
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#mode
  mode: ("storage"|"yaml")?

  /// List of resources that should be loaded when you use Lovelace.
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#resources
  resources: Listing<ResourceItem>?
}

class DashboardItem {
  /// The file in your config directory where the Lovelace configuration for this panel is.
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#filename
  filename: String

  /// The icon to show in the sidebar. https://www.home-assistant.io/lovelace/dashboards-and-views/#icon
  icon: String?

  /// The mode of the dashboard, this should always be yaml. Dashboards in storage mode can be created in
  /// the Lovelace configuration panel. https://www.home-assistant.io/lovelace/dashboards-and-views/#mode
  mode: "yaml"

  /// Should this dashboard be only accessible for admin users.
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#require_admin
  require_admin: Boolean?

  /// Should this dashboard be shown in the sidebar.
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#show_in_sidebar
  show_in_sidebar: Boolean?

  /// The title of the dashboard, will be used in the sidebar.
  /// https://www.home-assistant.io/lovelace/dashboards-and-views/#title
  title: String
}

class ResourceItem {
  /// The type of resource, this should be either module for a JavaScript module or css for a StyleSheet.
  type: "css"|"module"

  /// The URL of the resource to load. https://www.home-assistant.io/lovelace/dashboards-and-views/#url
  url: String
}

class Item18 {
  /// Name of this hub. Must be unique. https://www.home-assistant.io/integrations/modbus/#name
  name: String

  /// Type of modbus. https://www.home-assistant.io/integrations/modbus/#type
  type: "rtuovertcp"|"serial"|"tcp"|"udp"

  /// Time to delay sending messages in seconds after connecting. Some modbus devices need a delay of
  /// typically 1-2 seconds after connection is established to prepare the communication. If a device
  /// does not respond to messages after connecting, then try this parameter. Remark: solely affect the
  /// first message. https://www.home-assistant.io/integrations/modbus/#delay
  delay: Int?

  /// Time to wait in milliseconds between requests.
  /// https://www.home-assistant.io/integrations/modbus/#message_wait_milliseconds
  message_wait_milliseconds: Int?

  /// Timeout while waiting for a response in seconds.
  /// https://www.home-assistant.io/integrations/modbus/#timeout
  timeout: Int?

  /// IP address or name of your modbus device, e.g., 192.168.1.1. Required for tcp, rtuovertcp, and udp
  /// types. https://www.home-assistant.io/integrations/modbus/#host
  host: String?

  /// Network port for the communication. Required for tcp, rtuovertcp, and udp types.
  /// https://www.home-assistant.io/integrations/modbus/#port
  port: Int?

  /// Serial port or USB device where your modbus device is connected to your Home Assistant host.
  /// Required for serial type. https://www.home-assistant.io/integrations/modbus/#port-1
  port_serial: String?

  /// Speed of the serial connection, higher speed gives better performance. Required for serial type.
  /// https://www.home-assistant.io/integrations/modbus/#baudrate
  baudrate: Int?

  /// Data size in bits of each byte. Required for serial type.
  /// https://www.home-assistant.io/integrations/modbus/#bytesize
  bytesize: Number(this == 5 || this == 6 || this == 7 || this == 8)?

  /// Method of the connection to modbus. Required for serial type.
  /// https://www.home-assistant.io/integrations/modbus/#method
  method: ("ascii"|"rtu")?

  /// Parity of the data bytes. Required for serial type.
  /// https://www.home-assistant.io/integrations/modbus/#parity
  parity: ("E"|"N"|"O")?

  /// Stopbits of the data bytes. Required for serial type.
  /// https://www.home-assistant.io/integrations/modbus/#stopbits
  stopbits: Number(this == 1 || this == 2)?

  /// A list of all binary sensors configured for this connection.
  /// https://www.home-assistant.io/integrations/modbus/#binary_sensors
  binary_sensors: (BinarySensorItem|Listing<BinarySensorItem>)?

  /// A list of all climate entities in this modbus instance.
  /// https://www.home-assistant.io/integrations/modbus/#climates
  climates: (ClimateItem|Listing<ClimateItem>)?

  /// A list of all cover entities configured for this connection.
  /// https://www.home-assistant.io/integrations/modbus/#covers
  covers: (CoverItem|Listing<CoverItem>)?

  /// A list of all fan entities in this modbus instance.
  /// https://www.home-assistant.io/integrations/modbus/#fans
  fans: (FanItem|Listing<FanItem>)?

  /// A list of all light entities in this modbus instance.
  /// https://www.home-assistant.io/integrations/modbus/#lights
  lights: (LightItem|Listing<LightItem>)?

  /// A list of all sensors in this modbus instance.
  /// https://www.home-assistant.io/integrations/modbus/#sensors
  sensors: (SensorItem|Listing<SensorItem>)?

  /// A list of all switches in this modbus instance.
  /// https://www.home-assistant.io/integrations/modbus/#switches
  switches: (SwitchItem|Listing<SwitchItem>)?
}

class BinarySensorItem {
  /// The type/class to be used for the UI.
  /// https://www.home-assistant.io/integrations/modbus/#device_class
  device_class: (
    "battery"
    |"battery_charging"
    |"carbon_monoxide"
    |"cold"
    |"connectivity"
    |"door"
    |"garage_door"
    |"gas"
    |"heat"
    |"light"
    |"lock"
    |"moisture"
    |"motion"
    |"moving"
    |"occupancy"
    |"opening"
    |"plug"
    |"power"
    |"presence"
    |"problem"
    |"running"
    |"safety"
    |"smoke"
    |"sound"
    |"tamper"
    |"update"
    |"vibration"
    |"window")?

  /// Type of request discrete_input, coil, holding or input.
  /// https://www.home-assistant.io/integrations/modbus/#input_type
  input_type: ("coil"|"discrete_input"|"holding"|"input")?

  /// Generate count+1 binary sensors (master + slaves). Addresses are automatically incremented. The
  /// parameter simplifies configuration and provides a much better performance by not using count+1
  /// requests but a single request. https://www.home-assistant.io/integrations/modbus/#virtual_count
  virtual_count: Int?

  /// Identical to virtual_count. https://www.home-assistant.io/integrations/modbus/#slave_count
  slave_count: Int?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

class ClimateItem {
  /// Temperature unit: C or F. https://www.home-assistant.io/integrations/modbus/#temperature_unit
  temperature_unit: ("C"|"F")?

  /// Number of valid decimals for temperature.
  /// https://www.home-assistant.io/integrations/modbus/#precision
  precision: Int?

  /// Step size target temperature. https://www.home-assistant.io/integrations/modbus/#temp_step
  temp_step: Number?

  /// Maximum setpoint for target temperature.
  /// https://www.home-assistant.io/integrations/modbus/#max_temp
  max_temp: Int?

  /// Minimum setpoint for target temperature.
  /// https://www.home-assistant.io/integrations/modbus/#min_temp
  min_temp: Int?

  /// Number of registers to read to fetch the current temperature. Only valid for data_type: custom and
  /// data_type: string, for other data types count is automatically calculated.
  /// https://www.home-assistant.io/integrations/modbus/#count
  count: Int?

  /// Response representation when reading the current temperature register(s).
  /// https://www.home-assistant.io/integrations/modbus/#data_type
  data_type: ("custom"|"float16"|"float32"|"float64"|"int"|"int16"|"int32"|"int64"|"string"|"uint"|"uint16"|"uint32"|"uint64")?

  /// Modbus register type for current temperature.
  /// https://www.home-assistant.io/integrations/modbus/#input_type-1
  input_type: ("holding"|"input")?

  /// Final offset for current temperature (output = scale * value + offset).
  /// https://www.home-assistant.io/integrations/modbus/#offset
  offset: Number?

  /// Register address for target temperature (Setpoint). Using a list, it is possible to define one
  /// register for each of the available HVAC Modes.
  /// https://www.home-assistant.io/integrations/modbus/#target_temp_register
  target_temp_register: Listing<Number>|Number

  /// If true use write_registers for target temperature (target_temp_register), else use write_register.
  /// https://www.home-assistant.io/integrations/modbus/#target_temp_write_registers
  target_temp_write_registers: Boolean?

  /// Scale factor (output = scale * value + offset) for setting target temperature.
  /// https://www.home-assistant.io/integrations/modbus/#scale
  scale: Number?

  /// If data_type: custom is specified a double-quoted Python struct is expected, to format the string
  /// to unpack the value. See Python documentation for details. Example: >i.
  /// https://www.home-assistant.io/integrations/modbus/#structure
  structure: String?

  /// Swap the order of bytes/words, not valid with custom and datatype: string when setting target
  /// temperature. https://www.home-assistant.io/integrations/modbus/#swap
  swap: ("byte"|"word"|"word_byte")?

  /// Configuration of register for HVAC action.
  /// https://www.home-assistant.io/integrations/modbus/#hvac_action_register
  hvac_action_register: HvacActionRegister?

  /// Configuration of register for HVAC mode.
  /// https://www.home-assistant.io/integrations/modbus/#hvac_mode_register
  hvac_mode_register: HvacModeRegister?

  /// Configuration of register for Fan mode.
  /// https://www.home-assistant.io/integrations/modbus/#fan_mode_register
  fan_mode_register: FanModeRegister?

  /// Address of On/Off state. Only use this setting if your On/Off state is not handled as a HVAC mode.
  /// When zero is read from this coil, the HVAC state is set to Off, otherwise the hvac_mode_register
  /// dictates the state of the HVAC. If no such coil is defined, it defaults to Auto. When the HVAC mode
  /// is set to Off, the value 0 is written to the coil, otherwise the value 1 is written. Cannot be used
  /// with hvac_onoff_register. https://www.home-assistant.io/integrations/modbus/#hvac_onoff_coil
  hvac_onoff_coil: Int?

  /// Address of On/Off state. Only use this setting if your On/Off state is not handled as a HVAC mode.
  /// When zero is read from this register, the HVAC state is set to Off, otherwise the
  /// hvac_mode_register dictates the state of the HVAC. If no such register is defined, it defaults to
  /// Auto. When the HVAC mode is set to Off, the value 0 is written to the register, otherwise the value
  /// 1 is written. https://www.home-assistant.io/integrations/modbus/#hvac_onoff_register
  hvac_onoff_register: Int?

  /// The value that will be written to the hvac_onoff_register to turn the HVAC system on. If not
  /// specified, the default value is 1. https://www.home-assistant.io/integrations/modbus/#hvac_on_value
  hvac_on_value: Int?

  /// The value that will be written to the hvac_onoff_register to turn the HVAC system off. If not
  /// specified, the default value is 0.
  /// https://www.home-assistant.io/integrations/modbus/#hvac_off_value
  hvac_off_value: Int?

  /// Configuration of the register for swing mode.
  /// https://www.home-assistant.io/integrations/modbus/#swing_mode_register
  swing_mode_register: SwingModeRegister?

  /// If true use write_registers to control the On/Off state (hvac_onoff_register), else use
  /// write_register. Note that it is not yet possible to control the On/Off state via a coil.
  /// https://www.home-assistant.io/integrations/modbus/#write_registers-1
  write_registers: Boolean?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

/// Configuration of register for HVAC action.
/// https://www.home-assistant.io/integrations/modbus/#hvac_action_register
class HvacActionRegister {
  /// Address of HVAC action register. https://www.home-assistant.io/integrations/modbus/#address-1
  address: Int

  /// Type of register, either holding or input.
  /// https://www.home-assistant.io/integrations/modbus/#input_type-2
  input_type: ("holding"|"input")?

  /// Mapping between the register values and HVAC actions.
  /// https://www.home-assistant.io/integrations/modbus/#values
  values: Values
}

/// Mapping between the register values and HVAC actions.
/// https://www.home-assistant.io/integrations/modbus/#values
class Values {
  /// Value corresponding to HVAC Off action.
  /// https://www.home-assistant.io/integrations/modbus/#action_off
  action_off: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Cooling action.
  /// https://www.home-assistant.io/integrations/modbus/#action_cooling
  action_cooling: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Defrosting action.
  /// https://www.home-assistant.io/integrations/modbus/#action_defrosting
  action_defrosting: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Drying action.
  /// https://www.home-assistant.io/integrations/modbus/#action_drying
  action_drying: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Fan action.
  /// https://www.home-assistant.io/integrations/modbus/#action_fan
  action_fan: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Heating action.
  /// https://www.home-assistant.io/integrations/modbus/#action_heating
  action_heating: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Idle action.
  /// https://www.home-assistant.io/integrations/modbus/#action_idle
  action_idle: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Preheating action.
  /// https://www.home-assistant.io/integrations/modbus/#action_preheating
  action_preheating: (Listing<Number>|Number)?
}

/// Configuration of register for HVAC mode.
/// https://www.home-assistant.io/integrations/modbus/#hvac_mode_register
class HvacModeRegister {
  /// Address of HVAC mode register. https://www.home-assistant.io/integrations/modbus/#address-2
  address: Int

  /// Request type for setting HVAC mode, use write_registers if true else write_register. If more than
  /// one value is specified for a specific mode, only the first one is used for writing to the register.
  /// https://www.home-assistant.io/integrations/modbus/#write_registers
  write_registers: Boolean?

  /// Mapping between the register values and HVAC modes.
  /// https://www.home-assistant.io/integrations/modbus/#values-1
  values: HvacModeRegisterValues
}

/// Mapping between the register values and HVAC modes.
/// https://www.home-assistant.io/integrations/modbus/#values-1
class HvacModeRegisterValues {
  /// Value corresponding to HVAC Off mode. If the On/Off state handled on a different address and/or
  /// register the state_off state should be omitted from your configuration.
  /// https://www.home-assistant.io/integrations/modbus/#state_off
  state_off: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Heat mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_heat
  state_heat: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Cool mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_cool
  state_cool: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Auto mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_auto
  state_auto: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Dry mode. https://www.home-assistant.io/integrations/modbus/#state_dry
  state_dry: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Fan only mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_only
  state_fan_only: (Listing<Number>|Number)?

  /// Value corresponding to HVAC Heat/Cool mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_heat_cool
  state_heat_cool: (Listing<Number>|Number)?
}

/// Configuration of register for Fan mode.
/// https://www.home-assistant.io/integrations/modbus/#fan_mode_register
class FanModeRegister {
  /// Address of Fan mode register. (int to call write_register, list of 1 int to call write_registers).
  /// https://www.home-assistant.io/integrations/modbus/#address-3
  address: Listing<Number>|Number

  /// Mapping between the register values and Fan modes. This is typically used to control one of: Speed,
  /// Direction or On/Off state. https://www.home-assistant.io/integrations/modbus/#values-2
  values: FanModeRegisterValues
}

/// Mapping between the register values and Fan modes. This is typically used to control one of: Speed,
/// Direction or On/Off state. https://www.home-assistant.io/integrations/modbus/#values-2
class FanModeRegisterValues {
  /// Value corresponding to Fan On mode. https://www.home-assistant.io/integrations/modbus/#state_fan_on
  state_fan_on: Int?

  /// Value corresponding to Fan Off mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_off
  state_fan_off: Int?

  /// Value corresponding to Fan Low mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_low
  state_fan_low: Int?

  /// Value corresponding to Fan Medium mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_medium
  state_fan_medium: Int?

  /// Value corresponding to Fan High mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_high
  state_fan_high: Int?

  /// Value corresponding to Fan Auto mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_auto
  state_fan_auto: Int?

  /// Value corresponding to Fan Top mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_top
  state_fan_top: Int?

  /// Value corresponding to Fan Middle mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_middle
  state_fan_middle: Int?

  /// Value corresponding to Fan Focus mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_focus
  state_fan_focus: Int?

  /// Value corresponding to Fan Diffuse mode.
  /// https://www.home-assistant.io/integrations/modbus/#state_fan_diffuse
  state_fan_diffuse: Int?
}

/// Configuration of the register for swing mode.
/// https://www.home-assistant.io/integrations/modbus/#swing_mode_register
class SwingModeRegister {
  /// Address of swing mode register. (int to call write_register, list of 1 int to call
  /// write_registers). - Reading done through holding register.
  /// https://www.home-assistant.io/integrations/modbus/#address-4
  address: Listing<Number>|Number

  /// Mapping between the register values and swing modes.
  /// https://www.home-assistant.io/integrations/modbus/#values-3
  values: SwingModeRegisterValues
}

/// Mapping between the register values and swing modes.
/// https://www.home-assistant.io/integrations/modbus/#values-3
class SwingModeRegisterValues {
  /// Value corresponding to swing mode on.
  /// https://www.home-assistant.io/integrations/modbus/#swing_mode_state_on
  swing_mode_state_on: Int?

  /// Value corresponding to swing mode off.
  /// https://www.home-assistant.io/integrations/modbus/#swing_mode_state_off
  swing_mode_state_off: Int?

  /// Value corresponding to swing mode horizontal.
  /// https://www.home-assistant.io/integrations/modbus/#swing_mode_state_horizontal
  swing_mode_state_horizontal: Int?

  /// Value corresponding to swing mode vertical.
  /// https://www.home-assistant.io/integrations/modbus/#swing_mode_state_vertical
  swing_mode_state_vertical: Int?

  /// Value corresponding to Swing mode both.
  /// https://www.home-assistant.io/integrations/modbus/#swing_mode_state_both
  swing_mode_state_both: Int?
}

class CoverItem {
  /// The type/class of the cover to set the icon in the frontend.
  /// https://www.home-assistant.io/integrations/modbus/#device_class-1
  device_class: ("awning"|"blind"|"curtain"|"damper"|"door"|"garage"|"gate"|"shade"|"shutter"|"window")?

  /// Cover register type. https://www.home-assistant.io/integrations/modbus/#input_type-3
  input_type: ("holding"|"input")?

  /// A value in status_register or register representing an open cover. If your configuration uses the
  /// register attribute, this value will be written into the holding register to open the cover.
  /// https://www.home-assistant.io/integrations/modbus/#state_open
  state_open: Int?

  /// A value in status_register or register representing a closed cover. If your configuration uses the
  /// register attribute, this value will be written into the holding register to close the cover.
  /// https://www.home-assistant.io/integrations/modbus/#state_closed
  state_closed: Int?

  /// A value in status_register or register representing an opening cover. Note that this state should
  /// be also supported on your connected Modbus cover. If it won't report the state, this state won't be
  /// detected. https://www.home-assistant.io/integrations/modbus/#state_opening
  state_opening: Int?

  /// A value in status_register or register representing a closing cover. Note that this state should be
  /// also supported on your connected Modbus cover. If it will not report the state, this state won't be
  /// detected. https://www.home-assistant.io/integrations/modbus/#state_closing
  state_closing: Int?

  /// Address of register, from which all the cover states will be read. If you specified register
  /// attribute, and not status_register attribute, your main register will also be used as a status
  /// register. https://www.home-assistant.io/integrations/modbus/#status_register
  status_register: Int?

  /// Cover status register type (holding, input), default holding.
  /// https://www.home-assistant.io/integrations/modbus/#status_register_type
  status_register_type: ("holding"|"input")?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

class FanItem {
  /// Value to write to turn on the fan. https://www.home-assistant.io/integrations/modbus/#command_on
  command_on: Int?

  /// Value to write to turn off the fan. https://www.home-assistant.io/integrations/modbus/#command_off
  command_off: Int?

  /// Type of write request. https://www.home-assistant.io/integrations/modbus/#write_type
  write_type: ("coil"|"coils"|"holding"|"holdings")?

  /// Read from Modbus device to verify fan. If used without attributes, it uses the toggle register
  /// configuration. If omitted, no verification is done, but the state of the fan is set with each
  /// toggle. https://www.home-assistant.io/integrations/modbus/#verify
  verify: Verify?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

/// Read from Modbus device to verify fan. If used without attributes, it uses the toggle register
/// configuration. If omitted, no verification is done, but the state of the fan is set with each toggle.
/// https://www.home-assistant.io/integrations/modbus/#verify
class Verify {
  /// Address to read from. https://www.home-assistant.io/integrations/modbus/#address-5
  address: Int?

  /// Delay between write and verify. https://www.home-assistant.io/integrations/modbus/#delay-1
  delay: Int?

  /// Type of address. https://www.home-assistant.io/integrations/modbus/#input_type-4
  input_type: ("coil"|"discrete"|"holding"|"input")?

  /// Value when the fan is on. https://www.home-assistant.io/integrations/modbus/#state_on
  state_on: Int?

  /// Value when the fan is off. https://www.home-assistant.io/integrations/modbus/#state_off-1
  state_off: Int?
}

class LightItem {
  /// Value to write to turn on the light.
  /// https://www.home-assistant.io/integrations/modbus/#command_on-1
  command_on: Int?

  /// Value to write to turn off the light.
  /// https://www.home-assistant.io/integrations/modbus/#command_off-1
  command_off: Int?

  /// Type of write request. https://www.home-assistant.io/integrations/modbus/#write_type-1
  write_type: ("coil"|"coils"|"holding"|"holdings")?

  /// Read from Modbus device to verify the light. If used without attributes, it uses the toggle
  /// register configuration. If omitted no verification, is done, but the state of the light is set with
  /// each toggle. https://www.home-assistant.io/integrations/modbus/#verify-1
  verify: LightItemVerify?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

/// Read from Modbus device to verify the light. If used without attributes, it uses the toggle register
/// configuration. If omitted no verification, is done, but the state of the light is set with each
/// toggle. https://www.home-assistant.io/integrations/modbus/#verify-1
class LightItemVerify {
  /// Address to read from. https://www.home-assistant.io/integrations/modbus/#address-6
  address: Int?

  /// Delay between write and verify. https://www.home-assistant.io/integrations/modbus/#delay-2
  delay: Int?

  /// Type of address (holding/coil/discrete/input).
  /// https://www.home-assistant.io/integrations/modbus/#input_type-5
  input_type: ("coil"|"discrete"|"holding"|"input")?

  /// Value when the light is on. https://www.home-assistant.io/integrations/modbus/#state_on-1
  state_on: Int?

  /// Value when the light is off. https://www.home-assistant.io/integrations/modbus/#state_off-2
  state_off: Int?
}

class SensorItem {
  /// Number of registers to read. Only valid for data_type: custom and data_type: string, for other data
  /// types count is automatically calculated. https://www.home-assistant.io/integrations/modbus/#count-1
  count: Int?

  /// Response representation. https://www.home-assistant.io/integrations/modbus/#data_type-1
  data_type: ("custom"|"float16"|"float32"|"float64"|"int"|"int16"|"int32"|"int64"|"string"|"uint"|"uint16"|"uint32"|"uint64")?

  /// The type/class of the sensor to set the icon in the frontend.
  /// https://www.home-assistant.io/integrations/modbus/#device_class-2
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"battery"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"conductivity"
    |"current"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"gas"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"moisture"
    |"monetary"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"ozone"
    |"ph"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"pressure"
    |"reactive_power"
    |"signal_strength"
    |"sound_pressure"
    |"speed"
    |"sulphur_dioxide"
    |"temperature"
    |"timestamp"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed")?

  /// Modbus register type for sensor. https://www.home-assistant.io/integrations/modbus/#input_type-6
  input_type: ("holding"|"input")?

  /// The minimum allowed value of a sensor. If value < min_value –> min_value. Can be float or integer.
  /// https://www.home-assistant.io/integrations/modbus/#min_value
  min_value: Number?

  /// The maximum allowed value of a sensor. If value > max_value –> max_value. Can be float or integer.
  /// https://www.home-assistant.io/integrations/modbus/#max_value
  max_value: Number?

  /// If a Modbus sensor has a defined NaN value, this value can be set as a hex string starting with 0x
  /// containing one or more bytes (for example, 0xFFFF or 0x80000000) or provided as an integer
  /// directly. If triggered, the sensor becomes unavailable. Please note that the hex to int conversion
  /// for nan_value does currently not obey home-assistants Modbus encoding using the data_type,
  /// structure, or swap arguments. https://www.home-assistant.io/integrations/modbus/#nan_value
  nan_value: (String|Number)?

  /// Suppress values close to zero. If -zero_suppress <= value <= +zero_suppress –> 0. Can be float or
  /// integer. https://www.home-assistant.io/integrations/modbus/#zero_suppress
  zero_suppress: Number?

  /// Final offset (output = scale * value + offset).
  /// https://www.home-assistant.io/integrations/modbus/#offset-1
  offset: Number?

  /// Number of valid decimals. https://www.home-assistant.io/integrations/modbus/#precision-1
  precision: Int?

  /// Scale factor (output = scale * value + offset).
  /// https://www.home-assistant.io/integrations/modbus/#scale-1
  scale: Number?

  /// Identical to virtual_count. https://www.home-assistant.io/integrations/modbus/#slave_count-1
  slave_count: Int?

  /// Generates x-1 slave sensors, allowing read of multiple registers with a single read message.
  /// https://www.home-assistant.io/integrations/modbus/#virtual_count-1
  virtual_count: Int?

  /// The state_class of the sensor. https://www.home-assistant.io/integrations/modbus/#state_class
  state_class: ("measurement"|"total"|"total_increasing")?

  /// If data_type: custom is specified a double-quoted Python struct is expected, to format the string
  /// to unpack the value. See Python documentation for details. Example: >i.
  /// https://www.home-assistant.io/integrations/modbus/#structure-1
  structure: String?

  /// Swap the order of bytes/words, not valid with custom and datatype: string.
  /// https://www.home-assistant.io/integrations/modbus/#swap-1
  swap: ("byte"|"word"|"word_byte")?

  /// Unit to attach to value. https://www.home-assistant.io/integrations/modbus/#unit_of_measurement
  unit_of_measurement: String?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

class SwitchItem {
  /// Value to write to turn on the switch.
  /// https://www.home-assistant.io/integrations/modbus/#command_on-2
  command_on: Int?

  /// Value to write to turn off the switch.
  /// https://www.home-assistant.io/integrations/modbus/#command_off-2
  command_off: Int?

  /// Type of write request. https://www.home-assistant.io/integrations/modbus/#write_type-2
  write_type: ("coil"|"coils"|"holding"|"holdings")?

  /// Read from Modbus device to verify switch. If used without attributes, it uses the toggle register
  /// configuration. If omitted, no verification is done, but the state of the switch is set with each
  /// toggle. https://www.home-assistant.io/integrations/modbus/#verify-2
  verify: SwitchItemVerify?

  /// Name of the entity which must be unique within the entity type.
  /// https://www.home-assistant.io/integrations/modbus/#name-1
  name: String

  /// Address of coil/register. Note that this can also be specified in Hex. For example: 0x789A
  /// https://www.home-assistant.io/integrations/modbus/#address
  address: String|Number

  /// Update interval in seconds. scan_interval = 0 for no polling. Entities are read shortly after
  /// startup and then according to scan_interval. Remark, when restarting HA the last known value is
  /// restored. https://www.home-assistant.io/integrations/modbus/#scan_interval
  scan_interval: Int?

  /// Id of the device. Used to address multiple devices on a rs485 bus or devices connected to a modbus
  /// repeater. 0 is the broadcast id. https://www.home-assistant.io/integrations/modbus/#device_address
  device_address: Int?

  /// Identical to device_address. https://www.home-assistant.io/integrations/modbus/#slave
  slave: Int?

  /// ID that uniquely identifies this entity. Slaves will be given a unique_id of
  /// <<unique_id>>_<<slave_index>>. If two entities have the same unique ID, Home Assistant will raise
  /// an exception. https://www.home-assistant.io/integrations/modbus/#unique_id
  unique_id: String?
}

/// Read from Modbus device to verify switch. If used without attributes, it uses the toggle register
/// configuration. If omitted, no verification is done, but the state of the switch is set with each
/// toggle. https://www.home-assistant.io/integrations/modbus/#verify-2
class SwitchItemVerify {
  /// Address to read from. https://www.home-assistant.io/integrations/modbus/#address-7
  address: Int?

  /// Delay between write and verify. https://www.home-assistant.io/integrations/modbus/#delay-3
  delay: Int?

  /// Type of address. https://www.home-assistant.io/integrations/modbus/#input_type-7
  input_type: ("coil"|"discrete"|"holding"|"input")?

  /// Value(s) when switch is on. The value must be an integer or a list of integers.
  /// https://www.home-assistant.io/integrations/modbus/#state_on-2
  state_on: (Listing<Number>|Number)?

  /// Value(s) when switch is off. The value must be an integer or a list of integers.
  /// https://www.home-assistant.io/integrations/modbus/#state_off-3
  state_off: (Listing<Number>|Number)?
}

class Item19 {
  /// The icon that shows in the sidebar/menu.
  /// https://www.home-assistant.io/integrations/panel_iframe/#icon
  icon: String?

  /// If admin access is required to see this iframe.
  /// https://www.home-assistant.io/integrations/panel_iframe/#require_admin
  require_admin: Boolean?

  /// Friendly title for the panel. Will be used in the sidebar/menu.
  /// https://www.home-assistant.io/integrations/panel_iframe/#title
  title: String

  /// The absolute URL or relative URL with an absolute path to open.
  /// https://www.home-assistant.io/integrations/panel_iframe/#url
  url: Uri
}

class ScriptItem {
  /// The sequence of actions to be performed in the script.
  /// https://www.home-assistant.io/integrations/script/#sequence
  sequence: 
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Alias will be used to generate an entity_id from.
  /// https://www.home-assistant.io/integrations/script/#alias
  alias: String?

  /// Description of the automation. This is helpful to know what the automation does.
  /// https://www.home-assistant.io/integrations/script/#description
  description: String?

  /// A list of variables that can be passed into this script when calling it. They become available
  /// within the templates in that script.
  /// https://www.home-assistant.io/integrations/script/#passing-variables-to-scripts
  fields: Mapping<String, Field>?

  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/script/#icon
  icon: String?

  /// Controls maximum number of runs executing and/or queued up to run at a time. Only valid with modes
  /// queued and parallel. https://www.home-assistant.io/integrations/script/#max
  max: Int?

  /// Controls what happens when script is invoked while it is still running from one or more previous
  /// invocations. https://www.home-assistant.io/integrations/script/#script-modes
  mode: ("parallel"|"queued"|"restart"|"single")?

  /// When `max` is exceeded (which is effectively 1 for `single` mode) a log message will be emitted to
  /// indicate this has happened. This controls the severity level of that log message
  /// https://www.home-assistant.io/integrations/script/#script-modes
  max_exceeded: ("critical"|"debug"|"error"|"fatal"|"info"|"notset"|"silent"|"warn"|"warning")?

  /// Controls tracing settings of this script.
  /// https://www.home-assistant.io/docs/automation/troubleshooting
  `trace`: BlueprintItem1Trace?

  /// Variables that will be available inside your templates.
  /// https://www.home-assistant.io/integrations/script/#variables
  variables: Data?
}

/// Controls tracing settings of this script.
/// https://www.home-assistant.io/docs/automation/troubleshooting
class BlueprintItem1Trace {
  /// The number of automation traces tha are stored for this script.
  stored_traces: Int(isPositive)?
}

class Field {
  /// Marks if this script parameter is an advanced usage parameter.
  /// https://www.home-assistant.io/integrations/script/#advanced
  advanced: Boolean?

  /// The default value of this parameter field.
  /// https://www.home-assistant.io/integrations/script/#default
  default: Any?

  /// Description of this script parameter.
  /// https://www.home-assistant.io/integrations/script/#description
  description: String?

  /// An example value for this script paramter.
  /// https://www.home-assistant.io/integrations/script/#example
  example: String?

  /// The name of the script parameter field. https://www.home-assistant.io/integrations/script/#name
  name: String?

  /// Marks if this script parameter is an advanced usage parameter.
  /// https://www.home-assistant.io/integrations/script/#advanced
  required: Boolean?

  /// The UI selector to use for this script parameter field.
  /// https://www.home-assistant.io/integrations/script/#selector
  selector: (
    ActionSelector
    |AddonSelector
    |AreaSelector
    |AssistPipelineSelector
    |AttributeSelector
    |BackupLocationSelector
    |BooleanSelector
    |ColorRGBSelector
    |ColorTempSelector
    |ConditionSelector
    |ConfigEntrySelector
    |ConstantSelector
    |ConversationAgentSelector
    |CountrySelector
    |DateSelector
    |DateTimeSelector
    |DeviceSelector
    |DurationSelector
    |EntitySelector
    |FileSelector
    |FloorSelector
    |IconSelector
    |LabelSelector
    |LanguageSelector
    |LocationSelector
    |MediaSelector
    |NumberSelector
    |ObjectSelector
    |QRCodeSelector
    |SelectSelector
    |StateSelector
    |TargetSelector
    |TemplateSelector
    |TextSelector
    |ThemeSelector
    |TimeSelector
    |TriggerSelector)?
}

class ActionSelector {
  /// The action selector allows the user to input one or more sequences of actions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#action-selector
  action: `Record<string,never>`|Any
}

class AddonSelector {
  /// The add-on selector allows the user to input an add-on slug. On the user interface, it will list
  /// all installed add-ons and use the slug of the selected add-on.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#add-on-selector
  addon: `Record<string,never>`|Any
}

class AreaSelector {
  /// The area selector shows an area finder that can pick a single area. The value of the input will be
  /// the area ID of the user-selected area.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#area-selector
  area: AreaAlternate0|Any
}

class AreaAlternate0 {
  /// When device options are provided, the list of areas is filtered by areas that at least provide one
  /// device that matches the given conditions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#area-selector
  device: (DeviceSelectorFilter|Listing<DeviceSelectorFilter>)?

  /// When entity options are provided, the list of areas is filtered by areas that at least provide one
  /// entity that matches the given conditions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#area-selector
  entity: (EntitySelectorFilter|Listing<EntitySelectorFilter>)?

  /// Allows selecting multiple areas. If set to `true`, the resulting value of this selector will be a
  /// list instead of a single string value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#area-selector
  multiple: Boolean?
}

class DeviceSelectorFilter {
  /// Can be set to an integration domain. Limits the list of devices to devices provided by the set
  /// integration domain. https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  integration: String(matches(Regex(#"^(?!.+__)(?!_)[\da-z_]+(?<!_)$"#)))?

  /// When set, it limits the list of devices to devices provided by the set manufacturer name.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  manufacturer: String?

  /// When set, it limits the list of devices to devices that have the set model.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  model: String?

  /// When set, the list of devices is limited to devices that have the set model ID.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  model_id: String?
}

class EntitySelectorFilter {
  /// Can be set to an integration domain. Limits the list of devices that provide entities by the set
  /// integration domain. https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  integration: String(matches(Regex(#"^(?!.+__)(?!_)[\da-z_]+(?<!_)$"#)))?

  /// Limits the list of devices that provide entities of a certain domain.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  domain: (Listing<String>|String)?

  /// Limits the list of entities to entities that have a certain device class.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  device_class: (Listing<DeviceClasses>|DeviceClasses)?

  /// Limits the list of entities to entities that have a certain supported feature.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  supported_features: (Listing<SupportedFeature>|SupportedFeature)?
}

class AssistPipelineSelector {
  /// The assist pipeline selector shows all available assist pipelines (assistants) of which one can be
  /// selected. https://www.home-assistant.io/docs/blueprint/selectors/#assist-pipeline-selector
  assist_pipeline: `Record<string,never>`|Any
}

class AttributeSelector {
  /// The attributes selector shows a list of state attributes from a provided entity of which one can be
  /// selected. https://www.home-assistant.io/docs/blueprint/selectors/#attribute-selector
  attribute: Attribute
}

/// The attributes selector shows a list of state attributes from a provided entity of which one can be
/// selected. https://www.home-assistant.io/docs/blueprint/selectors/#attribute-selector
class Attribute {
  /// The entity ID of which an state attribute can be selected from.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#attribute-selector
  entity_id: String(matches(Regex(#"^.*\..*$"#)))

  /// List of attribute names to hide from the UI. Hidden attributes can still be provided manually.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#attribute-selector
  hide_attributes: Listing<String>?
}

class BackupLocationSelector {
  /// The backup location selector shows a list of places a backup could go, depending on what you have
  /// configured in storage.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#backup-location-selector
  backup_location: `Record<string,never>`|Any
}

class BooleanSelector {
  /// The boolean selector shows a toggle that allows the user to turn on or off the selected option.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#boolean-selector
  boolean: `Record<string,never>`|Any
}

class ColorRGBSelector {
  /// The RGB color selector allows the user to select a color from a color picker from the user
  /// interface, and returns the RGB color value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#rgb-color-selector
  color_rgb: `Record<string,never>`|Any
}

class ColorTempSelector {
  /// The color temperature selector allows you to select a color temperature from a gradient using a
  /// slider. https://www.home-assistant.io/docs/blueprint/selectors/#color-temperature-selector
  color_temp: ColorTempAlternate0|Any
}

class ColorTempAlternate0 {
  /// The chosen unit for the color temperature. This can be either `kelvin` or `mired`. `mired` is the
  /// default for historical reasons.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#color-temperature-selector
  unit: ("kelvin"|"mired")?

  /// The minimum color temperature in the chosen unit.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#color-temperature-selector
  min: Number?

  /// The maximum color temperature in the chosen unit.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#color-temperature-selector
  max: Number?

  /// The minimum color temperature in mireds (legacy).
  /// https://www.home-assistant.io/docs/blueprint/selectors/#color-temperature-selector
  min_mireds: Int(isPositive)?

  /// The maximum color temperature in mireds (legacy).
  /// https://www.home-assistant.io/docs/blueprint/selectors/#color-temperature-selector
  max_mireds: Int(isPositive)?
}

class ConditionSelector {
  /// The condition selector allows the user to input one or more conditions..
  /// https://www.home-assistant.io/docs/blueprint/selectors/#condition-selector
  condition: `Record<string,never>`|Any
}

class ConfigEntrySelector {
  /// The config entry selector allows the user to select an integration configuration entry. The
  /// selector returns the entry ID of the selected integration configuration entry.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#config-entry-selector
  config_entry: ConfigEntryAlternate0|Any
}

class ConfigEntryAlternate0 {
  /// Can be set to an integration domain. Limits the list of config entries provided by the set
  /// integration domain. https://www.home-assistant.io/docs/blueprint/selectors/#config-entry-selector
  integration: String(matches(Regex(#"^(?!.+__)(?!_)[\da-z_]+(?<!_)$"#)))?
}

class ConstantSelector {
  /// The constant selector shows a toggle that allows the user to enable the selected option. This is
  /// similar to the boolean selector, the difference is that the constant selector has no value when
  /// it's not enabled. https://www.home-assistant.io/docs/blueprint/selectors/#constant-selector
  constant: Constant
}

/// The constant selector shows a toggle that allows the user to enable the selected option. This is
/// similar to the boolean selector, the difference is that the constant selector has no value when it's
/// not enabled. https://www.home-assistant.io/docs/blueprint/selectors/#constant-selector
class Constant {
  /// The label that is shown in the UI for this constant.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#constant-selector
  label: String?

  /// Translation key for internationalization support.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#constant-selector
  translation_key: String?

  /// Value that is returned when this constant is enabled by the user
  /// https://www.home-assistant.io/docs/blueprint/selectors/#constant-selector
  value: String|Number|Boolean
}

class ConversationAgentSelector {
  /// The conversation agent selector allows picking a conversation agent.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#conversation-agent-selector
  conversation_agent: ConversationAgentAlternate0|Any
}

class ConversationAgentAlternate0 {
  /// Limits the list of conversation agents to those supporting the specified language.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#conversation-agent-selector
  language: String?
}

class CountrySelector {
  /// The country selector allows a user to pick a country from a list of countries.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#country-selector
  country: CountryAlternate0|Any
}

class CountryAlternate0 {
  /// A list of countries to pick from, this should be ISO 3166 country codes.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#country-selector
  countries: Listing<String>?

  /// Should the options be sorted by name, if set to true, the order of the provided countries is kept.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#country-selector
  no_sort: Boolean?
}

class DateSelector {
  /// The date selector shows a date input that allows the user to specify a date.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#date-selector
  date: `Record<string,never>`|Any
}

class DateTimeSelector {
  /// The date selector shows a date and time input that allows the user to specify a date with a
  /// specific time. https://www.home-assistant.io/docs/blueprint/selectors/#date--time-selector
  datetime: `Record<string,never>`|Any
}

class DeviceSelector {
  /// The device selector shows a device finder that can pick a single device.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  device: DeviceAlternate0|Any
}

class DeviceAlternate0 {
  /// When entity options are provided, the list of devices is filtered by devices that at least provide
  /// one entity that matches the given conditions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  entity: (EntitySelectorFilter|Listing<EntitySelectorFilter>)?

  /// When filter options are provided, the list of devices is filtered by devices that at least provide
  /// one entity that matches the given conditions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  filter: (DeviceSelectorFilter|Listing<DeviceSelectorFilter>)?

  /// You can use filter parameter to filter devices".
  integration: Listing<Any>?

  /// You can use filter parameter to filter devices".
  manufacturer: Listing<Any>?

  /// You can use filter parameter to filter devices".
  model: Listing<Any>?

  /// Allows selecting multiple devices. If set to `true`, the resulting value of this selector will be a
  /// list instead of a single string value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#device-selector
  multiple: Boolean?
}

class DurationSelector {
  /// The duration select allow the user to select a time duration. This can be helpful for, e.g., delays
  /// or offsets. https://www.home-assistant.io/docs/blueprint/selectors/#duration-selector
  duration: DurationAlternate0|Any
}

class DurationAlternate0 {
  /// When true, the duration selector will allow selecting days.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#duration-selector
  enable_day: Boolean?

  /// When true, the duration selector will allow selecting milliseconds.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#duration-selector
  enable_millisecond: Boolean?

  /// Allow negative durations. Will default to False in HA Core 2025.6.0.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#duration-selector
  allow_negative: Boolean?
}

class EntitySelector {
  /// The entity selector shows an entity finder that can pick a single entity.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  entity: EntityAlternate0|Any
}

class EntityAlternate0 {
  /// List of entity IDs to exclude from the selectable list.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  exclude_entities: Listing<String(matches(Regex(#"^.*\..*$"#)))>?

  /// List of entity IDs to limit the selectable list to.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  include_entities: Listing<String(matches(Regex(#"^.*\..*$"#)))>?

  /// You can use filter parameter to filter entities".
  integration: Listing<Any>?

  /// You can use filter parameter to filter entities".
  domain: Listing<Any>?

  /// You can use filter parameter to filter entities".
  device_class: Listing<Any>?

  /// When filter options are provided, the entities are limited by entities that at least match the
  /// given conditions. https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  filter: (EntitySelectorFilter|Listing<EntitySelectorFilter>)?

  /// Allows selecting multiple devices. If set to `true`, the resulting value of this selector will be a
  /// list instead of a single string value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#entity-selector
  multiple: Boolean?
}

class FileSelector {
  /// The file selector allows the user to select a file.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#file-selector
  file: File
}

/// The file selector allows the user to select a file.
/// https://www.home-assistant.io/docs/blueprint/selectors/#file-selector
class File {
  /// File type filter using HTML input accept attribute format.
  /// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept
  /// https://www.home-assistant.io/docs/blueprint/selectors/#file-selector
  accept: String
}

class FloorSelector {
  /// The icon selector shows an icon picker that allows the user to select an icon.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#floor-selector
  floor: FloorAlternate0|Any
}

class FloorAlternate0 {
  /// When device options are provided, the list of floors is filtered by floors that have at least one
  /// device matching the given conditions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#floor-selector
  device: (DeviceSelectorFilter|Listing<DeviceSelectorFilter>)?

  /// When entity options are provided, the list only includes floors that at least have one entity that
  /// matches the given conditions.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#floor-selector
  entity: (EntitySelectorFilter|Listing<EntitySelectorFilter>)?

  /// Allows selecting multiple floors. If set to true, the resulting value of this selector will be a
  /// list instead of a single string value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#floor-selector
  multiple: Boolean?
}

class IconSelector {
  /// The icon selector shows an icon picker that allows the user to select an icon.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#icon-selector
  icon: IconAlternate0|Any
}

class IconAlternate0 {
  /// Placeholder icon to show, when no icon is selected.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#icon-selector
  placeholder: String?
}

class LabelSelector {
  /// The label selector shows a label finder that can pick labels.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#label-selector
  label: LabelAlternate0|Any
}

class LabelAlternate0 {
  /// Allows selecting multiple labels. If set to true, the resulting value of this selector will be a
  /// list instead of a single string value
  /// https://www.home-assistant.io/docs/blueprint/selectors/#label-selector
  multiple: Boolean?
}

class LanguageSelector {
  /// The language selector allows a user to pick a language from a list of languages.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#language-selector
  language: LanguageAlternate0|Any
}

class LanguageAlternate0 {
  /// A list of languages to pick from, this should be RFC 5646 languages codes.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#language-selector
  languages: Listing<String>?

  /// Should the name of the languages be shown in the language of the user, or in the language itself.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#language-selector
  native_name: Boolean?

  /// Should the options be sorted by name, if set to true, the order of the provided languages is kept.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#language-selector
  no_sort: Boolean?
}

class LocationSelector {
  /// The icon selector shows an icon picker that allows the user to select an icon.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#location-selector
  location: LocationAlternate0|Any
}

class LocationAlternate0 {
  /// An optional icon to show on the map.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#location-selector
  icon: String?

  /// Allow selecting the radius of the location. If enabled, the radius will be returned in meters.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#location-selector
  radius: Boolean?
}

class MediaSelector {
  /// The media selector is a powerful selector that allows a user to easily select media to play on a
  /// media device. https://www.home-assistant.io/docs/blueprint/selectors/#media-selector
  media: `Record<string,never>`|Any
}

class NumberSelector {
  /// The number selector shows either a number input or a slider input, that allows the user to specify
  /// a numeric value. https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
  number: Number
}

/// The number selector shows either a number input or a slider input, that allows the user to specify a
/// numeric value. https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
class Number {
  /// The maximum user-settable number value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
  max: Number

  /// The minimal user-settable number value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
  min: Number

  /// This can be either box or slider mode.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
  mode: ("box"|"slider")?

  /// The step value of the number value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
  step: Number?

  /// Unit of measurement in which the number value is expressed in.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#number-selector
  unit_of_measurement: String?
}

class ObjectSelector {
  /// The object selector can be used to input arbitrary data in YAML form. This is useful for e.g. lists
  /// and dictionaries like service data.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#object-selector
  object: `Record<string,never>`|Any
}

class QRCodeSelector {
  /// The QR code selector shows a QR code.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#qr-code-selector
  qr_code: QrCode
}

/// The QR code selector shows a QR code.
/// https://www.home-assistant.io/docs/blueprint/selectors/#qr-code-selector
class QrCode {
  /// The data that should be represented in the QR code.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#qr-code-selector
  data: Any

  /// The scale factor to use, this will make the QR code bigger or smaller.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#qr-code-selector
  scale: Int(isPositive)?

  /// The error correction level of the QR code, with a higher error correction level the QR code can be
  /// scanned even when some pieces are missing.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#qr-code-selector
  error_correction_level: ("high"|"low"|"medium"|"quartile")?
}

class SelectSelector {
  /// The select selector shows a list of available options from which the user can choose.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  select: Select
}

/// The select selector shows a list of available options from which the user can choose.
/// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
class Select {
  /// Allows the user to enter and select a custom value (or multiple custom values in addition to the
  /// listed options if `multiple` is set to true).
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  custom_value: Boolean?

  /// This can be either `list` or `dropdown` mode. when not specificied, small lists (5 items or less),
  /// are displayed as radio buttons. When more items are added, a dropdown list is used.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  mode: ("dropdown"|"list")?

  /// Allows selecting multiple options. If set to `true`, the resulting value of this selector will be a
  /// list instead of a single string value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  multiple: Boolean?

  /// Display options in alphabetical order.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  sort: Boolean?

  /// Translation key for internationalization support.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  translation_key: String?

  /// List of options that the user can choose from.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  options: Listing<String>|Listing<OptionsAlternate1>
}

class OptionsAlternate1 {
  /// The description to show in the UI for this item.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  label: String

  /// The value to return when this label is selected.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#select-selector
  value: String
}

class StateSelector {
  /// The state selector shows a list of states for a provided entity of which one can be selected.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#state-selector
  state: State
}

/// The state selector shows a list of states for a provided entity of which one can be selected.
/// https://www.home-assistant.io/docs/blueprint/selectors/#state-selector
class State {
  /// The entity ID of which a state can be selected from.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#state-selector
  entity_id: String(matches(Regex(#"^.*\..*$"#)))
}

class TargetSelector {
  /// The target selector is a rather special selector, allowing the user to select targeted entities,
  /// devices or areas for service calls.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#target-selector
  target: TargetTargetAlternate0|Any
}

class TargetTargetAlternate0 {
  /// When device options are provided, the targets are limited by devices that at least match the given
  /// conditions. https://www.home-assistant.io/docs/blueprint/selectors/#target-selector
  device: (DeviceSelectorFilter|Listing<DeviceSelectorFilter>)?

  /// When entity options are provided, the targets are limited by entities that at least match the given
  /// conditions. https://www.home-assistant.io/docs/blueprint/selectors/#target-selector
  entity: (EntitySelectorFilter|Listing<EntitySelectorFilter>)?
}

class TemplateSelector {
  /// The template can be used for allowing the user to input a Jinja2 template.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#template-selector
  template: `Record<string,never>`|Any
}

class TextSelector {
  /// The text selector can be used to input a text string.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  text: TextAlternate0|Any
}

class TextAlternate0 {
  /// Set to true to display the input as a multi-line text box on the user interface.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  multiline: Boolean?

  /// Allows adding list of text strings. If set to true, the resulting value of this selector will be a
  /// list instead of a single string value.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  multiple: Boolean?

  /// Allows adding a prefix to the input field.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  prefix: String?

  /// Allows adding a suffix to the input field.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  suffix: String?

  /// The type of input. This is a browser hint, which can improve the client side validation of the
  /// input. The value isn't validated by the backend.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  type: ("color"|"date"|"datetime-local"|"email"|"month"|"number"|"password"|"search"|"tel"|"text"|"time"|"url"|"week")?

  /// Guides the browser on the type of information which should automatically fill the field. This
  /// supplies the HTML autocomplete attribute.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#text-selector
  autocomplete: String?
}

class ThemeSelector {
  /// The theme selector allows for selecting a theme from the available themes installed in Home
  /// Assistant. https://www.home-assistant.io/docs/blueprint/selectors/#theme-selector
  theme: ThemeAlternate0|Any
}

class ThemeAlternate0 {
  /// Includes Home Assistant default theme in the list.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#theme-selector
  include_default: Boolean?
}

class TimeSelector {
  /// The time selector shows a time input that allows the user to specify a time of the day.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#time-selector
  time: `Record<string,never>`|Any
}

class TriggerSelector {
  /// The triggers selector allows the user to input one or more triggers. On the user interface, the
  /// trigger part of the automation editor is shown.
  /// https://www.home-assistant.io/docs/blueprint/selectors/#trigger-selector
  trigger: `Record<string,never>`|Any
}

class BlueprintItem1 {
  use_blueprint: BlueprintItem1UseBlueprint

  /// The sequence of actions to be performed in the script.
  /// https://www.home-assistant.io/integrations/script/#sequence
  sequence: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Alias will be used to generate an entity_id from.
  /// https://www.home-assistant.io/integrations/script/#alias
  alias: String?

  /// Description of the automation. This is helpful to know what the automation does.
  /// https://www.home-assistant.io/integrations/script/#description
  description: String?

  /// A list of variables that can be passed into this script when calling it. They become available
  /// within the templates in that script.
  /// https://www.home-assistant.io/integrations/script/#passing-variables-to-scripts
  fields: Mapping<String, Field>?

  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/script/#icon
  icon: String?

  /// Controls maximum number of runs executing and/or queued up to run at a time. Only valid with modes
  /// queued and parallel. https://www.home-assistant.io/integrations/script/#max
  max: Int?

  /// Controls what happens when script is invoked while it is still running from one or more previous
  /// invocations. https://www.home-assistant.io/integrations/script/#script-modes
  mode: ("parallel"|"queued"|"restart"|"single")?

  /// When `max` is exceeded (which is effectively 1 for `single` mode) a log message will be emitted to
  /// indicate this has happened. This controls the severity level of that log message
  /// https://www.home-assistant.io/integrations/script/#script-modes
  max_exceeded: ("critical"|"debug"|"error"|"fatal"|"info"|"notset"|"silent"|"warn"|"warning")?

  /// Controls tracing settings of this script.
  /// https://www.home-assistant.io/docs/automation/troubleshooting
  `trace`: BlueprintItem1Trace?

  /// Variables that will be available inside your templates.
  /// https://www.home-assistant.io/integrations/script/#variables
  variables: Data?
}

class Item20 {
  /// Entities to control and their desired state.
  /// https://www.home-assistant.io/integrations/scene#entities
  entities: 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Mapping<String, ItemEntity|StateState>

  /// The icon that shows in the frontend. https://www.home-assistant.io/integrations/scene#icon
  icon: String?

  /// A unique identifier for this automation. Do not use the same twice, ever!
  /// https://www.home-assistant.io/integrations/scene
  id: String?

  /// Friendly name of scene. https://www.home-assistant.io/integrations/scene#name
  name: String

  /// Additional data for merely for use with the frontend. Has no functional effect.
  metadata: Any?
}

class ItemEntity {
  state: String?

  brightness: (String|Number(isBetween(0, 255)))?

  source: String?

  color_temp: (String|Number(this >= 1))?

  xy_color: Any?

  /// DEPRECATED.
  ///
  /// Using transitions on scene using this property is no longer supported. Alternative:
  /// https://www.home-assistant.io/docs/scene/#using-scene-transitions
  transition: Listing<Any>?
}

class SensorPlatformSchema {
  /// The template platform supports sensors which get their values from other entities.
  /// https://www.home-assistant.io/integrations/template
  platform: "template"

  /// List of sensors. https://www.home-assistant.io/integrations/template#sensors
  sensors: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |SensorPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class SensorPlatformItem {
  /// Defines templates for attributes of the sensor.
  /// https://www.home-assistant.io/integrations/template#attribute_templates
  attribute_templates: Mapping<String, String>?

  /// Defines a template to get the available state of the sensor. Return true if the device is
  /// available, false otherwise.
  /// https://www.home-assistant.io/integrations/template#availability_template
  availability_template: String?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/template#device_class
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"battery"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"conductivity"
    |"current"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"gas"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"moisture"
    |"monetary"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"ozone"
    |"ph"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"pressure"
    |"reactive_power"
    |"signal_strength"
    |"sound_pressure"
    |"speed"
    |"sulphur_dioxide"
    |"temperature"
    |"timestamp"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed")?

  /// Defines a template for the entity picture of the sensor.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#entity_picture_template
  entity_picture_template: String?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#friendly_name
  friendly_name: String?

  /// Defines a template for the name to be used in the frontend (this overrides friendly_name).
  /// https://www.home-assistant.io/integrations/binary_sensor.template#friendly_name
  friendly_name_template: String?

  /// Defines a template for the icon of the sensor.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#icon_template
  icon_template: String?

  /// The State Class of the sensor.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#state_class
  state_class: ("measurement"|"total"|"total_increasing")?

  /// Defines the units of measurement of the sensor, if any. This will also influence the graphical
  /// presentation in the history visualization as a continuous value.
  /// https://www.home-assistant.io/integrations/binary_sensor.template#unique_id
  unit_of_measurement: String?

  /// An ID that uniquely identifies this binary sensor. Set this to an unique value to allow
  /// customization through the UI. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?

  /// Defines a template to get the state of the sensor.
  /// https://www.home-assistant.io/integrations/template#value_template
  value_template: String
}

class SensorPlatformSchema1 {
  /// The group sensor platform lets you combine multiple sensors into one entity.
  /// https://www.home-assistant.io/integrations/group#sensor-number-and-input_number-groups
  platform: "group"

  /// Sets the class of the device, changing the device state and icon that is displayed on the UI.
  /// https://www.home-assistant.io/integrations/group#device_class
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"battery"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"conductivity"
    |"current"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"gas"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"moisture"
    |"monetary"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"ozone"
    |"ph"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"pressure"
    |"reactive_power"
    |"signal_strength"
    |"sound_pressure"
    |"speed"
    |"sulphur_dioxide"
    |"temperature"
    |"timestamp"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed")?

  /// A list of entities to be included in the sensor group.
  /// https://www.home-assistant.io/integrations/group#sensor-number-and-input_number-groups
  entities: Entities

  /// Set this to true if the group state should ignore sensors with non numeric values.
  /// https://www.home-assistant.io/integrations/group#ignore_non_numeric
  ignore_non_numeric: Boolean?

  /// The name of the sensor group.
  /// https://www.home-assistant.io/integrations/group#sensor-number-and-input_number-groups
  name: String?

  /// Sets the state class for the sensor. https://www.home-assistant.io/integrations/group#state_class
  state_class: ("measurement"|"total"|"total_increasing")?

  /// The type of sensor: min, max, last, mean, median, range, product, stdev, or sum.
  /// https://www.home-assistant.io/integrations/group#type
  type: "last"|"max"|"mean"|"median"|"min"|"product"|"range"|"stdev"|"sum"

  /// An ID that uniquely identifies this sensor group.
  /// https://www.home-assistant.io/integrations/group#sensor-number-and-input_number-groups
  unique_id: String?

  /// Set the unit of measurement for the sensor.
  /// https://www.home-assistant.io/integrations/group#unit_of_measurement
  unit_of_measurement: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class SensorPlatformSchema2 {
  /// The mqtt_room sensor platform allows you to detect the indoor location of devices using MQTT
  /// clients. https://www.home-assistant.io/integrations/sensor.mqtt
  platform: "mqtt_room"

  /// The device id to track for this sensor.
  /// https://www.home-assistant.io/integrations/mqtt_room/#device_id
  device_id: String

  /// The name of the MQTT sensor. https://www.home-assistant.io/integrations/sensor.mqtt#name
  name: String?

  /// The MQTT topic subscribed to receive sensor values.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#state_topic
  state_topic: String

  /// The time in seconds after which a room presence state is considered old.
  /// https://www.home-assistant.io/integrations/mqtt_room/#timeout
  timeout: Int(isPositive)?

  /// The time in seconds after which the state should be set to not_home if there were no updates. 0
  /// disables the check. https://www.home-assistant.io/integrations/mqtt_room/#away_timeout
  away_timeout: Int(isPositive)?

  /// An ID that uniquely identifies this room sensor. If two sensors have the same unique ID, Home
  /// Assistant will raise an exception. https://www.home-assistant.io/integrations/mqtt_room/#unique_id
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform11 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(group|mqtt_room|template|mqtt)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class SwitchPlatformSchema {
  /// The template platform creates switches that combines components.
  /// https://www.home-assistant.io/integrations/switch.template
  platform: "template"

  /// List of switches. https://www.home-assistant.io/integrations/switch.template#switches
  switches: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |SwitchPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class SwitchPlatformItem {
  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available.
  /// https://www.home-assistant.io/integrations/switch.template#availability_template
  availability_template: String?

  /// Defines a template for the picture of the switch.
  /// https://www.home-assistant.io/integrations/switch.template#entity_picture_template
  entity_picture_template: String?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/switch.template#friendly_name
  friendly_name: String?

  /// Defines a template for the icon of the switch.
  /// https://www.home-assistant.io/integrations/switch.template#icon_template
  icon_template: String?

  /// Defines an action to run when the switch is turned off.
  /// https://www.home-assistant.io/integrations/switch.template#turn_off
  turn_off: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines an action to run when the switch is turned on.
  /// https://www.home-assistant.io/integrations/switch.template#turn_on
  turn_on: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// An ID that uniquely identifies this switch. Set this to an unique value to allow customization
  /// trough the UI. https://www.home-assistant.io/integrations/switch.template#unique_id
  unique_id: String?

  /// Defines a template to set the state of the switch. If not defined, the switch will optimistically
  /// assume all commands are successful.
  /// https://www.home-assistant.io/integrations/switch.template#value_template
  value_template: String?
}

class SwitchPlatformSchema1 {
  /// The group switch platform lets you combine multiple switches into one entity.
  /// https://www.home-assistant.io/integrations/group#binary-sensor-light-and-switch-groups
  platform: "group"

  /// Set this to true if the group state should only turn on if all grouped entities are on, false
  /// otherwise. https://www.home-assistant.io/integrations/group#binary-sensor-light-and-switch-groups
  all: Boolean?

  /// A list of entities to be included in the switch group.
  /// https://www.home-assistant.io/integrations/group#binary-sensor-light-and-switch-groups
  entities: Entities

  /// The name of the switch group.
  /// https://www.home-assistant.io/integrations/group#binary-sensor-light-and-switch-groups
  name: String?

  /// An ID that uniquely identifies this switch group.
  /// https://www.home-assistant.io/integrations/group#binary-sensor-light-and-switch-groups
  unique_id: String?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class Item23 {
  /// List of binary sensors https://www.home-assistant.io/integrations/template#binary_sensor
  binary_sensor: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |BinarySensorItem1
    |Listing<BinarySensorItem1>)?

  /// List of buttons https://www.home-assistant.io/integrations/template#button
  button: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |ButtonItem
    |Listing<ButtonItem>)?

  /// List of numbers https://www.home-assistant.io/integrations/template#number
  number: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |NumberItem
    |Listing<NumberItem>)?

  /// List of images https://www.home-assistant.io/integrations/template/#image
  image: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |ImageItem
    |Listing<ImageItem>)?

  /// List of selects https://www.home-assistant.io/integrations/template#select
  select: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SelectItem
    |Listing<SelectItem>)?

  /// List of sensors https://www.home-assistant.io/integrations/template#sensor
  sensor: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SensorItem1
    |Listing<SensorItem1>)?

  /// List of switches https://www.home-assistant.io/integrations/template/#switch
  `switch`: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SwitchItem1
    |Listing<SwitchItem1>)?

  /// Define actions to be executed when the trigger fires. Optional. Variables set by the action script
  /// are available when evaluating entity templates. This can be used to interact with anything via
  /// services, in particular services with response data. See action documentation.
  /// https://www.home-assistant.io/integrations/template/#action
  action: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Define conditions that have to be met after a trigger fires and before any actions are executed or
  /// sensor updates are performed (for trigger-based entities only). Optional. See condition
  /// documentation. https://www.home-assistant.io/integrations/template/#condition
  condition: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |Listing<Condition>)?

  /// Define an automation trigger to update the entities. Optional. If omitted will update based on
  /// referenced entities. See trigger documentation.
  /// https://www.home-assistant.io/integrations/template#trigger
  trigger: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |WebOSTvTrigger
    |CalendarTrigger
    |ConversationTrigger
    |DeviceTrigger
    |EventTrigger
    |GeolocationTrigger
    |HomeAssistantTrigger
    |MqttTrigger
    |NumericStateTrigger
    |PersistentNotificationTrigger
    |StateTrigger
    |SunTrigger
    |TagTrigger
    |TemplateTrigger
    |TimeTrigger
    |TimePatternTrigger
    |WebhookTrigger
    |ZoneTrigger
    |Listing<Trigger>)?

  /// The unique ID for this config block. This will be prefixed to all unique IDs of all entities in
  /// this block. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class BinarySensorItem1 {
  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  attributes: Mapping<String, String>?

  /// **Requires a trigger**. After how much time the entity should turn off after it rendered ‘on’.
  /// https://www.home-assistant.io/integrations/template#auto_off
  auto_off: (TimePeriodMap|String|Number)?

  /// The amount of time (ie 0:00:05) the template state must be not met before this sensor will switch
  /// to on. This can also be a template. https://www.home-assistant.io/integrations/template#delay_off
  delay_off: (TimePeriodMap|String|Number)?

  /// The amount of time (ie 0:00:05) the template state must be met before this sensor will switch to
  /// on. This can also be a template. https://www.home-assistant.io/integrations/template#delay_on
  delay_on: (TimePeriodMap|String|Number)?

  /// Sets the class of the device, changing the device state and icon that is displayed on the UI (see
  /// below). It does not set the unit_of_measurement.
  /// https://www.home-assistant.io/integrations/template#device_class
  device_class: (
    "battery"
    |"battery_charging"
    |"carbon_monoxide"
    |"cold"
    |"connectivity"
    |"door"
    |"garage_door"
    |"gas"
    |"heat"
    |"light"
    |"lock"
    |"moisture"
    |"motion"
    |"moving"
    |"occupancy"
    |"opening"
    |"plug"
    |"power"
    |"presence"
    |"problem"
    |"running"
    |"safety"
    |"smoke"
    |"sound"
    |"tamper"
    |"update"
    |"vibration"
    |"window")?

  /// Defines a template for the entity picture of the sensor.
  /// https://www.home-assistant.io/integrations/template#picture
  picture: String?

  /// The sensor is on if the template evaluates as True, yes, on, enable or a positive number. Any other
  /// value will render it as off. The actual appearance in the frontend (Open/Closed, Detected/Clear
  /// etc) depends on the sensor’s device_class value
  /// https://www.home-assistant.io/integrations/template#state
  state: String?

  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  availability: String?

  /// Defines a template for the icon of the entity.
  /// https://www.home-assistant.io/integrations/template#icon
  icon: String?

  /// Defines a template to get the name of the entity.
  /// https://www.home-assistant.io/integrations/template#name
  name: String?

  /// An ID that uniquely identifies this entity. Will be combined with the unique ID of the
  /// configuration block if available. This allows changing the name, icon and entity_id from the web
  /// interface. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class ButtonItem {
  /// Defines actions to run to press the button.
  /// https://www.home-assistant.io/integrations/template#button
  press: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  availability: String?

  /// Defines a template for the icon of the entity.
  /// https://www.home-assistant.io/integrations/template#icon
  icon: String?

  /// Defines a template to get the name of the entity.
  /// https://www.home-assistant.io/integrations/template#name
  name: String?

  /// An ID that uniquely identifies this entity. Will be combined with the unique ID of the
  /// configuration block if available. This allows changing the name, icon and entity_id from the web
  /// interface. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class NumberItem {
  /// Template for the number’s maximum value. https://www.home-assistant.io/integrations/template#max
  max: String?

  /// Template for the number’s minimum value. https://www.home-assistant.io/integrations/template#min
  min: String?

  /// Flag that defines if number works in optimistic mode.
  /// https://www.home-assistant.io/integrations/template#optimistic
  optimistic: Boolean?

  /// Defines actions to run when the number value changes. The variable `value` will contain the number
  /// entered. https://www.home-assistant.io/integrations/template#set_value
  set_value: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines a template to get the state of the sensor.
  /// https://www.home-assistant.io/integrations/template#state
  state: String

  /// Template for the number’s increment/decrement step.
  /// https://www.home-assistant.io/integrations/template#step
  step: String

  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  availability: String?

  /// Defines a template for the icon of the entity.
  /// https://www.home-assistant.io/integrations/template#icon
  icon: String?

  /// Defines a template to get the name of the entity.
  /// https://www.home-assistant.io/integrations/template#name
  name: String?

  /// An ID that uniquely identifies this entity. Will be combined with the unique ID of the
  /// configuration block if available. This allows changing the name, icon and entity_id from the web
  /// interface. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class ImageItem {
  /// The URL on which the image is served. https://www.home-assistant.io/integrations/template/#url
  url: String

  /// Enable or disable SSL certificate verification. Set to false to use an http-only URL, or you have a
  /// self-signed SSL certificate and haven’t installed the CA certificate to enable verification.
  /// https://www.home-assistant.io/integrations/template/#verify_ssl
  verify_ssl: Boolean?

  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  availability: String?

  /// Defines a template for the icon of the entity.
  /// https://www.home-assistant.io/integrations/template#icon
  icon: String?

  /// Defines a template to get the name of the entity.
  /// https://www.home-assistant.io/integrations/template#name
  name: String?

  /// An ID that uniquely identifies this entity. Will be combined with the unique ID of the
  /// configuration block if available. This allows changing the name, icon and entity_id from the web
  /// interface. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class SelectItem {
  /// Flag that defines if select works in optimistic mode.
  /// https://www.home-assistant.io/integrations/template#options
  optimistic: Boolean?

  /// Template for the select’s available options.
  /// https://www.home-assistant.io/integrations/template#options
  options: String

  /// Defines actions to run to select an option from the options list. The variable `option` will
  /// contain the option selected. https://www.home-assistant.io/integrations/template#select_option
  select_option: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Template for the select’s current value. https://www.home-assistant.io/integrations/template#state
  state: String

  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  availability: String?

  /// Defines a template for the icon of the entity.
  /// https://www.home-assistant.io/integrations/template#icon
  icon: String?

  /// Defines a template to get the name of the entity.
  /// https://www.home-assistant.io/integrations/template#name
  name: String?

  /// An ID that uniquely identifies this entity. Will be combined with the unique ID of the
  /// configuration block if available. This allows changing the name, icon and entity_id from the web
  /// interface. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class SensorItem1 {
  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  attributes: Mapping<String, String>?

  /// Sets the class of the device, changing the device state and icon that is displayed on the UI (see
  /// below). It does not set the unit_of_measurement.
  /// https://www.home-assistant.io/integrations/template#device_class
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"battery"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"conductivity"
    |"current"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"gas"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"moisture"
    |"monetary"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"ozone"
    |"ph"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"pressure"
    |"reactive_power"
    |"signal_strength"
    |"sound_pressure"
    |"speed"
    |"sulphur_dioxide"
    |"temperature"
    |"timestamp"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed")?

  /// Defines a template for the entity picture of the sensor.
  /// https://www.home-assistant.io/integrations/template#picture
  picture: String?

  /// The state_class of the sensor. This will also display the value based on the user profile Number
  /// Format setting and influence the graphical presentation in the history visualization as a
  /// continuous value. https://www.home-assistant.io/integrations/template#state_class
  state_class: ("measurement"|"total"|"total_increasing")?

  /// Defines a template to get the state of the sensor.
  /// https://www.home-assistant.io/integrations/template#state
  state: String

  /// Defines the units of measurement of the sensor, if any. This will also display the value based on
  /// the user profile Number Format setting and influence the graphical presentation in the history
  /// visualization as a continuous value. https://www.home-assistant.io/integrations/template#state
  unit_of_measurement: String?

  /// Defines a template to get the available state of the entity. If the template either fails to render
  /// or returns True, "1", "true", "yes", "on", "enable", or a non-zero number, the entity will be
  /// available. https://www.home-assistant.io/integrations/template#availability
  availability: String?

  /// Defines a template for the icon of the entity.
  /// https://www.home-assistant.io/integrations/template#icon
  icon: String?

  /// Defines a template to get the name of the entity.
  /// https://www.home-assistant.io/integrations/template#name
  name: String?

  /// An ID that uniquely identifies this entity. Will be combined with the unique ID of the
  /// configuration block if available. This allows changing the name, icon and entity_id from the web
  /// interface. https://www.home-assistant.io/integrations/template#unique_id
  unique_id: String?
}

class SwitchItem1 {
  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available.
  /// https://www.home-assistant.io/integrations/switch.template#availability_template
  availability: String?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/switch.template#friendly_name
  name: String?

  /// Defines a template for the icon of the switch.
  /// https://www.home-assistant.io/integrations/switch.template#icon_template
  icon: String?

  /// Defines an action to run when the switch is turned off.
  /// https://www.home-assistant.io/integrations/switch.template#turn_off
  turn_off: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines an action to run when the switch is turned on.
  /// https://www.home-assistant.io/integrations/switch.template#turn_on
  turn_on: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// An ID that uniquely identifies this switch. Set this to an unique value to allow customization
  /// trough the UI. https://www.home-assistant.io/integrations/switch.template#unique_id
  unique_id: String?

  /// Defines a template to set the state of the switch. If not defined, the switch will optimistically
  /// assume all commands are successful. https://www.home-assistant.io/integrations/template/#state
  state: String?
}

class Item24 {
  /// Friendly name of the timer. https://www.home-assistant.io/integrations/timer/#name
  name: String?

  /// Initial duration in seconds or `00:00:00` when Home Assistant starts.
  /// https://www.home-assistant.io/integrations/timer/#duration
  duration: (String|Number)?

  /// Set a custom icon for the state card. https://www.home-assistant.io/integrations/timer/#icon
  icon: String?

  /// When true, active and paused timers will be restored to the correct state and time on Home
  /// Assistant startup and restarts. https://www.home-assistant.io/integrations/timer/#restore
  restore: Boolean?
}

class VacuumPlatformSchema {
  /// The template platform creates vacuums that combine integrations and provides the ability to run
  /// scripts or invoke services for each of the start, pause, stop, return_to_base, clean_spot, locate
  /// and set_fan_speed commands of a vacuum. https://www.home-assistant.io/integrations/vacuum.template
  platform: "template"

  /// List of vacuums. https://www.home-assistant.io/integrations/vacuum.template#vacuums
  vacuums: Mapping<String, 
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |VacuumPlatformItem>

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class VacuumPlatformItem {
  /// Defines templates for attributes of the sensor.
  /// https://www.home-assistant.io/integrations/vacuum.template#attribute_templates
  attribute_templates: Mapping<String, String>?

  /// Defines a template to get the available state of the component. If the template returns true, the
  /// device is available.
  /// https://www.home-assistant.io/integrations/vacuum.template#availability_template
  availability_template: String?

  /// Defines a template to get the battery level of the vacuum. Legal values are numbers between 0 and
  /// 100. https://www.home-assistant.io/integrations/vacuum.template#battery_level_template
  battery_level_template: String?

  /// Defines an action to run when the vacuum is given a clean spot command.
  /// https://www.home-assistant.io/integrations/vacuum.template#clean_spot
  clean_spot: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines a template to get the fan speed of the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.template#fan_speed_template
  fan_speed_template: String?

  /// List of fan speeds supported by the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.template#fan_speeds
  fan_speeds: Listing<String>?

  /// Name to use in the frontend.
  /// https://www.home-assistant.io/integrations/vacuum.template#friendly_name
  friendly_name: String?

  /// Defines an action to run when the vacuum is given a locate command.
  /// https://www.home-assistant.io/integrations/vacuum.template#locate
  locate: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the vacuum is paused.
  /// https://www.home-assistant.io/integrations/vacuum.template#pause
  pause: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the vacuum is given a return to base command.
  /// https://www.home-assistant.io/integrations/vacuum.template#return_to_base
  return_to_base: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the vacuum is given a command to set the fan speed.
  /// https://www.home-assistant.io/integrations/vacuum.template#set_fan_speed
  set_fan_speed: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// Defines an action to run when the vacuum is started.
  /// https://www.home-assistant.io/integrations/vacuum.template#start
  start: 
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>

  /// Defines an action to run when the vacuum is stopped.
  /// https://www.home-assistant.io/integrations/vacuum.template#stop
  stop: (
    String(matches(Regex(#"^\{\{.*$"#)))
    |String(matches(Regex(#"^\{%.*$"#)))
    |String(matches(Regex(#"^\{#.*$"#)))
    |AndCondition
    |AndShorthandCondition
    |DeviceCondition
    |NotCondition
    |NotShorthandCondition
    |NumericStateCondition
    |OrCondition
    |OrShorthandCondition
    |ShorthandCondition
    |StateCondition
    |SunCondition
    |TemplateCondition
    |TimeCondition
    |TriggerCondition
    |ZoneCondition
    |ChooseAction
    |DelayAction
    |DeviceAction
    |EventAction
    |IfAction
    |ParallelAction
    |RepeatAction
    |SceneAction
    |ServiceAction
    |SequenceAction
    |StopAction
    |WaitForTriggerAction
    |WaitTemplateAction
    |VariablesAction
    |Listing<Action>)?

  /// An ID that uniquely identifies this vacuum. Set this to an unique value to allow customization
  /// trough the UI. https://www.home-assistant.io/integrations/vacuum.template#unique_id
  unique_id: String?

  /// Defines a template to get the state of the vacuum. Valid value:
  /// docked/cleaning/idle/paused/returning/error.
  /// https://www.home-assistant.io/integrations/vacuum.template#value_template
  value_template: String?
}

class WeatherPlatformSchema {
  /// The template integrations creates weather provider that combines integrations and an existing
  /// weather provider into a fused weather provider.
  /// https://www.home-assistant.io/integrations/weather.template
  platform: "template"

  /// Defines a template for the current apparent temperature.
  /// https://www.home-assistant.io/integrations/weather.template#apparent_temperature_template
  apparent_temperature_template: String?

  /// The attribution to be shown in the frontend.
  /// https://www.home-assistant.io/integrations/weather.template#attribution_template
  attribution_template: String?

  /// Defines templates for the current cloud coverage.
  /// https://www.home-assistant.io/integrations/weather.template#cloud_coverage_template
  cloud_coverage_template: String?

  /// Defines templates for the current weather condition.
  /// https://www.home-assistant.io/integrations/weather.template#condition_template
  condition_template: String

  /// Defines templates for the current dew point.
  /// https://www.home-assistant.io/integrations/weather.template#dew_point_template
  dew_point_template: String?

  /// Defines templates for the daily forcast data.
  /// https://www.home-assistant.io/integrations/weather.template#forecast_template
  forecast_daily_template: String?

  /// Defines templates for the twice daily forcast data.
  /// https://www.home-assistant.io/integrations/weather.template#forecast_template
  forecast_twice_daily_template: String?

  /// Defines templates for the hourly forcast data.
  /// https://www.home-assistant.io/integrations/weather.template#forecast_template
  forecast_hourly_template: String?

  /// Defines templates for the current humidity.
  /// https://www.home-assistant.io/integrations/weather.template#humidity_template
  humidity_template: String

  /// Name to use in the frontend. https://www.home-assistant.io/integrations/weather.template#name
  name: String

  /// The current ozone level. https://www.home-assistant.io/integrations/weather.template#ozone_template
  ozone_template: String?

  /// The unit of measurement for the precipitation output.
  /// https://www.home-assistant.io/integrations/weather.template#precipitation_unit
  precipitation_unit: String?

  /// Defines templates for the current air pressure.
  /// https://www.home-assistant.io/integrations/weather.template#pressure_template
  pressure_template: String?

  /// Unit for pressure_template output.
  /// https://www.home-assistant.io/integrations/weather.template#pressure_unit
  pressure_unit: ("Pa"|"bar"|"cbar"|"hPa"|"inHg"|"kPa"|"mbar"|"mmHg"|"psi")?

  /// Defines templates for the current temperature.
  /// https://www.home-assistant.io/integrations/weather.template#temperature_template
  temperature_template: String

  /// Unit for temperature_template output.
  /// https://www.home-assistant.io/integrations/weather.template#temperature_unit
  temperature_unit: ("K"|"°C"|"°F")?

  /// An ID that uniquely identifies this weather entity. Set this to a unique value to allow
  /// customization through the UI. https://www.home-assistant.io/integrations/weather.template#unique_id
  unique_id: String?

  /// The current visibility.
  /// https://www.home-assistant.io/integrations/weather.template#visibility_template
  visibility_template: String?

  /// Unit for visibility_template output.
  /// https://www.home-assistant.io/integrations/weather.template#visibility_unit
  visibility_unit: ("cm"|"ft"|"in"|"km"|"m"|"mi"|"mm"|"yd")?

  /// The current wind bearing.
  /// https://www.home-assistant.io/integrations/weather.template#wind_bearing_template
  wind_bearing_template: String?

  /// Defines templates for the current wind gust speed.
  /// https://www.home-assistant.io/integrations/weather.template#wind_gust_speed_template
  wind_gust_speed_template: String?

  /// Defines templates for the current wind speed.
  /// https://www.home-assistant.io/integrations/weather.template#wind_speed_template
  wind_speed_template: String?

  /// Unit for wind_speed_template output.
  /// https://www.home-assistant.io/integrations/weather.template#wind_speed_unit
  wind_speed_unit: ("in/d"|"in/h"|"km/h"|"m/s"|"mm/d"|"mph")?

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class OtherPlatform14 {
  /// Platform domain
  platform: String(matches(Regex(#"^(?!(template)$)\w+$"#)))

  /// By setting an entity namespace, all entities will be prefixed with that namespace.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
  entity_namespace: String?

  /// Allow to change the polling interval if the platform uses a polling mechanism.
  /// https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
  scan_interval: (TimePeriodMap|String|Number)?
}

class Schema17 {
  /// This option is for development, you do not need it in general.
  account_link_url: String?

  /// This option is for development, you do not need it in general.
  acme_directory_server: String?

  /// This option is for development, you do not need it in general.
  alexa_access_token_url: String?

  /// Configure the Amazon Alexa integration. https://www.nabucasa.com/config/amazon_alexa/
  alexa: Alexa?

  /// This option is for development, you do not need it in general.
  cloudhook_create_url: String?

  /// This option is for development, you do not need it in general.
  cognito_client_id: String?

  /// This option is for development, you do not need it in general.
  google_actions_report_state_url: String?

  /// The Google Assistant integration allows users to control the entities via the Home Assistant Smart
  /// Home skill for Google Assistant. https://www.nabucasa.com/config/google_assistant/
  google_actions: GoogleActions?

  /// This option is for development, you do not need it in general.
  mode: ("development"|"production")?

  /// This option is for development, you do not need it in general.
  region: String?

  /// This option is for development, you do not need it in general.
  relayer: String?

  /// This option is for development, you do not need it in general.
  remote_api_url: String?

  /// This option is for development, you do not need it in general.
  subscription_info_url: String?

  /// This option is for development, you do not need it in general.
  user_pool_id: String?

  /// This option is for development, you do not need it in general.
  voice_api_url: String?
}

/// Configure the Amazon Alexa integration. https://www.nabucasa.com/config/amazon_alexa/
class Alexa {
  /// Filters for entities to include/exclude from Alexa. https://www.nabucasa.com/config/amazon_alexa/
  filter: Filter?

  /// Entity specific configuration for Alexa. https://www.nabucasa.com/config/amazon_alexa/
  entity_config: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Mapping<String, AlexaEntity>)?
}

/// The Google Assistant integration allows users to control the entities via the Home Assistant Smart
/// Home skill for Google Assistant. https://www.nabucasa.com/config/google_assistant/
class GoogleActions {
  /// Filters for entities to include/exclude from Google Assistant.
  /// https://www.nabucasa.com/config/google_assistant/
  filter: Filter?

  /// Entity specific configuration for Google Assistant.
  /// https://www.nabucasa.com/config/google_assistant/
  entity_config: (
    String(matches(Regex("^!include_dir_named .*$")))
    |String(matches(Regex("^!include_dir_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_named\t.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named .*$")))
    |String(matches(Regex("^!include_dir_merge_named\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_named\t.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |String(matches(Regex("^!include_dir_merge_named.*$")))
    |Mapping<String, GoogleEntity>)?
}

class Filter {
  /// The list of domains to be excluded.
  exclude_domains: Listing<Any>?

  /// The list of entity ids to be excluded,
  exclude_entities: (String(matches(Regex(#"^.*\..*$"#)))|Listing<String(matches(Regex(#"^.*\..*$"#)))>)?

  /// Exclude all entities matching a listed pattern (e.g., switch.garage_*).
  exclude_entity_globs: Listing<String>?

  /// The list of domains to be included.
  include_domains: Listing<Any>?

  /// The list of entity ids to be included.
  include_entities: (String(matches(Regex(#"^.*\..*$"#)))|Listing<String(matches(Regex(#"^.*\..*$"#)))>)?

  /// Include all entities matching a listed pattern (e.g., light.living_room_*).
  include_entity_globs: Listing<String>?
}

class AlexaEntity {
  /// Description of entity to show in Alexa.
  description: String?

  /// The display category to use in Alexa. Available categories:
  /// https://developer.amazon.com/en-US/docs/alexa/device-apis/alexa-discovery.html#display-categories
  display_categories: (
    "ACTIVITY_TRIGGER"
    |"AIR_CONDITIONER"
    |"AIR_FRESHENER"
    |"AIR_PURIFIER"
    |"AUTO_ACCESSORY"
    |"BLUETOOTH_SPEAKER"
    |"CAMERA"
    |"CHRISTMAS_TREE"
    |"COFFEE_MAKER"
    |"COMPUTER"
    |"CONTACT_SENSOR"
    |"DISHWASHER"
    |"DOOR"
    |"DOORBELL"
    |"DRYER"
    |"EXTERIOR_BLIND"
    |"FAN"
    |"GAME_CONSOLE"
    |"GARAGE_DOOR"
    |"HEADPHONES"
    |"HUB"
    |"INTERIOR_BLIND"
    |"LAPTOP"
    |"LIGHT"
    |"MICROWAVE"
    |"MOBILE_PHONE"
    |"MOTION_SENSOR"
    |"MUSIC_SYSTEM"
    |"NETWORK_HARDWARE"
    |"OTHER"
    |"OVEN"
    |"PHONE"
    |"PRINTER"
    |"ROUTER"
    |"SCENE_TRIGGER"
    |"SCREEN"
    |"SECURITY_PANEL"
    |"SECURITY_SYSTEM"
    |"SLOW_COOKER"
    |"SMARTLOCK"
    |"SMARTPLUG"
    |"SPEAKER"
    |"STREAMING_DEVICE"
    |"SWITCH"
    |"TABLET"
    |"TEMPERATURE_SENSOR"
    |"THERMOSTAT"
    |"TV"
    |"VACUUM_CLEANER"
    |"VEHICLE"
    |"WASHER"
    |"WATER_HEATER"
    |"WEARABLE")?

  /// Name of entity to show in Alexa.
  name: String?
}

class GoogleEntity {
  /// Aliases that can also be used to refer to this entity.
  aliases: (Listing<String>|String)?

  /// Name of entity to show in Google Assistant.
  name: String?

  /// Hint for Google Assistant in which room this entity is.
  room: String?
}

class Item27 {
  /// The entity to monitor/compensate. https://www.home-assistant.io/integrations/compensation/#source
  source: String(matches(Regex(#"^.*\..*$"#)))

  /// The collection of data point conversions with the format `[uncompensated_value,
  /// compensated_value]`. e.g., `[1.0, 2.1]`. The number of required data points is equal to the
  /// polynomial `degree` + 1. For example, a linear compensation (with `degree: 1`) requires at least 2
  /// data points. https://www.home-assistant.io/integrations/compensation/#data_points
  data_points: Listing<Listing(length.isBetween(2, 2))>

  /// An ID that uniquely identifies this sensor. Set this to a unique value to allow customization
  /// through the UI. https://www.home-assistant.io/integrations/compensation/#unique_id
  unique_id: String?

  /// Attribute from the source to monitor/compensate. When omitted the state value of the source will be
  /// used. https://www.home-assistant.io/integrations/compensation/#attribute
  attribute: String?

  /// The degree of a polynomial. e.g., Linear compensation (y = x + 3) has 1 degree, Quadratic
  /// compensation (y = x² + x + 3) has 2 degrees, etc.
  /// https://www.home-assistant.io/integrations/compensation/#degree
  degree: Int(isPositive)?

  /// Defines the precision of the calculated values, through the argument of round().
  /// https://www.home-assistant.io/integrations/compensation/#precision
  precision: Int(isPositive)?

  /// Defines the units of measurement of the sensor, if any.
  /// https://www.home-assistant.io/integrations/compensation/#unit_of_measurement
  unit_of_measurement: String?

  /// Enables a lower limit for the sensor. The lower limit is defined by the data collections
  /// (`data_points`) lowest `uncompensated_value`. For example, if the lowest `uncompensated_value`
  /// value is `1.0` and the paired `compensated_value` is `0.0`, any `source` state less than `1.0` will
  /// produce a compensated state of `0.0`.
  /// https://www.home-assistant.io/integrations/compensation/#lower_limit
  lower_limit: Boolean?

  /// Enables an upper limit for the sensor. The upper limit is defined by the data collections
  /// (`data_points`) greatest `uncompensated_value`. For example, if the greatest `uncompensated_value`
  /// value is `5.0` and the paired `compensated_value` is `10.0`, any `source` state greater than `5.0`
  /// will produce a compensated state of `10.0`.
  /// https://www.home-assistant.io/integrations/compensation/#upper_limit
  upper_limit: Boolean?
}

class Schema19 {
  /// The KNX binary sensor platform allows you to monitor KNX binary sensors.
  /// https://www.home-assistant.io/integrations/knx#binary-sensor
  binary_sensor: Listing<BinarySensor>?

  /// The KNX binary sensor platform allows you to monitor KNX binary sensors.
  /// https://www.home-assistant.io/integrations/knx/#button
  button: Listing<Button>?

  /// The KNX climate platform is used as an interface to KNX thermostats and room controllers.
  /// https://www.home-assistant.io/integrations/knx#binary-sensor
  climate: Listing<Climate>?

  /// The KNX cover platform is used as an interface to KNX covers.
  /// https://www.home-assistant.io/integrations/knx#cover
  cover: Listing<Cover>?

  /// The KNX date platform allows to send date values to the KNX bus and update its state from received
  /// telegrams. https://www.home-assistant.io/integrations/knx#date
  date: Listing<DateEntity>?

  /// The KNX datetime platform allows to send datetime values to the KNX bus and update its state from
  /// received telegrams. https://www.home-assistant.io/integrations/knx#datetime
  datetime: Listing<DateTimeEntity>?

  /// Defines lists of patterns for filtering KNX group addresses. Telegrams with destination addresses
  /// matching this pattern are sent to the Home Assistant event bus as knx_event.
  /// https://www.home-assistant.io/integrations/knx/#events
  event: Listing<Event>?

  /// KNX integration is able to expose entity states or attributes to KNX bus.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  expose: Listing<ExposeTime|ExposeSensor>?

  /// The KNX fan integration is used to control KNX fans.
  /// https://www.home-assistant.io/integrations/knx#fan
  fan: Listing<Fan>?

  /// The KNX light integration is used as an interface to control KNX actuators for lighting
  /// applications. https://www.home-assistant.io/integrations/knx#light
  light: Listing<Light>?

  /// The KNX notify platform allows you to send notifications to KNX devices as DPT16 strings.
  /// https://www.home-assistant.io/integrations/knx#notify
  notify: Listing<Notify>?

  /// The KNX number platform allows to send generic numeric values to the KNX bus and update its state
  /// from received telegrams. https://www.home-assistant.io/integrations/knx#number
  number: Listing<NumberEntity>?

  /// The KNX scenes platform allows you to trigger KNX scenes.
  /// https://www.home-assistant.io/integrations/knx#scene
  scene: Listing<Scene>?

  /// The KNX select platform allows the user to define a list of values that can be selected via the
  /// frontend and can be used within conditions of automation.
  /// https://www.home-assistant.io/integrations/knx#select
  select: Listing<Select0>?

  /// The KNX sensor platform allows you to monitor KNX sensors.
  /// https://www.home-assistant.io/integrations/knx#sensor
  sensor: Listing<Sensor>?

  /// The KNX switch platform is used as an interface to switching actuators.
  /// https://www.home-assistant.io/integrations/knx#switch
  `switch`: Listing<Switch>?

  /// The KNX text platform is used as an interface for sending text.
  /// https://www.home-assistant.io/integrations/knx#text
  text: Listing<TextEntity>?

  /// The KNX time platform allows to send time values to the KNX bus and update its state from received
  /// telegrams. https://www.home-assistant.io/integrations/knx#time
  time: Listing<TimeEntity>?

  /// The KNX weather platform is used as an interface to KNX weather stations.
  /// https://www.home-assistant.io/integrations/knx#weather
  weather: Listing<Weather>?
}

class BinarySensor {
  /// The time in seconds between multiple identical telegram payloads would count towards the internal
  /// counter that is used for automations.
  /// https://www.home-assistant.io/integrations/knx#context_timeout
  context_timeout: Number(isBetween(1, 100))?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/knx#device_class
  device_class: (
    "battery"
    |"battery_charging"
    |"carbon_monoxide"
    |"cold"
    |"connectivity"
    |"door"
    |"garage_door"
    |"gas"
    |"heat"
    |"light"
    |"lock"
    |"moisture"
    |"motion"
    |"moving"
    |"occupancy"
    |"opening"
    |"plug"
    |"power"
    |"presence"
    |"problem"
    |"running"
    |"safety"
    |"smoke"
    |"sound"
    |"tamper"
    |"update"
    |"vibration"
    |"window")?

  /// Specifies if telegrams should ignore the internal state and always trigger a Home Assistant state
  /// update. https://www.home-assistant.io/integrations/knx#ignore_internal_state
  ignore_internal_state: Boolean?

  /// Invert the telegrams payload before processing. This is applied before context_timeout or
  /// reset_after is evaluated. https://www.home-assistant.io/integrations/knx#invert
  invert: Boolean?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Reset back to “off” state after specified seconds.
  /// https://www.home-assistant.io/integrations/knx#reset_after
  reset_after: Number?

  /// KNX group address of the binary sensor.
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: GroupAddresses

  /// Actively read the value from the bus. https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Number|Boolean)?
}

class Button {
  /// Group address to send to. https://www.home-assistant.io/integrations/knx#address
  address: String(matches(Regex(#"^(\d{1,2}(\/\d{1,2})?\/\d{1,4}|\d{1,5}|i-.+)$"#)))

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// The raw payload to be sent. Defaults to `1` https://www.home-assistant.io/integrations/knx#payload
  payload: Int?

  /// The length of the payload expected for the DPT. Use `0` for DPT 1, 2 or 3. Defaults to `0`. When
  /// `payload_length` is used `value` shall not be set.
  /// https://www.home-assistant.io/integrations/knx#payload_length
  payload_length: Int?

  /// The value to be sent. https://www.home-assistant.io/integrations/knx#payload
  value: Int?

  /// A type from the value types to decode the value. Requires `value` to be set.
  /// https://www.home-assistant.io/integrations/knx/#value-types
  type: (
    "1byte_signed"
    |"1byte_unsigned"
    |"2byte_float"
    |"2byte_signed"
    |"2byte_unsigned"
    |"4byte_float"
    |"4byte_signed"
    |"4byte_unsigned"
    |"8byte_signed"
    |"absolute_humidity"
    |"absolute_temperature"
    |"acceleration"
    |"acceleration_angular"
    |"activation_energy"
    |"active_energy"
    |"active_energy_8byte"
    |"active_energy_kwh"
    |"activity"
    |"air_flow"
    |"amplitude"
    |"angle"
    |"angle_deg"
    |"angle_rad"
    |"angular_frequency"
    |"angular_momentum"
    |"angular_velocity"
    |"apparant_energy"
    |"apparant_energy_8byte"
    |"apparant_energy_kvah"
    |"apparent_power"
    |"area"
    |"brightness"
    |"capacitance"
    |"charge_density_surface"
    |"charge_density_volume"
    |"color_temperature"
    |"common_temperature"
    |"compressibility"
    |"concentration_ugm3"
    |"conductance"
    |"counter_pulses"
    |"curr"
    |"current"
    |"decimal_factor"
    |"delta_time_100ms"
    |"delta_time_10ms"
    |"delta_time_hrs"
    |"delta_time_min"
    |"delta_time_ms"
    |"delta_time_sec"
    |"density"
    |"electric_charge"
    |"electric_current"
    |"electric_current_density"
    |"electric_dipole_moment"
    |"electric_displacement"
    |"electric_field_strength"
    |"electric_flux"
    |"electric_flux_density"
    |"electric_polarization"
    |"electric_potential"
    |"electric_potential_difference"
    |"electrical_conductivity"
    |"electromagnetic_moment"
    |"electromotive_force"
    |"energy"
    |"enthalpy"
    |"flow_rate_m3h"
    |"force"
    |"frequency"
    |"heat_quantity"
    |"heatcapacity"
    |"heatflowrate"
    |"humidity"
    |"illuminance"
    |"impedance"
    |"kelvin_per_percent"
    |"latin_1"
    |"length"
    |"length_m"
    |"length_mm"
    |"light_quantity"
    |"long_delta_timesec"
    |"long_time_period_hrs"
    |"long_time_period_min"
    |"long_time_period_sec"
    |"luminance"
    |"luminous_flux"
    |"luminous_intensity"
    |"magnetic_field_strength"
    |"magnetic_flux"
    |"magnetic_flux_density"
    |"magnetic_moment"
    |"magnetic_polarization"
    |"magnetization"
    |"magnetomotive_force"
    |"mass"
    |"mass_flux"
    |"mol"
    |"momentum"
    |"percent"
    |"percentU8"
    |"percentV16"
    |"percentV8"
    |"phaseangledeg"
    |"phaseanglerad"
    |"power"
    |"power_2byte"
    |"power_density"
    |"powerfactor"
    |"ppm"
    |"pressure"
    |"pressure_2byte"
    |"pulse"
    |"pulse_2byte"
    |"pulse_2byte_signed"
    |"pulse_4_ucount"
    |"pulse_4byte"
    |"rain_amount"
    |"reactance"
    |"reactive_energy"
    |"reactive_energy_8byte"
    |"reactive_energy_kvarh"
    |"resistance"
    |"resistivity"
    |"rotation_angle"
    |"scene_number"
    |"self_inductance"
    |"solid_angle"
    |"sound_intensity"
    |"speed"
    |"stress"
    |"string"
    |"surface_tension"
    |"tariff"
    |"temperature"
    |"temperature_a"
    |"temperature_difference"
    |"temperature_difference_2byte"
    |"temperature_f"
    |"thermal_capacity"
    |"thermal_conductivity"
    |"thermoelectric_power"
    |"time_1"
    |"time_2"
    |"time_period_100msec"
    |"time_period_10msec"
    |"time_period_hrs"
    |"time_period_min"
    |"time_period_msec"
    |"time_period_sec"
    |"time_seconds"
    |"torque"
    |"voltage"
    |"volume"
    |"volume_flow"
    |"volume_flux"
    |"volume_liquid_litre"
    |"volume_m3"
    |"weight"
    |"wind_speed_kmh"
    |"wind_speed_ms"
    |"work")?
}

class Climate {
  /// KNX address for reading current activity. `0` is idle, `1` is active. DPT 1
  /// https://www.home-assistant.io/integrations/knx#active_state_addres
  active_state_address: (Listing<String>|String)?

  /// KNX address for reading current command value in percent. `0` sets the climate entity to idle if
  /// `active_state_address` is not set. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#command_value_state_address
  command_value_state_address: (Listing<String>|String)?

  /// KNX address for setting HVAC controller modes. DPT 20.105
  /// https://www.home-assistant.io/integrations/knx#controller_mode_address
  controller_mode_address: String(matches(Regex(#"^(\d{1,2}(\/\d{1,2})?\/\d{1,4}|\d{1,5}|i-.+)$"#)))?

  /// KNX address for reading HVAC control mode. DPT 20.105
  /// https://www.home-assistant.io/integrations/knx#controller_mode_state_address
  controller_mode_state_address: (Listing<String>|String)?

  /// Overrides the supported controller modes.
  /// https://www.home-assistant.io/integrations/knx#controller_modes
  controller_modes: Listing<"auto"|"cool"|"dehumidification"|"fan_only"|"heat"|"off">?

  /// KNX address for HVAC controller status (in accordance with KNX AN 097/07 rev 3).
  /// https://www.home-assistant.io/integrations/knx#controller_status_address
  controller_status_address: (Listing<String>|String)?

  /// KNX address for reading HVAC controller status.
  /// https://www.home-assistant.io/integrations/knx#controller_status_state_address
  controller_status_state_address: (Listing<String>|String)?

  /// Overrides the default controller mode. Any Home Assistant hvac_mode can be configured. This can,
  /// for example, be set to “cool” for cooling-only devices.
  /// https://www.home-assistant.io/integrations/knx#climate
  default_controller_mode: ("auto"|"cool"|"dry"|"fan_only"|"heat"|"heat_cool"|"off")?

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// The maximum amount of steps for the fan.
  /// https://www.home-assistant.io/integrations/knx#fan_max_step
  fan_max_step: Number?

  /// KNX group address for setting the percentage or step of the fan. DPT 5.001 or DPT 5.010
  /// https://www.home-assistant.io/integrations/knx#fan_speed_address
  fan_speed_address: (Listing<String>|String)?

  /// Fan speed group address data type. `percent` for DPT 5.001 and `step` for DPT 5.010.
  /// https://www.home-assistant.io/integrations/knx#climate
  fan_speed_mode: ("percent"|"step")?

  /// KNX group address for retrieving the percentage or step of the fan. DPT 5.001 or DPT 5.010
  /// https://www.home-assistant.io/integrations/knx#fan_speed_state_address
  fan_speed_state_address: (Listing<String>|String)?

  /// The fan mode for the zero speed. This affects the fan modes displayed in the UI.
  /// https://www.home-assistant.io/integrations/knx#climate
  fan_zero_mode: ("auto"|"off")?

  /// KNX address for switching between heat/cool mode. DPT 1.100
  /// https://www.home-assistant.io/integrations/knx#heat_cool_address
  heat_cool_address: (Listing<String>|String)?

  /// KNX address for reading heat/cool mode. DPT 1.100
  /// https://www.home-assistant.io/integrations/knx#heat_cool_state_address
  heat_cool_state_address: (Listing<String>|String)?

  /// KKNX address for reading current humidity. DPT 9.007
  /// https://www.home-assistant.io/integrations/knx#humidity_state_address
  humidity_state_address: (Listing<String>|String)?

  /// Override the minimum temperature. https://www.home-assistant.io/integrations/knx#max_temp
  max_temp: Number?

  /// Override the minimum temperature. https://www.home-assistant.io/integrations/knx#min_temp
  min_temp: Number?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// KNX address for switching the climate device on/off. DPT 1
  /// https://www.home-assistant.io/integrations/knx#on_off_address
  on_off_address: (Listing<String>|String)?

  /// Value for switching the climate device on/off is inverted.
  /// https://www.home-assistant.io/integrations/knx#on_off_invert
  on_off_invert: Boolean?

  /// KNX address for gathering the current state (on/off) of the climate device. DPT 1
  /// https://www.home-assistant.io/integrations/knx#on_off_state_address
  on_off_state_address: (Listing<String>|String)?

  /// KNX address for setting operation mode (Frost protection/night/comfort). DPT 20.102
  /// https://www.home-assistant.io/integrations/knx#operation_mode_address
  operation_mode_address: (Listing<String>|String)?

  /// KNX address for switching on/off comfort mode. DPT 1
  /// https://www.home-assistant.io/integrations/knx#operation_mode_comfort_address
  operation_mode_comfort_address: (Listing<String>|String)?

  /// KNX address for switching on/off frost/heat protection mode. DPT 1
  /// https://www.home-assistant.io/integrations/knx#operation_mode_frost_protection_address
  operation_mode_frost_protection_address: (Listing<String>|String)?

  /// KNX address for switching on/off night mode. DPT 1
  /// https://www.home-assistant.io/integrations/knx#operation_mode_night_address
  operation_mode_night_address: (Listing<String>|String)?

  /// KNX address for switching on/off standby mode. DPT 1
  /// https://www.home-assistant.io/integrations/knx#operation_mode_standby_address
  operation_mode_standby_address: (Listing<String>|String)?

  /// KNX address for reading operation mode. DPT 20.102
  /// https://www.home-assistant.io/integrations/knx#operation_mode_state_address
  operation_mode_state_address: (Listing<String>|String)?

  /// Overrides the supported operation modes.
  /// https://www.home-assistant.io/integrations/knx#operation_modes
  operation_modes: Listing<"auto"|"building_protection"|"comfort"|"economy"|"standby">?

  /// KNX address for setpoint_shift. DPT 6.010 or DPT 9.002 based on setpoint_shift_mode
  /// https://www.home-assistant.io/integrations/knx#setpoint_shift_address
  setpoint_shift_address: (Listing<String>|String)?

  /// Maximum value of setpoint shift. https://www.home-assistant.io/integrations/knx#setpoint_shift_max
  setpoint_shift_max: Int(isBetween(0, 32))?

  /// Minimum value of setpoint shift. https://www.home-assistant.io/integrations/knx#setpoint_shift_min
  setpoint_shift_min: Int(isBetween(-32, 0))?

  /// Defines the internal device DPT used. Either ‘DPT6010’ or ‘DPT9002’.
  /// https://www.home-assistant.io/integrations/knx#setpoint_shift_mode
  setpoint_shift_mode: ("DPT6010"|"DPT9002")?

  /// KNX address for reading setpoint_shift. DPT 6.010 or DPT 9.002 based on setpoint_shift_mode
  /// https://www.home-assistant.io/integrations/knx#setpoint_shift_state_address
  setpoint_shift_state_address: (Listing<String>|String)?

  /// KNX address for turning the (vertical) swing on/off. DPT 1
  /// https://www.home-assistant.io/integrations/knx#swing_address
  swing_address: (Listing<String>|String)?

  /// KNX address for turning the horizontal swing on/off. DPT 1
  /// https://www.home-assistant.io/integrations/knx#swing_horizontal_address
  swing_horizontal_address: (Listing<String>|String)?

  /// KNX address for gathering the current state (on/off) of the horizontal swing. DPT 1
  /// https://www.home-assistant.io/integrations/knx#swing_horizontal_state_address
  swing_horizontal_state_address: (Listing<String>|String)?

  /// KNX address for gathering the current state (on/off) of the (vertical) swing. DPT 1
  /// https://www.home-assistant.io/integrations/knx#swing_state_address
  swing_state_address: (Listing<String>|String)?

  /// KNX group address for setting target temperature. DPT 9.001
  /// https://www.home-assistant.io/integrations/knx#target_temperature_address
  target_temperature_address: (Listing<String>|String)?

  /// KNX group address for reading current target temperature from KNX bus. DPT 9.001
  /// https://www.home-assistant.io/integrations/knx#target_temperature_state_address
  target_temperature_state_address: GroupAddresses

  /// KNX group address for reading current room temperature from KNX bus. DPT 9.001
  /// https://www.home-assistant.io/integrations/knx#temperature_address
  temperature_address: GroupAddresses

  /// Defines the step size in Kelvin for each step of setpoint_shift.
  /// https://www.home-assistant.io/integrations/knx#temperature_step
  temperature_step: Number(isBetween(0, 2))?
}

class Cover {
  /// KNX group address for tilting the cover to the dedicated angle. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#angle_address
  angle_address: (Listing<String>|String)?

  /// Separate KNX group address for requesting the current tilt angle of the cover. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#angle_state_address
  angle_state_address: (Listing<String>|String)?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/knx#device_class
  device_class: ("awning"|"blind"|"curtain"|"damper"|"door"|"garage"|"gate"|"shade"|"shutter"|"window")?

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// Set this to true if your actuator reports fully closed tilt as 0% in KNX.
  /// https://www.home-assistant.io/integrations/knx#invert_angle
  invert_angle: Boolean?

  /// Set this to true if your actuator reports fully closed position as 0% in KNX.
  /// https://www.home-assistant.io/integrations/knx#invert_position
  invert_position: Boolean?

  /// Set this to true to invert the binary up/down commands from/to your KNX actuator.
  /// https://www.home-assistant.io/integrations/knx#invert_updown
  invert_updown: Boolean?

  /// KNX group address for moving the cover full up or down. DPT 1
  /// https://www.home-assistant.io/integrations/knx#move_long_address
  move_long_address: (Listing<String>|String)?

  /// KNX group address for moving the cover stepwise up or down. DPT 1
  /// https://www.home-assistant.io/integrations/knx#move_short_address
  move_short_address: (Listing<String>|String)?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// KNX group address for moving the cover to the dedicated position. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#position_address
  position_address: (Listing<String>|String)?

  /// Separate KNX group address for requesting the current position of the cover. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#position_state_address
  position_state_address: (Listing<String>|String)?

  /// KNX group address for stopping the current movement of the cover. DPT 1
  /// https://www.home-assistant.io/integrations/knx#stop_address
  stop_address: (Listing<String>|String)?

  /// Time cover needs to travel down in seconds. Needed to calculate the intermediate positions of cover
  /// while traveling. https://www.home-assistant.io/integrations/knx#travelling_time_down
  travelling_time_down: Number(isPositive)?

  /// Time cover needs to travel up in seconds. Needed to calculate the intermediate positions of cover
  /// while traveling. https://www.home-assistant.io/integrations/knx#travelling_time_up
  travelling_time_up: Number(isPositive)?
}

class DateEntity {
  /// The group address to which new values will be sent. DPT 11.001
  /// https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Group address for retrieving the state from the KNX bus. DPT 11.001
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// Actively read the value from the bus. The maximum time interval (`<minutes>`) is 1440.
  /// https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Number|Boolean)?
}

class DateTimeEntity {
  /// The group address to which new values will be sent. DPT 19.001
  /// https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Group address for retrieving the state from the KNX bus. DPT 19.001
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// Actively read the value from the bus. The maximum time interval (`<minutes>`) is 1440.
  /// https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Number|Boolean)?
}

class Event {
  /// KNX group address to fire events. https://www.home-assistant.io/integrations/knx#state_address
  address: GroupAddresses

  /// A type from the value types. The decoded value will be written to the event data `value` key.
  /// https://www.home-assistant.io/integrations/knx/#value-types
  type: (
    "1byte_signed"
    |"1byte_unsigned"
    |"2byte_float"
    |"2byte_signed"
    |"2byte_unsigned"
    |"4byte_float"
    |"4byte_signed"
    |"4byte_unsigned"
    |"8byte_signed"
    |"absolute_humidity"
    |"absolute_temperature"
    |"acceleration"
    |"acceleration_angular"
    |"activation_energy"
    |"active_energy"
    |"active_energy_8byte"
    |"active_energy_kwh"
    |"activity"
    |"air_flow"
    |"amplitude"
    |"angle"
    |"angle_deg"
    |"angle_rad"
    |"angular_frequency"
    |"angular_momentum"
    |"angular_velocity"
    |"apparant_energy"
    |"apparant_energy_8byte"
    |"apparant_energy_kvah"
    |"apparent_power"
    |"area"
    |"brightness"
    |"capacitance"
    |"charge_density_surface"
    |"charge_density_volume"
    |"color_temperature"
    |"common_temperature"
    |"compressibility"
    |"concentration_ugm3"
    |"conductance"
    |"counter_pulses"
    |"curr"
    |"current"
    |"decimal_factor"
    |"delta_time_100ms"
    |"delta_time_10ms"
    |"delta_time_hrs"
    |"delta_time_min"
    |"delta_time_ms"
    |"delta_time_sec"
    |"density"
    |"electric_charge"
    |"electric_current"
    |"electric_current_density"
    |"electric_dipole_moment"
    |"electric_displacement"
    |"electric_field_strength"
    |"electric_flux"
    |"electric_flux_density"
    |"electric_polarization"
    |"electric_potential"
    |"electric_potential_difference"
    |"electrical_conductivity"
    |"electromagnetic_moment"
    |"electromotive_force"
    |"energy"
    |"enthalpy"
    |"flow_rate_m3h"
    |"force"
    |"frequency"
    |"heat_quantity"
    |"heatcapacity"
    |"heatflowrate"
    |"humidity"
    |"illuminance"
    |"impedance"
    |"kelvin_per_percent"
    |"latin_1"
    |"length"
    |"length_m"
    |"length_mm"
    |"light_quantity"
    |"long_delta_timesec"
    |"long_time_period_hrs"
    |"long_time_period_min"
    |"long_time_period_sec"
    |"luminance"
    |"luminous_flux"
    |"luminous_intensity"
    |"magnetic_field_strength"
    |"magnetic_flux"
    |"magnetic_flux_density"
    |"magnetic_moment"
    |"magnetic_polarization"
    |"magnetization"
    |"magnetomotive_force"
    |"mass"
    |"mass_flux"
    |"mol"
    |"momentum"
    |"percent"
    |"percentU8"
    |"percentV16"
    |"percentV8"
    |"phaseangledeg"
    |"phaseanglerad"
    |"power"
    |"power_2byte"
    |"power_density"
    |"powerfactor"
    |"ppm"
    |"pressure"
    |"pressure_2byte"
    |"pulse"
    |"pulse_2byte"
    |"pulse_2byte_signed"
    |"pulse_4_ucount"
    |"pulse_4byte"
    |"rain_amount"
    |"reactance"
    |"reactive_energy"
    |"reactive_energy_8byte"
    |"reactive_energy_kvarh"
    |"resistance"
    |"resistivity"
    |"rotation_angle"
    |"scene_number"
    |"self_inductance"
    |"solid_angle"
    |"sound_intensity"
    |"speed"
    |"stress"
    |"string"
    |"surface_tension"
    |"tariff"
    |"temperature"
    |"temperature_a"
    |"temperature_difference"
    |"temperature_difference_2byte"
    |"temperature_f"
    |"thermal_capacity"
    |"thermal_conductivity"
    |"thermoelectric_power"
    |"time_1"
    |"time_2"
    |"time_period_100msec"
    |"time_period_10msec"
    |"time_period_hrs"
    |"time_period_min"
    |"time_period_msec"
    |"time_period_sec"
    |"time_seconds"
    |"torque"
    |"voltage"
    |"volume"
    |"volume_flow"
    |"volume_flux"
    |"volume_liquid_litre"
    |"volume_m3"
    |"weight"
    |"wind_speed_kmh"
    |"wind_speed_ms"
    |"work")?
}

class ExposeTime {
  /// Group address state or attribute updates will be sent to. GroupValueRead requests will be answered.
  /// https://www.home-assistant.io/integrations/knx#address
  address: String(matches(Regex(#"^(\d{1,2}(\/\d{1,2})?\/\d{1,4}|\d{1,5}|i-.+)$"#)))

  /// Either time, date or datetime. https://www.home-assistant.io/integrations/knx/#value-types
  type: "date"|"datetime"|"time"
}

class ExposeSensor {
  /// Group address state or attribute updates will be sent to. GroupValueRead requests will be answered.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  address: GroupAddresses

  /// Attribute of the entity that shall be sent to the KNX bus. If not set (or None) the state will be
  /// sent.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  attribute: String?

  /// Minimum time in seconds between two sent telegrams.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  cooldown: Number(isPositive)?

  /// Default value to send to the bus if the state or attribute value is None.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  default: (String|Number|Boolean)?

  /// Entity ID to be exposed.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  entity_id: String(matches(Regex(#"^.*\..*$"#)))

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Type of the exposed value. https://www.home-assistant.io/integrations/knx/#value-types
  type: 
    "1byte_signed"
    |"1byte_unsigned"
    |"2byte_float"
    |"2byte_signed"
    |"2byte_unsigned"
    |"4byte_float"
    |"4byte_signed"
    |"4byte_unsigned"
    |"8byte_signed"
    |"absolute_humidity"
    |"absolute_temperature"
    |"acceleration"
    |"acceleration_angular"
    |"activation_energy"
    |"active_energy"
    |"active_energy_8byte"
    |"active_energy_kwh"
    |"activity"
    |"air_flow"
    |"amplitude"
    |"angle"
    |"angle_deg"
    |"angle_rad"
    |"angular_frequency"
    |"angular_momentum"
    |"angular_velocity"
    |"apparant_energy"
    |"apparant_energy_8byte"
    |"apparant_energy_kvah"
    |"apparent_power"
    |"area"
    |"binary"
    |"brightness"
    |"capacitance"
    |"charge_density_surface"
    |"charge_density_volume"
    |"color_temperature"
    |"common_temperature"
    |"compressibility"
    |"concentration_ugm3"
    |"conductance"
    |"counter_pulses"
    |"curr"
    |"current"
    |"date"
    |"datetime"
    |"decimal_factor"
    |"delta_time_100ms"
    |"delta_time_10ms"
    |"delta_time_hrs"
    |"delta_time_min"
    |"delta_time_ms"
    |"delta_time_sec"
    |"density"
    |"electric_charge"
    |"electric_current"
    |"electric_current_density"
    |"electric_dipole_moment"
    |"electric_displacement"
    |"electric_field_strength"
    |"electric_flux"
    |"electric_flux_density"
    |"electric_polarization"
    |"electric_potential"
    |"electric_potential_difference"
    |"electrical_conductivity"
    |"electromagnetic_moment"
    |"electromotive_force"
    |"energy"
    |"enthalpy"
    |"flow_rate_m3h"
    |"force"
    |"frequency"
    |"heat_quantity"
    |"heatcapacity"
    |"heatflowrate"
    |"humidity"
    |"illuminance"
    |"impedance"
    |"kelvin_per_percent"
    |"latin_1"
    |"length"
    |"length_m"
    |"length_mm"
    |"light_quantity"
    |"long_delta_timesec"
    |"long_time_period_hrs"
    |"long_time_period_min"
    |"long_time_period_sec"
    |"luminance"
    |"luminous_flux"
    |"luminous_intensity"
    |"magnetic_field_strength"
    |"magnetic_flux"
    |"magnetic_flux_density"
    |"magnetic_moment"
    |"magnetic_polarization"
    |"magnetization"
    |"magnetomotive_force"
    |"mass"
    |"mass_flux"
    |"mol"
    |"momentum"
    |"percent"
    |"percentU8"
    |"percentV16"
    |"percentV8"
    |"phaseangledeg"
    |"phaseanglerad"
    |"power"
    |"power_2byte"
    |"power_density"
    |"powerfactor"
    |"ppm"
    |"pressure"
    |"pressure_2byte"
    |"pulse"
    |"pulse_2byte"
    |"pulse_2byte_signed"
    |"pulse_4_ucount"
    |"pulse_4byte"
    |"rain_amount"
    |"reactance"
    |"reactive_energy"
    |"reactive_energy_8byte"
    |"reactive_energy_kvarh"
    |"resistance"
    |"resistivity"
    |"rotation_angle"
    |"scene_number"
    |"self_inductance"
    |"solid_angle"
    |"sound_intensity"
    |"speed"
    |"stress"
    |"string"
    |"surface_tension"
    |"tariff"
    |"temperature"
    |"temperature_a"
    |"temperature_difference"
    |"temperature_difference_2byte"
    |"temperature_f"
    |"thermal_capacity"
    |"thermal_conductivity"
    |"thermoelectric_power"
    |"time"
    |"time_1"
    |"time_2"
    |"time_period_100msec"
    |"time_period_10msec"
    |"time_period_hrs"
    |"time_period_min"
    |"time_period_msec"
    |"time_period_sec"
    |"time_seconds"
    |"torque"
    |"voltage"
    |"volume"
    |"volume_flow"
    |"volume_flux"
    |"volume_liquid_litre"
    |"volume_m3"
    |"weight"
    |"wind_speed_kmh"
    |"wind_speed_ms"
    |"work"

  /// A template to process the value before sending it to the KNX bus. The template has access to the
  /// entity state or attribute value as `value`.
  /// https://www.home-assistant.io/integrations/knx#exposing-entity-states-entity-attributes-or-time-to-knx-bus
  value_template: String?
}

class Fan {
  /// KNX group address for setting the percentage or step of the fan. DPT 5.001 or DPT 5.010
  /// https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// The maximum amount of steps for a step-controlled fan. If set, the integration will convert
  /// percentages to steps automatically. https://www.home-assistant.io/integrations/knx#max_step
  max_step: UInt8?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// KNX group address for switching the fan oscillation on or off. DPT 1
  /// https://www.home-assistant.io/integrations/knx#oscillation_address
  oscillation_address: (Listing<String>|String)?

  /// KNX group address for retrieving the state of the fan oscillation. DPT 1
  /// https://www.home-assistant.io/integrations/knx#oscillation_stat_address
  oscillation_stat_address: (Listing<String>|String)?

  /// KNX group address for retrieving the percentage or step of the fan. DPT 5.001 or DPT 5.010
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?
}

class Light {
  /// KNX group address for switching the light on and off. DPT 1.001
  /// https://www.home-assistant.io/integrations/knx#address
  address: (Listing<String>|String)?

  /// KNX group address for setting the brightness of the light in percent (absolute dimming). DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#brightness_address
  brightness_address: (Listing<String>|String)?

  /// KNX group address for retrieving the brightness of the light in percent. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#brightness_state_address
  brightness_state_address: (Listing<String>|String)?

  /// KNX group address for setting the RGB color of the light. DPT 232.600
  /// https://www.home-assistant.io/integrations/knx#color_address
  color_address: (Listing<String>|String)?

  /// KNX group address for retrieving the RGB color of the light. DPT 232.600
  /// https://www.home-assistant.io/integrations/knx#color_state_address
  color_state_address: (Listing<String>|String)?

  /// KNX group address for setting the color temperature of the light. DPT 5.001 or 7.600 based on
  /// color_temperature_mode https://www.home-assistant.io/integrations/knx#color_temperature_address
  color_temperature_address: (Listing<String>|String)?

  /// Color temperature group address data type. absolute color temperature in Kelvin.
  /// color_temperature_address -> DPT 7.600. relative color temperature in percent cold white (0%
  /// warmest; 100% coldest). color_temperature_address -> DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#color_temperature_mode
  color_temperature_mode: ("absolute"|"relative")?

  /// KNX group address for retrieving the color temperature of the light. DPT 5.001 or 7.600 based on
  /// color_temperature_mode
  /// https://www.home-assistant.io/integrations/knx#color_temperature_state_address
  color_temperature_state_address: (Listing<String>|String)?

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// KNX group address for setting the hue of the light color in degrees. DPT 5.003
  /// https://www.home-assistant.io/integrations/knx#hue_address
  hue_address: (Listing<String>|String)?

  /// KNX group address for retrieving the hue of the light color in degrees. DPT 5.003
  /// https://www.home-assistant.io/integrations/knx#hue_state_address
  hue_state_address: (Listing<String>|String)?

  /// Used when the actuator only supports individual group addresses for colors. When address is
  /// specified for all 3 (or 4) individual colors the root address key can be omitted.
  /// https://www.home-assistant.io/integrations/knx#individual_colors
  individual_colors: IndividualColors?

  /// Warmest possible color temperature in Kelvin. Used in combination with color_temperature_address.
  /// https://www.home-assistant.io/integrations/knx#max_kelvin
  max_kelvin: Int(this >= 1)?

  /// Coldest possible color temperature in Kelvin. Used in combination with color_temperature_address.
  /// https://www.home-assistant.io/integrations/knx#min_kelvin
  min_kelvin: Int(this >= 1)?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// KNX group address for setting the RGBW color of the light. DPT 251.600
  /// https://www.home-assistant.io/integrations/knx#rgbw_address
  rgbw_address: (Listing<String>|String)?

  /// KNX group address for retrieving the RGBW color of the light. DPT 251.600
  /// https://www.home-assistant.io/integrations/knx#rgbw_state_address
  rgbw_state_address: (Listing<String>|String)?

  /// KNX group address for setting the saturation of the light color in percent. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#saturation_address
  saturation_address: (Listing<String>|String)?

  /// KNX group address for retrieving the saturation of the light color in percent. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#saturation_state_address
  saturation_state_address: (Listing<String>|String)?

  /// KNX group address for retrieving the switch state of the light. DPT 1.001
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// KNX group address for setting the xyY color of the light. DPT 242.600
  /// https://www.home-assistant.io/integrations/knx#xyy_address
  xyy_address: (Listing<String>|String)?

  /// KNX group address for retrieving the xyY color of the light. DPT 242.600
  /// https://www.home-assistant.io/integrations/knx#xyy_state_address
  xyy_state_address: (Listing<String>|String)?
}

/// Used when the actuator only supports individual group addresses for colors. When address is specified
/// for all 3 (or 4) individual colors the root address key can be omitted.
/// https://www.home-assistant.io/integrations/knx#individual_colors
class IndividualColors {
  /// Group addresses for the blue component. https://www.home-assistant.io/integrations/knx#blue
  blue: LightColor

  /// Group addresses for the green component. https://www.home-assistant.io/integrations/knx#green
  green: LightColor

  /// Group addresses for the red component. https://www.home-assistant.io/integrations/knx#red
  red: LightColor

  /// Group addresses for the white component. https://www.home-assistant.io/integrations/knx#white
  white: Light?
}

class LightColor {
  /// KNX group address to switch this color component. DPT 1.001
  /// https://www.home-assistant.io/integrations/knx#address
  address: (Listing<String>|String)?

  /// KNX group address for the state of this color component. DPT 1.001
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// KNX group address to set the brightness of this color component. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#brightness_address
  brightness_address: GroupAddresses

  /// KNX group address for the current brightness of this color component. DPT 5.001
  /// https://www.home-assistant.io/integrations/knx#brightness_state_address
  brightness_state_address: (Listing<String>|String)?
}

class Notify {
  /// KNX group address of the notification. DPT 16.000
  /// https://www.home-assistant.io/integrations/knx#address
  address: String(matches(Regex(#"^(\d{1,2}(\/\d{1,2})?\/\d{1,4}|\d{1,5}|i-.+)$"#)))

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Any supported type of KNX Sensor representing a string value.
  /// https://www.home-assistant.io/integrations/knx#type
  type: ("latin_1"|"string")?
}

class NumberEntity {
  /// KNX group address for sending a new value. https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// Maximum value that can be sent. Defaults to the `type` DPT maximum value.
  /// https://www.home-assistant.io/integrations/knx#number
  max: Number?

  /// Minimum value that can be sent. Defaults to the `type` DPT minimum value.
  /// https://www.home-assistant.io/integrations/knx#number
  min: Number?

  /// Specifies the mode used in the UI. https://www.home-assistant.io/integrations/knx#number
  mode: ("auto"|"box"|"slider")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Group address for retrieving the state from the KNX bus.
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// Step value. Defaults to the step size defined for the DPT in the KNX specifications.
  /// https://www.home-assistant.io/integrations/knx#temperature_step
  step: Number(isPositive)?

  /// Any supported type of KNX Sensor representing a numeric value (e.g., "percent" or "temperature")
  /// https://www.home-assistant.io/integrations/knx/#value-types
  type: ValueType
}

class Scene {
  /// KNX group address for the scene. DPT 17.001 https://www.home-assistant.io/integrations/knx#address
  address: (Listing<String>|String)?

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// KNX scene number to be activated (range 1..64 ).
  /// https://www.home-assistant.io/integrations/knx#scene_number
  scene_number: Int(isBetween(1, 64))
}

class Select0 {
  /// Group address new values will be sent to. https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// List of options to choose from. Each `option` and `payload` have to be unique.
  /// https://www.home-assistant.io/integrations/knx#options
  options: Listing<Option>

  /// The length of the payload expected for the DPT. Use `0` for DPT 1, 2 or 3.
  /// https://www.home-assistant.io/integrations/knx#payload_length
  payload_length: Int

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Group address for retrieving the state from the KNX bus.
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// Actively read the value from the bus. https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Boolean)?
}

class Option {
  /// The name of the option used to trigger the assigned `payload`.
  /// https://www.home-assistant.io/integrations/knx#option
  option: String

  /// The raw payload assigned to the `option`. https://www.home-assistant.io/integrations/knx#payload
  payload: Int
}

class Sensor {
  /// Defines if telegrams with equal payload as the previously received telegram should trigger a state
  /// update within Home Assistant. https://www.home-assistant.io/integrations/knx#always_callback
  always_callback: Boolean?

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/knx#device_class
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"battery"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"conductivity"
    |"current"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"gas"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"moisture"
    |"monetary"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"ozone"
    |"ph"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"pressure"
    |"reactive_power"
    |"signal_strength"
    |"sound_pressure"
    |"speed"
    |"sulphur_dioxide"
    |"temperature"
    |"timestamp"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// KNX group address of the sensor. https://www.home-assistant.io/integrations/knx#state_address
  state_address: GroupAddresses

  /// The State Class of the sensor. https://www.home-assistant.io/integrations/knx#state_class
  state_class: ("measurement"|"total"|"total_increasing")?

  /// Actively read the value from the bus. https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Boolean)?

  /// A type from the value types. https://www.home-assistant.io/integrations/knx/#value-types
  type: ValueType
}

class Switch {
  /// KNX group address for switching the switch on/off. DPT 1
  /// https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/knx#device_class
  device_class: ("outlet"|"switch")?

  /// Invert the telegrams payload before processing or sending.
  /// https://www.home-assistant.io/integrations/knx#invert
  invert: Boolean?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Separate KNX group address for retrieving the switch state. DPT 1
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?
}

class TextEntity {
  /// KNX group address for sending a text. https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// Specifies the mode used in the UI. https://www.home-assistant.io/integrations/knx#text
  mode: ("password"|"text")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#text
  name: String?

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Group address for retrieving the state from the KNX bus.
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// DPT to encode the text. Either `latin_1` for DPT 16.001 or `string` for DPT 16.000 (ASCII).
  /// https://www.home-assistant.io/integrations/knx/#value-types
  type: ValueType
}

class TimeEntity {
  /// The group address to which new values will be sent. DPT 10.001
  /// https://www.home-assistant.io/integrations/knx#address
  address: GroupAddresses

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Respond to GroupValueRead telegrams received to the configured `address`.
  /// https://www.home-assistant.io/integrations/knx#respond_to_read
  respond_to_read: Boolean?

  /// Group address for retrieving the state from the KNX bus. DPT 10.001
  /// https://www.home-assistant.io/integrations/knx#state_address
  state_address: (Listing<String>|String)?

  /// Actively read the value from the bus. The maximum time interval (`<minutes>`) is 1440.
  /// https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Number|Boolean)?
}

class Weather {
  /// KNX address reading current air pressure. DPT 9.006
  /// https://www.home-assistant.io/integrations/knx#address_air_pressure
  address_air_pressure: (Listing<String>|String)?

  /// KNX group address for reading current brightness to east coordinate from KNX bus. DPT 9.004
  /// https://www.home-assistant.io/integrations/knx#address_brightness_east
  address_brightness_east: (Listing<String>|String)?

  /// KNX group address for reading current brightness to north coordinate from KNX bus. DPT 9.004
  /// https://www.home-assistant.io/integrations/knx#address_brightness_north
  address_brightness_north: (Listing<String>|String)?

  /// KNX group address for reading current brightness to south coordinate from KNX bus. DPT 9.004
  /// https://www.home-assistant.io/integrations/knx#address_brightness_south
  address_brightness_south: (Listing<String>|String)?

  /// KNX group address for reading current brightness to west coordinate from KNX bus. DPT 9.004
  /// https://www.home-assistant.io/integrations/knx#address_brightness_west
  address_brightness_west: (Listing<String>|String)?

  /// KNX group address for reading if it’s day/night.
  /// https://www.home-assistant.io/integrations/knx#address_day_night
  address_day_night: (Listing<String>|String)?

  /// KNX group address for reading if frost alarm is on/off.
  /// https://www.home-assistant.io/integrations/knx#address_frost_alarm
  address_frost_alarm: (Listing<String>|String)?

  /// KNX address for reading current humidity. DPT 9.007
  /// https://www.home-assistant.io/integrations/knx#address_humidity
  address_humidity: (Listing<String>|String)?

  /// KNX group address for reading if rain alarm is on/off.
  /// https://www.home-assistant.io/integrations/knx#address_rain_alarm
  address_rain_alarm: (Listing<String>|String)?

  /// KNX group address for reading if wind alarm is on/off.
  /// https://www.home-assistant.io/integrations/knx#address_wind_alarm
  address_wind_alarm: (Listing<String>|String)?

  /// KNX group address for reading current wind bearing from KNX bus. DPT 5.003
  /// https://www.home-assistant.io/integrations/knx#address_wind_bearing
  address_wind_bearing: (Listing<String>|String)?

  /// KNX group address for reading current wind speed from KNX bus. DPT 9.005
  /// https://www.home-assistant.io/integrations/knx#address_wind_speed
  address_wind_speed: (Listing<String>|String)?

  /// The category of the entity. https://www.home-assistant.io/integrations/knx#entity_category
  entity_category: ("config"|"diagnostic")?

  /// A name for this device used within Home Assistant.
  /// https://www.home-assistant.io/integrations/knx#name
  name: String?

  /// Actively read the value from the bus. If false no GroupValueRead telegrams will be sent to the bus.
  /// https://www.home-assistant.io/integrations/knx#sync_state
  sync_state: (String|Boolean)?

  /// KNX group address for reading current outside temperature from KNX bus. DPT 9.001
  /// https://www.home-assistant.io/integrations/knx#temperature_address
  address_temperature: GroupAddresses
}

class Item28 {
  /// The mqtt alarm panel platform enables the possibility to control MQTT capable alarm panels. The
  /// Alarm icon will change state after receiving a new state from state_topic.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/
  alarm_control_panel: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |AlarmControlPanelItem
    |Listing<AlarmControlPanelItem>)?

  /// The mqtt binary sensor platform uses an MQTT message received to set the binary sensor’s state to
  /// on or off. https://www.home-assistant.io/integrations/binary_sensor.mqtt
  binary_sensor: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |BinarySensorItem2
    |Listing<BinarySensorItem2>)?

  /// The mqtt button platform lets you send an MQTT message when the button is pressed in the frontend
  /// or the button press service is called. https://www.home-assistant.io/integrations/button.mqtt
  button: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |ButtonItem1
    |Listing<ButtonItem1>)?

  /// The mqtt camera platform allows you to integrate the content of an image file sent through MQTT
  /// into Home Assistant as a camera. https://www.home-assistant.io/integrations/camera.mqtt/
  camera: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |CameraItem
    |Listing<CameraItem>)?

  /// The mqtt climate platform lets you control your MQTT enabled HVAC devices.
  /// https://www.home-assistant.io/integrations/climate.mqtt/
  climate: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |ClimateItem1
    |Listing<ClimateItem1>)?

  /// The mqtt cover platform allows you to control an MQTT cover (such as blinds, a rollershutter or a
  /// garage door). https://www.home-assistant.io/integrations/cover.mqtt/
  cover: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |CoverItem1
    |Listing<CoverItem1>)?

  /// The mqtt device tracker platform allows you to detect presence by monitoring an MQTT topic for new
  /// locations. https://www.home-assistant.io/integrations/device_tracker.mqtt/
  device_tracker: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |DeviceTrackerItem
    |Listing<DeviceTrackerItem>)?

  /// The mqtt fan platform lets you control your MQTT enabled fans.
  /// https://www.home-assistant.io/integrations/fan.mqtt/
  fan: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |FanItem1
    |Listing<FanItem1>)?

  /// The mqtt humidifier platform lets you control your MQTT enabled humidifiers.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt
  humidifier: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |HumidifierItem
    |Listing<HumidifierItem>)?

  /// The mqtt image platform allows you to integrate the content of an image file sent through MQTT into
  /// Home Assistant as an image. https://www.home-assistant.io/integrations/image.mqtt
  image: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |ImageItem1
    |Listing<ImageItem1>)?

  /// The mqtt light platform lets you control your MQTT enabled lights through one of the supported
  /// message schemas, default, json or template. https://www.home-assistant.io/integrations/light.mqtt/
  light: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |LightDefaultItem
    |LightJSONItem
    |LightTemplateItem
    |Listing<LightDefaultItem|LightTemplateItem>)?

  /// The mqtt lock platform lets you control your MQTT enabled locks.
  /// https://www.home-assistant.io/integrations/lock.mqtt/
  lock: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |LockItem
    |Listing<LockItem>)?

  /// The MQTT number platform. https://www.home-assistant.io/integrations/number.mqtt/
  number: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |NumberItem1
    |Listing<NumberItem1>)?

  /// The mqtt scene platform lets you control your MQTT enabled scenes.
  /// https://www.home-assistant.io/integrations/scene.mqtt/
  scene: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SceneItem
    |Listing<SceneItem>)?

  /// This mqtt select platform uses the MQTT message payload as the select value.
  /// https://www.home-assistant.io/integrations/select.mqtt
  select: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SelectItem1
    |Listing<SelectItem1>)?

  /// The mqtt siren platform lets you control your MQTT enabled sirens and text based notification
  /// devices. https://www.home-assistant.io/integrations/siren.mqtt
  siren: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SirenItem
    |Listing<SirenItem>)?

  /// This mqtt sensor platform uses the MQTT message payload as the sensor value.
  /// https://www.home-assistant.io/integrations/sensor.mqtt
  sensor: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SensorItem2
    |Listing<SensorItem2>)?

  /// The mqtt switch platform lets you control your MQTT enabled switches.
  /// https://www.home-assistant.io/integrations/switch.mqtt
  `switch`: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |SwitchItem2
    |Listing<SwitchItem2>)?

  /// The mqtt vacuum integration allows you to control your MQTT-enabled vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt
  vacuum: (
    String(matches(Regex("^!include_dir_list .*$")))
    |String(matches(Regex("^!include_dir_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_list\t.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list .*$")))
    |String(matches(Regex("^!include_dir_merge_list\r.*$")))
    |String(matches(Regex("""
  ^!include_dir_merge_list
  .*$
  """)))
    |String(matches(Regex("^!include_dir_merge_list\t.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |String(matches(Regex("^!include_dir_merge_list.*$")))
    |VacuumItem
    |Listing<VacuumLegacyItem>
    |Listing<VacuumItem|VacuumLegacyItem>)?
}

class AlarmControlPanelItem {
  /// If defined, specifies a code to enable or disable the alarm in the frontend.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#code
  code: String?

  /// If true the code is required to arm the alarm. If false the code is not validated.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#code_arm_required
  code_arm_required: Boolean?

  /// If true the code is required to disarm the alarm. If false the code is not validated.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#code_disarm_required
  code_disarm_required: Boolean?

  /// If true the code is required to trigger the alarm. If false the code is not validated.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#code_trigger_required
  code_trigger_required: Boolean?

  /// The template used for the command payload. Available variables: action and code.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#command_template
  command_template: String?

  /// The MQTT topic to publish commands to change the alarm state.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#command_topic
  command_topic: String

  /// The encoding of the payloads received and published messages. Set to "" to disable decoding of
  /// incoming payload. https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#encoding
  encoding: String?

  /// Picture URL for the entity.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#entity_picture
  entity_picture: String?

  /// The name of the MQTT alarm.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#name
  name: String?

  /// The payload to set armed-away mode on your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_arm_away
  payload_arm_away: String?

  /// The payload to set armed-home mode on your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_arm_home
  payload_arm_home: String?

  /// The payload to set armed-night mode on your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_arm_night
  payload_arm_night: String?

  /// The payload to set armed-vacation mode on your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_arm_vacation
  payload_arm_vacation: String?

  /// The payload to set armed-custom-bypass mode on your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_arm_custom_bypass
  payload_arm_custom_bypass: String?

  /// The payload to disarm your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_disarm
  payload_disarm: String?

  /// The payload to trigger the alarm on your Alarm Panel.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#payload_trigger
  payload_trigger: String?

  /// The maximum QoS level of the state topic.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Set the retain flag for data from the alarm panel. Retain is enabled by default.
  retain: Boolean?

  /// The MQTT topic subscribed to receive sensor's state.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#state_topic
  state_topic: String

  /// A list of features that the alarm control panel supports.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#supported_features
  supported_features: Listing<"arm_away"|"arm_custom_bypass"|"arm_home"|"arm_night"|"arm_vacation"|"trigger">?

  /// Defines a template to extract the value.
  /// https://www.home-assistant.io/integrations/alarm_control_panel.mqtt/#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

/// Information about the device this sensor is a part of to tie it into the device registry. Only works
/// through MQTT discovery and when unique_id is set.
class VacuumLegacyItemDevice {
  /// A link to the webpage that can manage the configuration of this device. Can be either an http://,
  /// https:// or an internal homeassistant:// URL
  configuration_url: String?

  /// A list of connections of the device to the outside world as a list of tuples.
  connections: Listing<Listing(length.isBetween(2, 2))>?

  /// The hardware version of the device.
  hw_version: String?

  /// A list of IDs that uniquely identify the device. For example a serial number.
  identifiers: (Listing<String>|String)?

  /// The manufacturer of the device.
  manufacturer: String?

  /// The model of the device.
  model: String?

  /// The model identifier of the device.
  model_id: String?

  /// The name of the device.
  name: String?

  /// The serial number of the device.
  serial_number: String?

  /// Suggest an area if the device isn’t in one yet.
  suggested_area: String?

  /// The firmware version of the device.
  sw_version: String?

  /// Identifier of a device that routes messages between this device and Home Assistant. Examples of
  /// such devices are hubs, or parent devices of a sub-device.
  via_device: String?
}

class Availability {
  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  topic: String

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Defines a template to extract the value for payload_available and payload_not_available.
  value_template: String?
}

class BinarySensorItem2 {
  /// The type/class of the sensor to set the icon in the frontend.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#device_class
  device_class: (
    "battery"
    |"battery_charging"
    |"carbon_monoxide"
    |"cold"
    |"connectivity"
    |"door"
    |"garage_door"
    |"gas"
    |"heat"
    |"light"
    |"lock"
    |"moisture"
    |"motion"
    |"moving"
    |"occupancy"
    |"opening"
    |"plug"
    |"power"
    |"presence"
    |"problem"
    |"running"
    |"safety"
    |"smoke"
    |"sound"
    |"tamper"
    |"update"
    |"vibration"
    |"window")?

  /// The encoding of the payloads received. Set to "" to disable decoding of incoming payload.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#encoding
  encoding: String?

  /// Picture URL for the entity.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#entity_picture
  entity_picture: String?

  /// Defines the number of seconds after the sensor’s state expires, if it’s not updated. After expiry,
  /// the sensor’s state becomes unavailable.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#expire_after
  expire_after: Int(isPositive)?

  /// Sends update events even if the value hasn’t changed. Useful if you want to have meaningful value
  /// graphs in history. https://www.home-assistant.io/integrations/binary_sensor.mqtt#expire_after
  force_update: Boolean?

  /// The name of the MQTT binary sensor. Can be set to null if only the device name is relevant.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#name
  name: String?

  /// For sensors that only send on state updates (like PIRs), this variable sets a delay in seconds
  /// after which the sensor’s state will be updated back to off.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#off_delay
  off_delay: Int(isPositive)?

  /// The string that represents the off state. It will be compared to the message in the state_topic.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt/#payload_off
  payload_off: String?

  /// The string that represents the on state. It will be compared to the message in the state_topic.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt/#payload_on
  payload_on: String?

  /// Must be binary_sensor. Only allowed and required in MQTT auto discovery device messages.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#platform
  platform: "binary_sensor"?

  /// The maximum QoS level of the state topic.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// The MQTT topic subscribed to receive sensor's state.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#state_topic
  state_topic: String

  /// Defines a template to extract the value.
  /// https://www.home-assistant.io/integrations/binary_sensor.mqtt#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class ButtonItem1 {
  /// The MQTT topic to publish commands to trigger the button.
  /// https://www.home-assistant.io/integrations/button.mqtt/#command_topic
  command_topic: String

  /// Defines a template to generate the payload to send to command_topic.
  /// https://www.home-assistant.io/integrations/button.mqtt/#command_template
  command_template: String?

  /// Sets the class of the device, changing the device state and icon that is displayed in the frontend.
  /// https://www.home-assistant.io/integrations/button.mqtt/#device_class
  device_class: String?

  /// The name of the MQTT button. https://www.home-assistant.io/integrations/button.mqtt/#name
  name: String?

  /// The payload to send to trigger the button.
  /// https://www.home-assistant.io/integrations/button.mqtt/#payload_press
  payload_press: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/button.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/button.mqtt/#retain
  retain: Boolean?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class CameraItem {
  /// The name of the MQTT camera. https://www.home-assistant.io/integrations/camera.mqtt#name
  name: String?

  /// The MQTT topic to subscribe to. https://www.home-assistant.io/integrations/camera.mqtt/#device
  topic: String

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class ClimateItem1 {
  /// A template to render the value received on the action_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#action_template
  action_template: String?

  /// The MQTT topic to subscribe for changes of the current action. If this is set, the climate graph
  /// uses the value received as data source. Valid values: off, heating, cooling, drying, idle, fan.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#action_topic
  action_topic: String?

  /// The MQTT topic to publish commands to switch auxiliary heat.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#aux_command_topic
  aux_command_topic: String?

  /// A template to render the value received on the aux_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#aux_state_template
  aux_state_template: String?

  /// The MQTT topic to subscribe for changes of the auxiliary heat mode. If this is not set, the
  /// auxiliary heat mode works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#aux_state_topic
  aux_state_topic: String?

  /// A template with which the value received on current_temperature_topic will be rendered.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#current_temperature_template
  current_temperature_template: String?

  /// The MQTT topic on which to listen for the current temperature.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#current_temperature_topic
  current_temperature_topic: String?

  /// The encoding of the payloads received and published messages. Set to "" to disable decoding of
  /// incoming payload. https://www.home-assistant.io/integrations/climate.mqtt/#encoding
  encoding: String?

  /// A template to render the value sent to the fan_mode_command_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#fan_mode_command_template
  fan_mode_command_template: String?

  /// The MQTT topic to publish commands to change the fan mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#fan_mode_command_topic
  fan_mode_command_topic: String?

  /// A template to render the value received on the fan_mode_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#fan_mode_state_template
  fan_mode_state_template: String?

  /// The MQTT topic to subscribe for changes of the HVAC fan mode. If this is not set, the fan mode
  /// works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#fan_mode_state_topic
  fan_mode_state_topic: String?

  /// A list of supported fan modes. https://www.home-assistant.io/integrations/climate.mqtt/#fan_modes
  fan_modes: Listing<String>?

  /// Set the initial target temperature.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#initial
  initial: Int?

  /// Maximum set point available. https://www.home-assistant.io/integrations/climate.mqtt/#max_temp
  max_temp: Number?

  /// Minimum set point available. https://www.home-assistant.io/integrations/climate.mqtt/#min_temp
  min_temp: Number?

  /// A template to render the value sent to the mode_command_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#mode_command_template
  mode_command_template: String?

  /// The MQTT topic to publish commands to change the HVAC operation mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#mode_command_topic
  mode_command_topic: String?

  /// A template to render the value received on the mode_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#mode_state_template
  mode_state_template: String?

  /// The MQTT topic to subscribe for changes of the HVAC operation mode. If this is not set, the
  /// operation mode works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#mode_state_topic
  mode_state_topic: String?

  /// A list of supported modes. Needs to be a subset of the default values.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#modes
  modes: Listing<"auto"|"cool"|"dry"|"fan_only"|"heat"|"off">?

  /// The name of the HVAC. https://www.home-assistant.io/integrations/climate.mqtt#name
  name: String?

  /// The payload that represents disabled state.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#payload_off
  payload_off: String?

  /// The payload that represents enabled state.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#payload_on
  payload_on: String?

  /// The MQTT topic to publish commands to change the power state. This is useful if your device has a
  /// separate power toggle in addition to mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#power_command_topic
  power_command_topic: String?

  /// The desired precision for this device. Can be used to match your actual thermostat’s precision.
  /// Supported values are 0.1, 0.5 and 1.0.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#precision
  precision: Number(this == 0.1 || this == 0.5 || this == 1)?

  /// Defines a template to generate the payload to send to preset_mode_command_topic.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#preset_mode_command_template
  preset_mode_command_template: String?

  /// The MQTT topic to publish commands to change the preset mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#preset_mode_command_topic
  preset_mode_command_topic: String?

  /// The MQTT topic subscribed to receive climate speed based on presets. When preset ‘none’ is received
  /// or None the preset_mode will be reset.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#preset_mode_state_topic
  preset_mode_state_topic: String?

  /// Defines a template to extract the preset_mode value from the payload received on
  /// preset_mode_state_topic.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#preset_mode_value_template
  preset_mode_value_template: String?

  /// List of preset modes this climate is supporting. Common examples include eco, away, boost, comfort,
  /// home, sleep and activity. https://www.home-assistant.io/integrations/climate.mqtt/#preset_modes
  preset_modes: Listing<String>?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Defines if published messages should have the retain flag set.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#retain
  retain: Boolean?

  /// A template to render the value sent to the swing_mode_command_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#swing_mode_command_template
  swing_mode_command_template: String?

  /// The MQTT topic to publish commands to change the swing mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#swing_mode_command_topic
  swing_mode_command_topic: String?

  /// A template to render the value received on the swing_mode_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#swing_mode_state_template
  swing_mode_state_template: String?

  /// The MQTT topic to subscribe for changes of the HVAC swing mode. If this is not set, the swing mode
  /// works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#swing_mode_state_topic
  swing_mode_state_topic: String?

  /// A list of supported swing modes.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#swing_modes
  swing_modes: Listing<String>?

  /// A template to render the value sent to the temperature_command_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#temperature_command_template
  temperature_command_template: String?

  /// The MQTT topic to publish commands to change the target temperature.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_command_topic
  temperature_command_topic: String?

  /// A template to render the value sent to the temperature_high_command_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#temperature_high_command_template
  temperature_high_command_template: String?

  /// The MQTT topic to publish commands to change the high target temperature.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_high_command_topic
  temperature_high_command_topic: String?

  /// A template to render the value received on the temperature_high_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_high_state_template
  temperature_high_state_template: String?

  /// The MQTT topic to subscribe for changes in the target high temperature. If this is not set, the
  /// target high temperature works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_high_state_topic
  temperature_high_state_topic: String?

  /// A template to render the value sent to the temperature_high_command_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt/#temperature_high_command_template
  temperature_low_command_template: String?

  /// The MQTT topic to publish commands to change the target low temperature.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_low_command_topic
  temperature_low_command_topic: String?

  /// A template to render the value received on the temperature_low_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_low_state_template
  temperature_low_state_template: String?

  /// The MQTT topic to subscribe for changes in the target low temperature. If this is not set, the
  /// target low temperature works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_low_state_topic
  temperature_low_state_topic: String?

  /// A template to render the value received on the temperature_state_topic with.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_state_template
  temperature_state_template: String?

  /// The MQTT topic to subscribe for changes in the target temperature. If this is not set, the target
  /// temperature works in optimistic mode.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_state_topic
  temperature_state_topic: String?

  /// Defines the temperature unit of the device, C or F. If this is not set, the temperature unit is set
  /// to the system temperature unit.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temperature_unit
  temperature_unit: ("C"|"F")?

  /// Step size for temperature set point.
  /// https://www.home-assistant.io/integrations/climate.mqtt#temp_step
  temp_step: Number?

  /// Default template to render the payloads on all *_state_topics with.
  /// https://www.home-assistant.io/integrations/climate.mqtt#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class CoverItem1 {
  /// The MQTT topic to publish commands to control the cover.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#command_topic
  command_topic: String?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#device_class
  device_class: ("awning"|"blind"|"curtain"|"damper"|"door"|"garage"|"gate"|"shade"|"shutter"|"window")?

  /// The name of the MQTT cover. https://www.home-assistant.io/integrations/cover.mqtt#name
  name: String?

  /// Flag that defines if switch works in optimistic mode.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#optimistic
  optimistic: Boolean?

  /// The command payload that closes the cover.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#payload_close
  payload_close: String?

  /// The command payload that opens the cover.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#payload_open
  payload_open: String?

  /// The command payload that stops the cover.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#payload_stop
  payload_stop: String?

  /// Number which represents closed position.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#position_closed
  position_closed: Int?

  /// Number which represents open position.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#position_open
  position_open: Int?

  /// Defines a template that can be used to extract the payload for the `position_topic` topic.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#position_template
  position_template: String?

  /// The MQTT topic subscribed to receive cover position messages. If position_topic is set state_topic
  /// is ignored. https://www.home-assistant.io/integrations/cover.mqtt/#position_topic
  position_topic: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Defines if published messages should have the retain flag set.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#retain
  retain: Boolean?

  /// Defines a template to define the position to be sent to the set_position_topic topic.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#set_position_template
  set_position_template: String?

  /// The MQTT topic to publish position commands to. You need to set position_topic as well if you want
  /// to use position topic. https://www.home-assistant.io/integrations/cover.mqtt/#set_position_topic
  set_position_topic: String?

  /// The payload that represents the closed state.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#state_closed
  state_closed: String?

  /// The payload that represents the closing state.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#state_closing
  state_closing: String?

  /// The payload that represents the open state.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#state_open
  state_open: String?

  /// The payload that represents the opening state.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#state_opening
  state_opening: String?

  /// The payload that represents the stopped state (for covers that do not report open/closed state).
  /// https://www.home-assistant.io/integrations/cover.mqtt/#state_stopped
  state_stopped: String?

  /// The MQTT topic subscribed to receive cover state messages. Use only if not using position_topic.
  /// State topic can only read open/close state.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#state_topic
  state_topic: String?

  /// The value that will be sent on a close_cover_tilt command.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_closed_value
  tilt_closed_value: Int?

  /// Defines a template that can be used to extract the payload for the `tilt_command_topic` topic.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_command_template
  tilt_command_template: String?

  /// The MQTT topic to publish commands to control the cover tilt.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_command_topic
  tilt_command_topic: String?

  /// The maximum tilt value. https://www.home-assistant.io/integrations/cover.mqtt/#tilt_max
  tilt_max: Int?

  /// The minimum tilt value. https://www.home-assistant.io/integrations/cover.mqtt/#tilt_min
  tilt_min: Int?

  /// The value that will be sent on an open_cover_tilt command.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_opened_value
  tilt_opened_value: Int?

  /// Flag that determines if tilt works in optimistic mode.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_optimistic
  tilt_optimistic: Boolean?

  /// Defines a template that can be used to extract the payload for the tilt_status_topic topic.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_status_template
  tilt_status_template: String?

  /// The MQTT topic subscribed to receive tilt status update values.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#tilt_status_topic
  tilt_status_topic: String?

  /// Defines a template to extract a value from the payload.
  /// https://www.home-assistant.io/integrations/cover.mqtt/#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class DeviceTrackerItem {
  /// The MQTT topic subscribed to receive device tracker state changes.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#state_topic
  state_topic: String?

  /// Defines a template that returns a device tracker state.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#value_template
  value_template: String?

  /// The payload value that represents the ‘home’ state for the device.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#payload_home
  payload_home: String?

  /// The payload value that represents the ‘not_home’ state for the device.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#payload_not_home
  payload_not_home: String?

  /// The payload value that will have the device’s location automatically derived from Home Assistant’s
  /// zones. https://www.home-assistant.io/integrations/device_tracker.mqtt/#payload_reset
  payload_reset: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Attribute of a device tracker that affects state when being used to track a person. Valid options
  /// are gps, router, bluetooth, or bluetooth_le.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#source_type
  source_type: ("bluetooth"|"bluetooth_le"|"gps"|"router")?

  /// The name of the MQTT device_tracker.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#name
  name: String?

  /// Used instead of `name` for automatic generation of `entity_id`.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#object_id
  object_id: String?

  /// An ID that uniquely identifies this device_tracker. If two device_trackers have the same unique ID,
  /// Home Assistant will raise an exception.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#unique_id
  unique_id: String?

  /// Must be `device_tracker`. Only allowed and required in MQTT auto discovery device messages.
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#platform
  platform: String?

  /// List of devices with their topic (legacy YAML configuration).
  /// https://www.home-assistant.io/integrations/device_tracker.mqtt/#devices
  devices: Mapping<String, String>?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?
}

class FanItem1 {
  /// The MQTT topic to publish commands to change the fan state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#command_topic
  command_topic: String

  /// The template used for the command payload.
  /// https://www.home-assistant.io/integrations/fan.mqt/#command_template
  command_template: String?

  /// The name of the MQTT fan. https://www.home-assistant.io/integrations/fan.mqtt#name
  name: String?

  /// Flag that defines if fan works in optimistic mode.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#optimistic
  optimistic: Boolean?

  /// Defines a template to generate the payload to send to `direction_command_template`.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#direction_command_template
  direction_command_template: String?

  /// The MQTT topic to publish commands to change the fan direction state based on a value.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#direction_command_topic
  direction_command_topic: String?

  /// The MQTT topic subscribed to receive fan direction.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#direction_state_topic
  direction_state_topic: String?

  /// Defines a template to extract a value from fan direction.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#direction_value_template
  direction_value_template: String?

  /// Defines a template to generate the payload to send to oscillation_command_topic.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#oscillation_value_template
  oscillation_command_template: String?

  /// The MQTT topic to publish commands to change the oscillation state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#oscillation_command_topic
  oscillation_command_topic: String?

  /// The MQTT topic subscribed to receive oscillation state updates.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#oscillation_state_topic
  oscillation_state_topic: String?

  /// Defines a template to extract a value from the oscillation.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#oscillation_value_template
  oscillation_value_template: String?

  /// The payload that represents the stop state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#payload_off
  payload_off: String?

  /// The payload that represents the running state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#payload_on
  payload_on: String?

  /// The payload that represents the oscillation off state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#payload_oscillation_off
  payload_oscillation_off: String?

  /// The payload that represents the oscillation on state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#payload_oscillation_on
  payload_oscillation_on: String?

  /// A special payload that resets the `percentage` state attribute to `None` when received at the
  /// `percentage_state_topic`.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#payload_reset_percentage
  payload_reset_percentage: String?

  /// A special payload that resets the `preset_mode` state attribute to `None` when received at the
  /// `preset_mode_state_topic`.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#payload_reset_preset_mode
  payload_reset_preset_mode: String?

  /// Defines a template to generate the payload to send to `percentage_command_topic`.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#percentage_command_template
  percentage_command_template: String?

  /// The MQTT topic to publish commands to change the fan speed state based on a percentage.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#percentage_command_topic
  percentage_command_topic: String?

  /// The MQTT topic subscribed to receive fan speed based on percentage.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#percentage_state_topic
  percentage_state_topic: String?

  /// Defines a template to extract a value from fan percentage speed.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#percentage_value_template
  percentage_value_template: String?

  /// Defines a template to generate the payload to send to preset_mode_command_topic.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#preset_mode_command_template
  preset_mode_command_template: String?

  /// The MQTT topic to publish commands to change the preset mode.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#preset_mode_command_topic
  preset_mode_command_topic: String?

  /// The MQTT topic subscribed to receive fan speed based on presets.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#preset_mode_state_topic
  preset_mode_state_topic: String?

  /// Defines a template to extract a value from the preset_mode payload.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#preset_mode_value_template
  preset_mode_value_template: String?

  /// List of preset modes this fan is capable of running at.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#preset_modes
  preset_modes: Listing<String>?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Defines if published messages should have the retain flag set.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#retain
  retain: Boolean?

  /// The minimum of numeric output range (off not included, so speed_range_min - 1 represents 0%).
  /// https://www.home-assistant.io/integrations/fan.mqtt/#speed_range_min
  speed_range_min: Int(isPositive)?

  /// The maximum of numeric output range (representing 100%).
  /// https://www.home-assistant.io/integrations/fan.mqtt/#speed_range_max
  speed_range_max: Int(isPositive)?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#state_topic
  state_topic: String?

  /// Defines a template to extract a value from the state.
  /// https://www.home-assistant.io/integrations/fan.mqtt/#state_value_template
  state_value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class HumidifierItem {
  /// The MQTT topic to subscribe for changes of the current action. Valid values: `off`, `humidifying`,
  /// `drying`, `idle` https://www.home-assistant.io/integrations/humidifier.mqtt/
  action_topic: String?

  /// A template to render the value received on the `action_topic` with.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  action_template: String?

  /// Defines a template to generate the payload to send to `command_topic`.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  command_template: String?

  /// The MQTT topic to publish commands to change the humidifier state.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  command_topic: String

  /// A template with which the value received on `current_humidity_topic` will be rendered.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  current_humidity_template: String?

  /// The MQTT topic on which to listen for the current humidity. A `"None"` value received will reset
  /// the current humidity. Empty values (`'''`) will be ignored.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  current_humidity_topic: String?

  /// The device class of the MQTT device. Must be either `humidifier`, `dehumidifier` or `null`.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  device_class: ("dehumidifier"|"humidifier"|Any)?

  /// The encoding of the payloads received and published messages. Set to `""` to disable decoding of
  /// incoming payload. https://www.home-assistant.io/integrations/humidifier.mqtt/
  encoding: String?

  /// Picture URL for the entity. https://www.home-assistant.io/integrations/humidifier.mqtt/
  entity_picture: String?

  /// The maximum target humidity percentage that can be set.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  max_humidity: Number?

  /// The minimum target humidity percentage that can be set.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  min_humidity: Number?

  /// Defines a template to generate the payload to send to `mode_command_topic`.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  mode_command_template: String?

  /// The MQTT topic to publish commands to change the `mode` on the humidifier. This attribute must be
  /// configured together with the `modes` attribute.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  mode_command_topic: String?

  /// The MQTT topic subscribed to receive the humidifier `mode`.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  mode_state_topic: String?

  /// Defines a template to extract a value for the humidifier `mode` state.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  mode_state_template: String?

  /// List of available modes this humidifier is capable of running at. Common examples include `normal`,
  /// `eco`, `away`, `boost`, `comfort`, `home`, `sleep`, `auto` and `baby`. This attribute must be
  /// configured together with the `mode_command_topic` attribute.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  modes: Listing<String>?

  /// The name of the humidifier. https://www.home-assistant.io/integrations/humidifier.mqtt/
  name: String?

  /// Flag that defines if humidifier works in optimistic mode.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  optimistic: Boolean?

  /// The payload that represents the stop state.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  payload_off: String?

  /// The payload that represents the running state.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  payload_on: String?

  /// A special payload that resets the `target_humidity` state attribute to an `unknown` state when
  /// received at the `target_humidity_state_topic`. When received at `current_humidity_topic` it will
  /// reset the current humidity state. https://www.home-assistant.io/integrations/humidifier.mqtt/
  payload_reset_humidity: String?

  /// A special payload that resets the `mode` state attribute to an `unknown` state when received at the
  /// `mode_state_topic`. https://www.home-assistant.io/integrations/humidifier.mqtt/
  payload_reset_mode: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  retain: Boolean?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  state_topic: String?

  /// Defines a template to extract a value from the state.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  state_value_template: String?

  /// Defines a template to generate the payload to send to `target_humidity_command_topic`.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  target_humidity_command_template: String?

  /// The MQTT topic to publish commands to change the humidifier target humidity state based on a
  /// percentage. https://www.home-assistant.io/integrations/humidifier.mqtt/
  target_humidity_command_topic: String

  /// The MQTT topic subscribed to receive humidifier target humidity.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  target_humidity_state_topic: String?

  /// Defines a template to extract a value for the humidifier `target_humidity` state.
  /// https://www.home-assistant.io/integrations/humidifier.mqtt/
  target_humidity_state_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class ImageItem1 {
  /// The name of the MQTT image. https://www.home-assistant.io/integrations/image.mqtt#name
  name: String?

  /// The content type of an image data message received on image_topic.
  /// https://www.home-assistant.io/integrations/image.mqtt#content_type
  content_type: String?

  /// The encoding of the image payloads received.
  /// https://www.home-assistant.io/integrations/image.mqtt#image_encoding
  image_encoding: String?

  /// The MQTT topic to subscribe to receive the image payload of the image to be downloaded.
  /// https://www.home-assistant.io/integrations/image.mqtt#image_topic
  image_topic: String?

  /// Defines a template to extract the image URL from a message received at url_topic.
  /// https://www.home-assistant.io/integrations/image.mqtt#url_template
  url_template: String?

  /// The MQTT topic to subscribe to receive an image URL.
  /// https://www.home-assistant.io/integrations/image.mqtt#url_topic
  url_topic: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class LightDefaultItem {
  /// The mqtt light platform with default schema lets you control your MQTT enabled lights. It supports
  /// setting brightness, color temperature, effects, flashing, on/off, RGB colors, transitions, XY
  /// colors and white values.
  /// https://www.home-assistant.io/integrations/light.mqtt/#default-schema---configuration
  schema: "default"?

  /// The MQTT topic to publish commands to change the light’s brightness.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness_command_topic
  brightness_command_topic: String?

  /// Defines the maximum brightness value (i.e., 100%) of the MQTT device.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness_scale
  brightness_scale: Int?

  /// The MQTT topic subscribed to receive brightness state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness_state_topic
  brightness_state_topic: String?

  /// Defines a template to extract the brightness value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness_value_template
  brightness_value_template: String?

  /// The MQTT topic subscribed to receive color mode updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_mode_state_topic
  color_mode_state_topic: String?

  /// Defines a template to extract the color mode.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_mode_value_template
  color_mode_value_template: String?

  /// Defines a template to compose message which will be sent to color_temp_command_topic. Available
  /// variables: value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_temp_command_template
  color_temp_command_template: String?

  /// The MQTT topic to publish commands to change the light’s color temperature state. The color
  /// temperature command slider has a range of 153 to 500 mireds (micro reciprocal degrees).
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_temp_command_topic
  color_temp_command_topic: String?

  /// The MQTT topic subscribed to receive color temperature state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_temp_state_topic
  color_temp_state_topic: String?

  /// Defines a template to extract the color temperature value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_temp_value_template
  color_temp_value_template: String?

  /// The MQTT topic to publish commands to change the switch state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#command_topic
  command_topic: String

  /// The MQTT topic to publish commands to change the light’s effect state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_command_topic
  effect_command_topic: String?

  /// The list of effects the light supports.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_list
  effect_list: (Listing<String>|String)?

  /// The MQTT topic subscribed to receive effect state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_state_topic
  effect_state_topic: String?

  /// Defines a template to extract the effect value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_value_template
  effect_value_template: String?

  /// The MQTT topic to publish commands to change the light’s color state in HS format (Hue Saturation).
  /// Range for Hue: 0° .. 360°, Range of Saturation: 0..100.
  /// https://www.home-assistant.io/integrations/light.mqtt/#hs_command_topic
  hs_command_topic: String?

  /// The MQTT topic subscribed to receive color state updates in HS format.
  /// https://www.home-assistant.io/integrations/light.mqtt/#hs_state_topic
  hs_state_topic: String?

  /// Defines a template to extract the HS value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#hs_value_template
  hs_value_template: String?

  /// The maximum color temperature in mireds.
  /// https://www.home-assistant.io/integrations/light.mqtt/#max_mireds
  max_mireds: Int?

  /// The minimum color temperature in mireds.
  /// https://www.home-assistant.io/integrations/light.mqtt/#min_mireds
  min_mireds: Int?

  /// The name of the MQTT light. https://www.home-assistant.io/integrations/light.mqtt#name
  name: String?

  /// Defines when on the payload_on is sent. Using last (the default) will send any style (brightness,
  /// color, etc) topics first and then a payload_on to the command_topic.
  /// https://www.home-assistant.io/integrations/light.mqtt/#on_command_type
  on_command_type: String?

  /// Flag that defines if light works in optimistic mode.
  /// https://www.home-assistant.io/integrations/light.mqtt/#optimistic
  optimistic: Boolean?

  /// The payload that represents disabled state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#payload_off
  payload_off: String?

  /// The payload that represents enabled state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#payload_on
  payload_on: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/light.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Defines if published messages should have the retain flag set.
  /// https://www.home-assistant.io/integrations/light.mqtt/#retain
  retain: Boolean?

  /// Defines a template to compose message which will be sent to rgb_command_topic. Available variables:
  /// red, green and blue. https://www.home-assistant.io/integrations/light.mqtt/#rgb_command_template
  rgb_command_template: String?

  /// The MQTT topic to publish commands to change the light’s RGB state. Please note that the color
  /// value sent by Home Assistant is normalized to full brightness if brightness_command_topic is set.
  /// https://www.home-assistant.io/integrations/light.mqtt/#rgb_command_topic
  rgb_command_topic: String?

  /// The MQTT topic subscribed to receive RGB state updates. The expected payload is the RGB values
  /// separated by commas, for example, 255,0,127.
  /// https://www.home-assistant.io/integrations/light.mqtt/#rgb_state_topic
  rgb_state_topic: String?

  /// Defines a template to extract the RGB value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#rgb_value_template
  rgb_value_template: String?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#state_topic
  state_topic: String?

  /// Defines a template to extract a value from the state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#state_value_template
  state_value_template: String?

  /// The MQTT topic to publish commands to change the light to white mode with a given brightness.
  /// https://www.home-assistant.io/integrations/light.mqtt#white_command_topic
  white_command_topic: String?

  /// Defines the maximum white level (i.e., 100%) of the MQTT device.
  /// https://www.home-assistant.io/integrations/light.mqtt#white_scale
  white_scale: Int?

  /// The MQTT topic to publish commands to change the light’s XY state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#xy_command_topic
  xy_command_topic: String?

  /// The MQTT topic subscribed to receive XY state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#xy_state_topic
  xy_state_topic: String?

  /// Defines a template to extract the XY value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#xy_value_template
  xy_value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class LightJSONItem {
  /// The mqtt light platform with default schema lets you control your MQTT enabled lights. It supports
  /// setting brightness, color temperature, effects, flashing, on/off, RGB colors, transitions, XY
  /// colors and white values.
  /// https://www.home-assistant.io/integrations/light.mqtt/#json-schema---configuration
  schema: "json"?

  /// Flag that defines if the light supports brightness.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness
  brightness: Boolean?

  /// Defines the maximum brightness value (i.e., 100%) of the MQTT device.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness_scale
  brightness_scale: Int?

  /// Flag that defines if the light supports color modes.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color
  color_mode: Boolean?

  /// Flag that defines if the light supports color temperature.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_temp
  color_temp: Boolean?

  /// The MQTT topic to publish commands to change the switch state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#command_topic
  command_topic: String

  /// Flag that defines if the light supports effects.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect
  effect: Boolean?

  /// The list of effects the light supports.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_list
  effect_list: (Listing<String>|String)?

  /// The duration, in seconds, of a “long” flash.
  /// https://www.home-assistant.io/integrations/light.mqtt/#flash_time_long
  flash_time_long: Int?

  /// The duration, in seconds, of a “short” flash.
  /// https://www.home-assistant.io/integrations/light.mqtt/#flash_time_short
  flash_time_short: Int?

  /// Flag that defines if the light supports HS colors.
  /// https://www.home-assistant.io/integrations/light.mqtt/#hs
  hs: Boolean?

  /// The maximum color temperature in mireds.
  /// https://www.home-assistant.io/integrations/light.mqtt/#max_mireds
  max_mireds: Int?

  /// The minimum color temperature in mireds.
  /// https://www.home-assistant.io/integrations/light.mqtt/#min_mireds
  min_mireds: Int?

  /// The name of the MQTT light. https://www.home-assistant.io/integrations/light.mqtt#name
  name: String?

  /// Flag that defines if light works in optimistic mode.
  /// https://www.home-assistant.io/integrations/light.mqtt/#optimistic
  optimistic: Boolean?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/light.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Defines if published messages should have the retain flag set.
  /// https://www.home-assistant.io/integrations/light.mqtt/#retain
  retain: Boolean?

  /// Flag that defines if the light supports RGB colors.
  /// https://www.home-assistant.io/integrations/light.mqtt/#rgb
  rgb: Boolean?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#state_topic
  state_topic: String?

  /// A list of color modes supported by the light.
  /// https://www.home-assistant.io/integrations/light.mqtt/#supported_color_modes
  supported_color_modes: Listing<ColorMode>?

  /// Flag that defines if the light supports white values.
  /// https://www.home-assistant.io/integrations/light.mqtt/#white_value
  white_value: Boolean?

  /// Flag that defines if the light supports XY colors.
  /// https://www.home-assistant.io/integrations/light.mqtt/#xy
  xy: Boolean?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class LightTemplateItem {
  /// The mqtt light platform with default schema lets you control your MQTT enabled lights. It supports
  /// setting brightness, color temperature, effects, flashing, on/off, RGB colors, transitions, XY
  /// colors and white values.
  /// https://www.home-assistant.io/integrations/light.mqtt/#json-schema---configuration
  schema: "template"?

  /// Template to extract blue color from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#blue_template
  blue_template: String?

  /// Template to extract brightness from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#brightness_template
  brightness_template: String?

  /// Template to extract color temperature from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#color_temp_template
  color_temp_template: String?

  /// The template for off state changes. Available variables: state and transition.
  /// https://www.home-assistant.io/integrations/light.mqtt/#command_off_template
  command_off_template: String

  /// The template for on state changes. Available variables: state, brightness, red, green, blue,
  /// white_value, flash, transition and effect.
  /// https://www.home-assistant.io/integrations/light.mqtt/#command_on_template
  command_on_template: String

  /// The MQTT topic to publish commands to change the switch state.
  /// https://www.home-assistant.io/integrations/light.mqtt/#command_topic
  command_topic: String

  /// The list of effects the light supports.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_list
  effect_list: (Listing<String>|String)?

  /// Template to extract effect from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#effect_template
  effect_template: String?

  /// Template to extract green color from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#green_template
  green_template: String?

  /// The maximum color temperature in mireds.
  /// https://www.home-assistant.io/integrations/light.mqtt/#max_mireds
  max_mireds: Int?

  /// The minimum color temperature in mireds.
  /// https://www.home-assistant.io/integrations/light.mqtt/#min_mireds
  min_mireds: Int?

  /// The name of the MQTT light. https://www.home-assistant.io/integrations/light.mqtt#name
  name: String?

  /// Flag that defines if light works in optimistic mode.
  /// https://www.home-assistant.io/integrations/light.mqtt/#optimistic
  optimistic: Boolean?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/light.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// Template to extract red color from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#red_template
  red_template: String?

  /// Template to extract red color from the state payload value.
  /// https://www.home-assistant.io/integrations/light.mqtt/#state_template
  state_template: String?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/light.mqtt/#state_topic
  state_topic: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class LockItem {
  /// The MQTT topic to publish commands to change the lock state.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#command_topic
  command_topic: String

  /// The name of the MQTT lock. https://www.home-assistant.io/integrations/lock.mqtt#name
  name: String?

  /// Flag that defines if lock works in optimistic mode.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#optimistic
  optimistic: Boolean?

  /// The payload that represents enabled/locked state.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#payload_lock
  payload_lock: String?

  /// The value that represents the lock to be in unlocked state.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#state_unlocked
  payload_unlock: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#retain
  retain: Boolean?

  /// The value that represents the lock to be in locked state.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#state_locked
  state_locked: String?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#state_topic
  state_topic: String?

  /// The value that represents the lock to be in unlocked state.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#state_unlocked
  state_unlocked: String?

  /// Defines a template to extract a value from the payload.
  /// https://www.home-assistant.io/integrations/lock.mqtt/#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class NumberItem1 {
  /// The MQTT topic to publish commands to change the number state.
  /// https://www.home-assistant.io/integrations/number.mqtt/#command_topic
  command_topic: String

  /// Maximum value. https://www.home-assistant.io/integrations/number.mqtt#max
  max: Number?

  /// Minimum value. https://www.home-assistant.io/integrations/number.mqtt#min
  min: Number?

  /// The name of the MQTT number. https://www.home-assistant.io/integrations/number.mqtt#name
  name: String?

  /// Flag that defines if the number works in optimistic mode.
  /// https://www.home-assistant.io/integrations/number.mqtt/#optimistic
  optimistic: Boolean?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/number.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/number.mqtt/#retain
  retain: Boolean?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/number.mqtt/#state_topic
  state_topic: String?

  /// Step value. Smallest value `0.001`. https://www.home-assistant.io/integrations/number.mqtt/#step
  step: Number?

  /// Defines the units of measurement, if any.
  /// https://www.home-assistant.io/integrations/number.mqtt#unit_of_measurement
  unit_of_measurement: String?

  /// Defines a template to extract the value.
  /// https://www.home-assistant.io/integrations/number.mqtt#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class SceneItem {
  /// The MQTT topic to publish commands to change the scene state.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#command_topic
  command_topic: String

  /// The name of the MQTT scene. https://www.home-assistant.io/integrations/scene.mqtt#name
  name: String?

  /// Flag that defines if the scene works in optimistic mode.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#optimistic
  optimistic: Boolean?

  /// The payload that represents the scene.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#payload
  payload: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#retain
  retain: Boolean?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#state_topic
  state_topic: String?

  /// Defines a template to extract a value from the state payload.
  /// https://www.home-assistant.io/integrations/scene.mqtt/#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class SelectItem1 {
  /// The MQTT topic to publish commands to control the select.
  /// https://www.home-assistant.io/integrations/select.mqtt/#command_topic
  command_topic: String

  /// The name of the MQTT select. https://www.home-assistant.io/integrations/select.mqtt#name
  name: String?

  /// Flag that defines the select works in optimistic mode.
  /// https://www.home-assistant.io/integrations/select.mqtt/#optimistic
  optimistic: Boolean?

  /// List of options to choose from in the select.
  /// https://www.home-assistant.io/integrations/select.mqtt/#options
  options: Listing<String>?

  /// The maximum QoS level of the state topic.
  /// https://www.home-assistant.io/integrations/select.mqtt#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/select.mqtt/#retain
  retain: Boolean?

  /// The MQTT topic subscribed to receive the select value.
  /// https://www.home-assistant.io/integrations/select.mqtt#state_topic
  state_topic: String?

  /// Defines a template to extract a value from the payload.
  /// https://www.home-assistant.io/integrations/select.mqtt/#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class SirenItem {
  /// The list of available tones the siren supports.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#available_tones
  available_tones: Listing<String>?

  /// Defines a template to generate a custom payload to send to command_topic.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#command_template
  command_template: String?

  /// Defines a template to generate a custom payload to send to command_topic when the siren turn off
  /// action is called. https://www.home-assistant.io/integrations/siren.mqtt/#command_off_template
  command_off_template: String?

  /// The MQTT topic to publish commands to change the siren state.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#command_topic
  command_topic: String

  /// Defines if the siren supports the duration option.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#support_duration
  support_duration: Boolean?

  /// Defines if the siren supports setting the volume.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#support_volume_set
  support_volume_set: Boolean?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#state_topic
  state_topic: String?

  /// Defines a template to extract device's state from the state_topic.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#state_value_template
  state_value_template: String?

  /// The payload that represents off state. If specified, will be used for both comparing to the value
  /// in the state_topic and sending as off command to the command_topic.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#payload_off
  payload_off: String?

  /// The payload that represents on state. If specified, will be used for both comparing to the value in
  /// the state_topic and sending as on command to the command_topic.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#payload_on
  payload_on: String?

  /// The payload that represents the off state.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#state_off
  state_off: String?

  /// The payload that represents the on state.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#state_on
  state_on: String?

  /// Flag that defines if siren works in optimistic mode.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#optimistic
  optimistic: Boolean?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/siren.mqtt/#retain
  retain: Boolean?

  /// The name of the siren. https://www.home-assistant.io/integrations/siren.mqtt/#name
  name: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class SensorItem2 {
  /// The type/class of the sensor to set the icon in the frontend.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#device_class
  device_class: (
    "apparent_power"
    |"aqi"
    |"area"
    |"atmospheric_pressure"
    |"battery"
    |"blood_glucose_concentration"
    |"carbon_dioxide"
    |"carbon_monoxide"
    |"conductivity"
    |"current"
    |"data_rate"
    |"data_size"
    |"date"
    |"distance"
    |"duration"
    |"energy"
    |"energy_distance"
    |"energy_storage"
    |"enum"
    |"frequency"
    |"gas"
    |"humidity"
    |"illuminance"
    |"irradiance"
    |"moisture"
    |"monetary"
    |"nitrogen_dioxide"
    |"nitrogen_monoxide"
    |"nitrous_oxide"
    |"ozone"
    |"ph"
    |"pm1"
    |"pm10"
    |"pm25"
    |"power"
    |"power_factor"
    |"precipitation"
    |"precipitation_intensity"
    |"pressure"
    |"reactive_power"
    |"signal_strength"
    |"sound_pressure"
    |"speed"
    |"sulphur_dioxide"
    |"temperature"
    |"timestamp"
    |"volatile_organic_compounds"
    |"volatile_organic_compounds_parts"
    |"voltage"
    |"volume"
    |"volume_flow_rate"
    |"volume_storage"
    |"water"
    |"weight"
    |"wind_speed")?

  /// The encoding of the payloads received. Set to "" to disable decoding of incoming payload.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#encoding
  encoding: String?

  /// Picture URL for the entity. https://www.home-assistant.io/integrations/sensor.mqtt#entity_picture
  entity_picture: String?

  /// Defines the number of seconds after the sensor’s state expires, if it’s not updated. After expiry,
  /// the sensor’s state becomes unavailable.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#expire_after
  expire_after: Int(isPositive)?

  /// Sends update events even if the value hasn’t changed. Useful if you want to have meaningful value
  /// graphs in history. https://www.home-assistant.io/integrations/sensor.mqtt#expire_after
  force_update: Boolean?

  /// The MQTT topic subscribed to receive timestamps for when an accumulating sensor such as an energy
  /// meter was reset. If the sensor never resets, set last_reset_topic to same as state_topic and set
  /// the last_reset_value_template to a constant valid timstamp, for example UNIX epoch 0:
  /// 1970-01-01T00:00:00+00:00. https://www.home-assistant.io/integrations/sensor.mqtt#last_reset_topic
  last_reset_topic: String?

  /// Defines a template to extract the last_reset. Available variables: entity_id. The entity_id can be
  /// used to reference the entity’s attributes.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#last_reset_value_template
  last_reset_value_template: String?

  /// The name of the MQTT sensor. Can be set to null if only the device name is relevant.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#name
  name: String?

  /// List of allowed sensor state value. An empty list is not allowed. The sensor's device_class must be
  /// set to enum. https://www.home-assistant.io/integrations/sensor.mqtt#options
  options: Listing<String>?

  /// Must be sensor. Only allowed and required in MQTT auto discovery device messages.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#platform
  platform: "sensor"?

  /// The maximum QoS level of the state topic.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// The state_class of the sensor. https://www.home-assistant.io/integrations/sensor.mqtt#state_class
  state_class: ("measurement"|"total"|"total_increasing")?

  /// The MQTT topic subscribed to receive sensor values.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#state_topic
  state_topic: String

  /// The number of decimals which should be used in the sensor's state after rounding.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#suggested_display_precision
  suggested_display_precision: Int?

  /// Defines the units of measurement of the sensor, if any.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#unit_of_measurement
  unit_of_measurement: String?

  /// Defines a template to extract the value.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class SwitchItem2 {
  /// The MQTT topic to publish commands to change the switch state.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#command_topic
  command_topic: String

  /// Defines a template to generate the payload to send to command_topic.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#command_template
  command_template: String?

  /// Sets the class of the device, changing the device state and icon that is displayed on the frontend.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#device_class
  device_class: String?

  /// The name of the MQTT switch. https://www.home-assistant.io/integrations/switch.mqtt#name
  name: String?

  /// Flag that defines if switch works in optimistic mode.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#optimistic
  optimistic: Boolean?

  /// The payload that represents the off state.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#payload_off
  payload_off: String?

  /// The payload that represents the on state.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#payload_on
  payload_on: String?

  /// The maximum QoS level to be used when receiving and publishing messages.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#retain
  retain: Boolean?

  /// The payload that represents the off state. Used when value that represents off state in the
  /// state_topic is different from value that should be sent to the command_topic to turn the device
  /// off. https://www.home-assistant.io/integrations/switch.mqtt/#state_off
  state_off: String?

  /// The payload that represents the on state. Used when value that represents on state in the
  /// state_topic is different from value that should be sent to the command_topic to turn the device on.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#state_on
  state_on: String?

  /// The MQTT topic subscribed to receive state updates.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#state_topic
  state_topic: String?

  /// Defines a template to extract device's state from the state_topic.
  /// https://www.home-assistant.io/integrations/switch.mqtt/#value_template
  value_template: String?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class VacuumItem {
  /// The schema to use. Must be state to select the state schema.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#schema
  schema: "state"

  /// The MQTT topic to publish commands to control the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#command_topic
  command_topic: String?

  /// List of possible fan speeds for the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#fan_speed_list
  fan_speed_list: Listing<String>?

  /// Defines a template to define the fan speed of the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#fan_speed_template
  fan_speed_template: String?

  /// The MQTT topic subscribed to receive fan speed values from the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#fan_speed_topic
  fan_speed_topic: String?

  /// The name of the MQTT vacuum. https://www.home-assistant.io/integrations/vacuum.mqtt#name
  name: String?

  /// The payload to send to the command_topic to begin a spot cleaning cycle.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_clean_spot
  payload_clean_spot: String?

  /// The payload to send to the command_topic to locate the vacuum (typically plays a song).
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_locate
  payload_locate: String?

  /// The payload to send to the command_topic to pause the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_pause
  payload_pause: String?

  /// The payload to send to the command_topic to tell the vacuum to return to base.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_return_to_base
  payload_return_to_base: String?

  /// The payload to send to the command_topic to begin the cleaning cycle.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_start
  payload_start: String?

  /// The payload to send to the command_topic to stop the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_stop
  payload_stop: String?

  /// The maximum QoS level of the state topic.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#retain
  retain: Boolean?

  /// The MQTT topic to publish custom commands to the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#send_command_topic
  send_command_topic: String?

  /// The MQTT topic to publish commands to control the vacuum’s fan speed.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#set_fan_speed_topic
  set_fan_speed_topic: String?

  /// The MQTT topic subscribed to receive state messages from the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#state_topic
  state_topic: String

  /// List of features that the vacuum supports (possible values are start, stop, pause, return_home,
  /// battery, status, locate, clean_spot, fan_speed, send_command).
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#supported_features
  supported_features: Listing<String>?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class VacuumLegacyItem {
  /// The schema to use. Must be state to select the state schema.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#schema
  schema: "legacy"?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  battery_level_template: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  battery_level_topic: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  charging_template: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  charging_topic: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  cleaning_template: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  cleaning_topic: Listing<Any>?

  /// The MQTT topic to publish commands to control the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#command_topic
  command_topic: String?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  docked_template: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  docked_topic: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  error_template: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  error_topic: Listing<Any>?

  /// List of possible fan speeds for the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#fan_speed_list
  fan_speed_list: Listing<String>?

  /// Defines a template to define the fan speed of the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#fan_speed_template
  fan_speed_template: String?

  /// The MQTT topic subscribed to receive fan speed values from the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#fan_speed_topic
  fan_speed_topic: String?

  /// The name of the MQTT vacuum. https://www.home-assistant.io/integrations/vacuum.mqtt#name
  name: String?

  /// The payload to send to the command_topic to begin a spot cleaning cycle.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_clean_spot
  payload_clean_spot: String?

  /// The payload to send to the command_topic to locate the vacuum (typically plays a song).
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_locate
  payload_locate: String?

  /// The payload to send to the command_topic to tell the vacuum to return to base.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_return_to_base
  payload_return_to_base: String?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  payload_start_pause: Listing<Any>?

  /// The payload to send to the command_topic to stop the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#payload_stop
  payload_stop: String?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  payload_turn_on: Listing<Any>?

  /// DEPRECATED This option is part of the deprecated legacy MQTT vacuum schema. New installations
  /// should use the state schema as legacy is deprecated and might be removed someday in the future.
  payload_turn_off: Listing<Any>?

  /// The maximum QoS level of the state topic.
  /// https://www.home-assistant.io/integrations/sensor.mqtt#qos
  qos: Number(this == 0 || this == 1 || this == 2)?

  /// If the published message should have the retain flag on or not.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#retain
  retain: Boolean?

  /// The MQTT topic to publish custom commands to the vacuum.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#send_command_topic
  send_command_topic: String?

  /// The MQTT topic to publish commands to control the vacuum’s fan speed.
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#set_fan_speed_topic
  set_fan_speed_topic: String?

  /// List of features that the vacuum supports (possible values are start, stop, pause, return_home,
  /// battery, status, locate, clean_spot, fan_speed, send_command).
  /// https://www.home-assistant.io/integrations/vacuum.mqtt/#supported_features
  supported_features: Listing<String>?

  /// A list of MQTT topics subscribed to receive availability (online/offline) updates.
  availability: Listing<Availability>?

  /// When availability is configured, this controls the conditions needed to set the entity to
  /// available. Valid entries are all, any, and latest.
  availability_mode: ("all"|"any"|"latest")?

  /// Defines a template to extract device’s availability from the availability_topic. To determine the
  /// devices’s availability result of this template will be compared to payload_available and
  /// payload_not_available.
  availability_template: String?

  /// The MQTT topic subscribed to receive availability (online/offline) updates.
  availability_topic: String?

  /// The payload that represents the available state.
  payload_available: String?

  /// The payload that represents the unavailable state.
  payload_not_available: String?

  /// Information about the device this sensor is a part of to tie it into the device registry. Only
  /// works through MQTT discovery and when unique_id is set.
  device: VacuumLegacyItemDevice?

  /// Flag which defines if the entity should be enabled when first added.
  enabled_by_default: Boolean?

  /// The category of the entity. When set, the entity category must be "diagnostic" for sensors.
  entity_category: ("config"|"diagnostic")?

  /// Icon to use for the entity created.
  icon: String?

  /// Defines a template to extract the JSON dictionary from messages received on the
  /// json_attributes_topic.
  json_attributes_template: String?

  /// The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes.
  json_attributes_topic: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  object_id: String?

  /// An ID that uniquely identifies this sensor. If two sensors have the same unique ID, Home Assistant
  /// will raise an exception.
  unique_id: String?
}

class Schema20 {
  /// Topic for publishing local events.
  /// https://www.home-assistant.io/integrations/mqtt_eventstream/#publish_topic
  publish_topic: String?

  /// Topic to receive events from the remote server.
  /// https://www.home-assistant.io/integrations/mqtt_eventstream/#subscribe_topic
  subscribe_topic: String?

  /// Ignore sending these events over mqtt.
  /// https://www.home-assistant.io/integrations/mqtt_eventstream/#ignore_event
  ignore_event: Listing<String>?
}

class Schema21 {
  /// Base topic used to generate the actual topic used to publish.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#base_topic
  base_topic: String

  /// Publish attributes of the entity as well as the state.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#publish_attributes
  publish_attributes: Boolean?

  /// Publish the last_changed and last_updated timestamps for the entity.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#publish_timestamps
  publish_timestamps: Boolean?

  /// Configure which integrations should be excluded from the statestream
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#exclude
  exclude: Listing<Exclude>?

  /// Configure which integrations should be included in the statestream. If set, all other entities will
  /// not be included. https://www.home-assistant.io/integrations/mqtt_statestream/#include
  include: Include?
}

class Exclude {
  /// The list of entity ids to be excluded from the statestream.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#entities
  entities: (String(matches(Regex(#"^.*\..*$"#)))|Listing<String(matches(Regex(#"^.*\..*$"#)))>)?

  /// Exclude all entities matching a listed pattern from the statestream (e.g., sensor.weather_*).
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#entity_globs
  entity_globs: Listing<String>?

  /// The list of domains to be excluded from the statestream.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#domains
  domains: Listing<Any>?
}

/// Configure which integrations should be included in the statestream. If set, all other entities will
/// not be included. https://www.home-assistant.io/integrations/mqtt_statestream/#include
class Include {
  /// The list of entity ids to be included in the statestream.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#entities
  entities: (String(matches(Regex(#"^.*\..*$"#)))|Listing<String(matches(Regex(#"^.*\..*$"#)))>)?

  /// Include all entities matching a listed pattern from the statestream (e.g., sensor.weather_*).
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#entity_globs
  entity_globs: Listing<String>?

  /// The list of domains to be excluded from the statestream.
  /// https://www.home-assistant.io/integrations/mqtt_statestream/#domains
  domains: Listing<Any>?
}

class Schema22 {
  /// Github Personal Access Token. https://hacs.xyz/docs/configuration/legacy
  token: String(matches(Regex("^[0-9a-zA-Z_]{40}$")))

  /// Enable tracking of AppDaemon apps. https://hacs.xyz/docs/configuration/legacy
  appdaemon: Boolean?

  /// Enable hacs debug mode. https://hacs.xyz/docs/configuration/legacy
  debug: Boolean?

  /// Boolean to enable experimental features. https://hacs.xyz/docs/configuration/legacy
  experimental: Boolean?

  /// Development option to point to the development repository of the frontend.
  frontend_repo_url: String?

  /// Development option to point to the development repository of the frontend.
  frontend_repo: String?

  /// Enable tracking of NetDaemon apps. https://hacs.xyz/docs/configuration/legacy
  netdaemon: Boolean?

  /// Number of releases to show in the version selector. https://hacs.xyz/docs/configuration/legacy
  release_limit: Number?

  /// The icon used for the sidepanel link. https://hacs.xyz/docs/configuration/legacy
  sidepanel_icon: String?

  /// he name used for the sidepanel link. https://hacs.xyz/docs/configuration/legacy
  sidepanel_title: String?
}

/// TODO: Definitions below need to be extracted in a similar fashion as integrations.
typealias AuthProviders =
  HomeAssistantAuthProvider
  |TrustedNetworksAuthProvider
  |CommandLineAuthProvider
  |LegacyApiPasswordAuthProvider

typealias CoreCustomize = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |CoreCustomizeItem>

typealias Item = AlarmControlPanelPlatformSchema|OtherPlatform13

typealias Entities = String(matches(Regex(#"^.*\..*$"#)))|Listing<String(matches(Regex(#"^.*\..*$"#)))>

typealias StateState = String|Number|Boolean

typealias Weekday = "fri"|"mon"|"sat"|"sun"|"thu"|"tue"|"wed"

typealias ZoneEntities = String(matches(Regex(#"^zone\..*$"#)))|Listing<String(matches(Regex(#"^zone\..*$"#)))>

typealias Condition =
  String(matches(Regex(#"^\{\{.*$"#)))
  |String(matches(Regex(#"^\{%.*$"#)))
  |String(matches(Regex(#"^\{#.*$"#)))
  |AndCondition
  |AndShorthandCondition
  |DeviceCondition
  |NotCondition
  |NotShorthandCondition
  |NumericStateCondition
  |OrCondition
  |OrShorthandCondition
  |ShorthandCondition
  |StateCondition
  |SunCondition
  |TemplateCondition
  |TimeCondition
  |TriggerCondition
  |ZoneCondition

typealias TimePeriod = TimePeriodMap|String|Number

typealias Data = Mapping<String, Any>

typealias EventType =
  "automation_reloaded"
  |"automation_triggered"
  |"call_service"
  |"component_loaded"
  |"deconz_event"
  |"homeassistant_started"
  |"homeassistant_stop"
  |"logbook_entry"
  |"platform_discovered"
  |"scene_reloaded"
  |"service_executed"
  |"service_registered"
  |"service_removed"
  |"state_changed"
  |"tag_scanned"
  |"themes_updates"
  |"time_changed"
  |"user_added"
  |"user_removed"
  |"zha_event"

typealias PersistentNotificationUpdateType = "added"|"removed"|"updated"

typealias AllowedMethods = "GET"|"HEAD"|"POST"|"PUT"

typealias Trigger =
  WebOSTvTrigger
  |CalendarTrigger
  |ConversationTrigger
  |DeviceTrigger
  |EventTrigger
  |GeolocationTrigger
  |HomeAssistantTrigger
  |MqttTrigger
  |NumericStateTrigger
  |PersistentNotificationTrigger
  |StateTrigger
  |SunTrigger
  |TagTrigger
  |TemplateTrigger
  |TimeTrigger
  |TimePatternTrigger
  |WebhookTrigger
  |ZoneTrigger

typealias Action =
  String(matches(Regex(#"^\{\{.*$"#)))
  |String(matches(Regex(#"^\{%.*$"#)))
  |String(matches(Regex(#"^\{#.*$"#)))
  |AndCondition
  |AndShorthandCondition
  |DeviceCondition
  |NotCondition
  |NotShorthandCondition
  |NumericStateCondition
  |OrCondition
  |OrShorthandCondition
  |ShorthandCondition
  |StateCondition
  |SunCondition
  |TemplateCondition
  |TimeCondition
  |TriggerCondition
  |ZoneCondition
  |ChooseAction
  |DelayAction
  |DeviceAction
  |EventAction
  |IfAction
  |ParallelAction
  |RepeatAction
  |SceneAction
  |ServiceAction
  |SequenceAction
  |StopAction
  |WaitForTriggerAction
  |WaitTemplateAction
  |VariablesAction

typealias Schema1 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item1
  |Any>

typealias `Record<string,never>` = Mapping<String, Any>

typealias Item2 = AutomationItem|BlueprintItem

typealias Item3 = BinarySensorPlatformSchema|BinarySensorPlatformSchema1|BinarySensorPlatformSchema2|OtherPlatform1

typealias Item4 = ProxyCameraPlatformSchema|OtherPlatform2

typealias Schema3 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item5>

typealias Item6 = CoverPlatformSchema|CoverPlatformSchema1|OtherPlatform4

typealias Item7 = FanPlatformSchema|FanPlatformSchema1|OtherPlatform12

typealias Schema4 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item8>

typealias Schema6 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item9
  |Any>

typealias Schema7 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item10
  |Any>

typealias Schema8 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item11
  |Any>

typealias Schema9 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item12
  |Any>

typealias Schema10 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item13
  |Any>

typealias Schema11 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item14
  |Any>

typealias Schema12 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item15
  |Any>

typealias Item16 = LightPlatformSchema|LightPlatformSchema1|OtherPlatform12

typealias Item17 = LockPlatformSchema|LockPlatformSchema1|OtherPlatform12

typealias Schema14 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item19>

typealias Schema15 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |ScriptItem
  |BlueprintItem1>

typealias DeviceClasses =
  "apparent_power"
  |"aqi"
  |"area"
  |"atmospheric_pressure"
  |"awning"
  |"battery"
  |"battery_charging"
  |"blind"
  |"blood_glucose_concentration"
  |"carbon_dioxide"
  |"carbon_monoxide"
  |"cold"
  |"conductivity"
  |"connectivity"
  |"current"
  |"curtain"
  |"damper"
  |"data_rate"
  |"data_size"
  |"date"
  |"distance"
  |"door"
  |"duration"
  |"energy"
  |"energy_distance"
  |"energy_storage"
  |"enum"
  |"frequency"
  |"garage"
  |"garage_door"
  |"gas"
  |"gate"
  |"heat"
  |"humidity"
  |"illuminance"
  |"irradiance"
  |"light"
  |"lock"
  |"moisture"
  |"monetary"
  |"motion"
  |"moving"
  |"nitrogen_dioxide"
  |"nitrogen_monoxide"
  |"nitrous_oxide"
  |"occupancy"
  |"opening"
  |"outlet"
  |"ozone"
  |"ph"
  |"plug"
  |"pm1"
  |"pm10"
  |"pm25"
  |"power"
  |"power_factor"
  |"precipitation"
  |"precipitation_intensity"
  |"presence"
  |"pressure"
  |"problem"
  |"reactive_power"
  |"receiver"
  |"running"
  |"safety"
  |"shade"
  |"shutter"
  |"signal_strength"
  |"smoke"
  |"sound"
  |"sound_pressure"
  |"speaker"
  |"speed"
  |"sulphur_dioxide"
  |"switch"
  |"tamper"
  |"temperature"
  |"timestamp"
  |"tv"
  |"update"
  |"vibration"
  |"volatile_organic_compounds"
  |"volatile_organic_compounds_parts"
  |"voltage"
  |"volume"
  |"volume_flow_rate"
  |"volume_storage"
  |"water"
  |"weight"
  |"wind_speed"
  |"window"

typealias SupportedFeature =
  "camera.AlarmControlPanelEntityFeature.ARM_AWAY"
  |"camera.AlarmControlPanelEntityFeature.ARM_CUSTOM_BYPASS"
  |"camera.AlarmControlPanelEntityFeature.ARM_HOME"
  |"camera.AlarmControlPanelEntityFeature.ARM_NIGHT"
  |"camera.AlarmControlPanelEntityFeature.ARM_VACATION"
  |"camera.AlarmControlPanelEntityFeature.TRIGGER"
  |"camera.CameraEntityFeature.ON_OFF"
  |"camera.CameraEntityFeature.STREAM"
  |"climate.ClimateEntityFeature.AUX_HEAT"
  |"climate.ClimateEntityFeature.FAN_MODE"
  |"climate.ClimateEntityFeature.PRESET_MODE"
  |"climate.ClimateEntityFeature.SWING_HORIZONTAL_MODE"
  |"climate.ClimateEntityFeature.SWING_MODE"
  |"climate.ClimateEntityFeature.TARGET_HUMIDITY"
  |"climate.ClimateEntityFeature.TARGET_TEMPERATURE"
  |"climate.ClimateEntityFeature.TARGET_TEMPERATURE_RANGE"
  |"climate.ClimateEntityFeature.TURN_OFF"
  |"climate.ClimateEntityFeature.TURN_ON"
  |"cover.CoverEntityFeature.CLOSE"
  |"cover.CoverEntityFeature.CLOSE_TILT"
  |"cover.CoverEntityFeature.OPEN"
  |"cover.CoverEntityFeature.OPEN_TILT"
  |"cover.CoverEntityFeature.SET_POSITION"
  |"cover.CoverEntityFeature.SET_TILT_POSITION"
  |"cover.CoverEntityFeature.STOP"
  |"cover.CoverEntityFeature.STOP_TILT"
  |"fan.FanEntityFeature.DIRECTION"
  |"fan.FanEntityFeature.OSCILLATE"
  |"fan.FanEntityFeature.PRESET_MODE"
  |"fan.FanEntityFeature.SET_SPEED"
  |"fan.FanEntityFeature.TURN_OFF"
  |"fan.FanEntityFeature.TURN_ON"
  |"light.LightEntityFeature.EFFECT"
  |"light.LightEntityFeature.FLASH"
  |"light.LightEntityFeature.TRANSITION"
  |"lock.LockEntityFeature.OPEN"
  |"update.UpdateEntityFeature.BACKUP"
  |"update.UpdateEntityFeature.INSTALL"
  |"update.UpdateEntityFeature.PROGRESS"
  |"update.UpdateEntityFeature.RELEASE_NOTES"
  |"update.UpdateEntityFeature.SPECIFIC_VERSION"
  |"vacuum.VacuumEntityFeature.BATTERY"
  |"vacuum.VacuumEntityFeature.CLEAN_SPOT"
  |"vacuum.VacuumEntityFeature.FAN_SPEED"
  |"vacuum.VacuumEntityFeature.LOCATE"
  |"vacuum.VacuumEntityFeature.MAP"
  |"vacuum.VacuumEntityFeature.PAUSE"
  |"vacuum.VacuumEntityFeature.RETURN_HOME"
  |"vacuum.VacuumEntityFeature.SEND_COMMAND"
  |"vacuum.VacuumEntityFeature.START"
  |"vacuum.VacuumEntityFeature.STATE"
  |"vacuum.VacuumEntityFeature.STATUS"
  |"vacuum.VacuumEntityFeature.STOP"
  |"vacuum.VacuumEntityFeature.TURN_OFF"
  |"vacuum.VacuumEntityFeature.TURN_ON"
  |"weather.WeatherEntityFeature.FORECAST_DAILY"
  |"weather.WeatherEntityFeature.FORECAST_HOURLY"
  |"weather.WeatherEntityFeature.FORECAST_TWICE_DAILY"

typealias Item21 = SensorPlatformSchema|SensorPlatformSchema1|SensorPlatformSchema2|OtherPlatform11

typealias Item22 = SwitchPlatformSchema|SwitchPlatformSchema1|OtherPlatform12

typealias Schema16 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item24>

typealias Item25 = VacuumPlatformSchema|OtherPlatform13

typealias Item26 = WeatherPlatformSchema|OtherPlatform14

typealias Schema18 = Mapping<String, 
  String(matches(Regex("^!include_dir_named .*$")))
  |String(matches(Regex("^!include_dir_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_named\t.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named .*$")))
  |String(matches(Regex("^!include_dir_merge_named\r.*$")))
  |String(matches(Regex("""
  ^!include_dir_merge_named
  .*$
  """)))
  |String(matches(Regex("^!include_dir_merge_named\t.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |String(matches(Regex("^!include_dir_merge_named.*$")))
  |Item27>

typealias GroupAddresses = Listing<String>|String

typealias ValueType =
  "1byte_signed"
  |"1byte_unsigned"
  |"2byte_float"
  |"2byte_signed"
  |"2byte_unsigned"
  |"4byte_float"
  |"4byte_signed"
  |"4byte_unsigned"
  |"8byte_signed"
  |"absolute_humidity"
  |"absolute_temperature"
  |"acceleration"
  |"acceleration_angular"
  |"activation_energy"
  |"active_energy"
  |"active_energy_8byte"
  |"active_energy_kwh"
  |"activity"
  |"air_flow"
  |"amplitude"
  |"angle"
  |"angle_deg"
  |"angle_rad"
  |"angular_frequency"
  |"angular_momentum"
  |"angular_velocity"
  |"apparant_energy"
  |"apparant_energy_8byte"
  |"apparant_energy_kvah"
  |"apparent_power"
  |"area"
  |"brightness"
  |"capacitance"
  |"charge_density_surface"
  |"charge_density_volume"
  |"color_temperature"
  |"common_temperature"
  |"compressibility"
  |"concentration_ugm3"
  |"conductance"
  |"counter_pulses"
  |"curr"
  |"current"
  |"decimal_factor"
  |"delta_time_100ms"
  |"delta_time_10ms"
  |"delta_time_hrs"
  |"delta_time_min"
  |"delta_time_ms"
  |"delta_time_sec"
  |"density"
  |"electric_charge"
  |"electric_current"
  |"electric_current_density"
  |"electric_dipole_moment"
  |"electric_displacement"
  |"electric_field_strength"
  |"electric_flux"
  |"electric_flux_density"
  |"electric_polarization"
  |"electric_potential"
  |"electric_potential_difference"
  |"electrical_conductivity"
  |"electromagnetic_moment"
  |"electromotive_force"
  |"energy"
  |"enthalpy"
  |"flow_rate_m3h"
  |"force"
  |"frequency"
  |"heat_quantity"
  |"heatcapacity"
  |"heatflowrate"
  |"humidity"
  |"illuminance"
  |"impedance"
  |"kelvin_per_percent"
  |"latin_1"
  |"length"
  |"length_m"
  |"length_mm"
  |"light_quantity"
  |"long_delta_timesec"
  |"long_time_period_hrs"
  |"long_time_period_min"
  |"long_time_period_sec"
  |"luminance"
  |"luminous_flux"
  |"luminous_intensity"
  |"magnetic_field_strength"
  |"magnetic_flux"
  |"magnetic_flux_density"
  |"magnetic_moment"
  |"magnetic_polarization"
  |"magnetization"
  |"magnetomotive_force"
  |"mass"
  |"mass_flux"
  |"mol"
  |"momentum"
  |"percent"
  |"percentU8"
  |"percentV16"
  |"percentV8"
  |"phaseangledeg"
  |"phaseanglerad"
  |"power"
  |"power_2byte"
  |"power_density"
  |"powerfactor"
  |"ppm"
  |"pressure"
  |"pressure_2byte"
  |"pulse"
  |"pulse_2byte"
  |"pulse_2byte_signed"
  |"pulse_4_ucount"
  |"pulse_4byte"
  |"rain_amount"
  |"reactance"
  |"reactive_energy"
  |"reactive_energy_8byte"
  |"reactive_energy_kvarh"
  |"resistance"
  |"resistivity"
  |"rotation_angle"
  |"scene_number"
  |"self_inductance"
  |"solid_angle"
  |"sound_intensity"
  |"speed"
  |"stress"
  |"string"
  |"surface_tension"
  |"tariff"
  |"temperature"
  |"temperature_a"
  |"temperature_difference"
  |"temperature_difference_2byte"
  |"temperature_f"
  |"thermal_capacity"
  |"thermal_conductivity"
  |"thermoelectric_power"
  |"time_1"
  |"time_2"
  |"time_period_100msec"
  |"time_period_10msec"
  |"time_period_hrs"
  |"time_period_min"
  |"time_period_msec"
  |"time_period_sec"
  |"time_seconds"
  |"torque"
  |"voltage"
  |"volume"
  |"volume_flow"
  |"volume_flux"
  |"volume_liquid_litre"
  |"volume_m3"
  |"weight"
  |"wind_speed_kmh"
  |"wind_speed_ms"
  |"work"

/// From: https://github.com/home-assistant/core/blob/dev/homeassistant/components/light/const.py
typealias ColorMode = "brightness"|"color_temp"|"hs"|"onoff"|"rgb"|"rgbw"|"rgbww"|"unknown"|"white"|"xy"
